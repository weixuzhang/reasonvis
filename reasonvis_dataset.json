{
  "4": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT Major, Sex, COUNT(*) AS Student_Count FROM Student GROUP BY Major, Sex",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT Major, Sex, COUNT(*) AS Student_Count FROM Student GROUP BY Major, Sex"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Major",
      "y_name": "Student_Count",
      "x_data": [
        "600"
      ],
      "y_data": [
        "3"
      ],
      "classify": [
        "Sex"
      ],
      "describe": "Number of students by major and sex",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students are there in each major, categorized by sex?",
      "Which majors have the highest number of female students?",
      "Is there a significant difference in the number of male and female students in each major?",
      "How does the distribution of students by sex compare across different majors?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in",
      "Activity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "8": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "StudentCount",
      "x_data": [
        "600"
      ],
      "y_data": [
        "3"
      ],
      "classify": [],
      "describe": "Count of students in each major",
      "sort": null
    },
    "nl_queries": [
      "How many students are in each major?",
      "What is the distribution of male and female students in each major?",
      "Which faculty members are advisors for students in each major?",
      "How many students participate in each activity by major?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in",
      "Activity",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "9": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Faculty.Sex, COUNT(*) AS FacultyCount FROM Faculty GROUP BY Faculty.Sex",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Faculty.Sex, COUNT(*) AS FacultyCount FROM Faculty GROUP BY Faculty.Sex"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "FacultyCount",
      "x_data": [
        "M"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of faculty members by gender",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of faculty members by gender?",
      "How many male and female students are there in each major?",
      "How many male and female students participate in each activity?",
      "What activities have the highest participation rate among female students?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in",
      "Activity",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "14": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Major, COUNT(StuID) AS Number_of_Students FROM Student GROUP BY Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Major, COUNT(StuID) AS Number_of_Students FROM Student GROUP BY Major"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "Number_of_Students",
      "x_data": [
        "600"
      ],
      "y_data": [
        "3"
      ],
      "classify": [],
      "describe": "Count of students per major",
      "sort": null
    },
    "nl_queries": [
      "How many students are in each major?",
      "Which major has the highest number of students?",
      "What is the average age of students in each major?",
      "Who are the advisors for students in the major with the highest number of students?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in",
      "Activity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "21": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "StudentCount",
      "x_data": [
        "600"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of students grouped by their major",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of students across different majors?",
      "Which major has the highest number of students?",
      "How does the number of students in each major compare?",
      "Are there any majors with significantly lower or higher student counts?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in",
      "Activity",
      "Faculty"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "32": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT airport.Airport_Name AS airport, SUM(aircraft.Max_Gross_Weight) AS total_weight FROM airport_aircraft JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID GROUP BY airport.Airport_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT airport.Airport_Name AS airport, SUM(aircraft.Max_Gross_Weight) AS total_weight FROM airport_aircraft JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID GROUP BY airport.Airport_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "bar",
      "x_name": "airport",
      "y_name": "total_weight",
      "x_data": [
        "London Heathrow",
        "London Gatwick",
        "London Stansted"
      ],
      "y_data": [
        1451,
        635,
        1451
      ],
      "classify": [],
      "describe": "Total Max Gross Weight of Aircrafts by Airport",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total maximum gross weight of aircrafts at each airport?",
      "Which airport has the highest total maximum gross weight of aircrafts?",
      "How does the total maximum gross weight of aircrafts compare between the top two airports?",
      "What is the difference in total maximum gross weight between the airport with the highest and the lowest values?"
    ],
    "irrelevant_tables": [
      "pilot",
      "match"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "33": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Airport_Name, SUM(Aircraft_Movements) AS Total_Aircraft_Movements FROM airport GROUP BY Airport_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Airport_Name, SUM(Aircraft_Movements) AS Total_Aircraft_Movements FROM airport GROUP BY Airport_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Airport_Name",
      "y_name": "Total_Aircraft_Movements",
      "x_data": [
        "London Heathrow",
        "London Gatwick",
        "London Stansted"
      ],
      "y_data": [
        478693,
        263653,
        193282
      ],
      "classify": [],
      "describe": "Aggregate the total aircraft movements for each airport",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total number of aircraft movements for each airport?",
      "How does the total number of aircraft movements compare between the airports?",
      "Which airport has the highest number of aircraft movements?",
      "What is the difference in aircraft movements between the airport with the highest and the lowest movements?"
    ],
    "irrelevant_tables": [
      "match",
      "airport_aircraft",
      "pilot",
      "aircraft"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "34": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT airport.Airport_Name, SUM(aircraft.Max_Gross_Weight) AS Total_Max_Gross_Weight FROM airport_aircraft JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID GROUP BY airport.Airport_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT airport.Airport_Name, SUM(aircraft.Max_Gross_Weight) AS Total_Max_Gross_Weight FROM airport_aircraft JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID GROUP BY airport.Airport_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Airport_Name",
      "y_name": "Total_Max_Gross_Weight",
      "x_data": [
        "London Heathrow",
        "London Gatwick",
        "London Stansted"
      ],
      "y_data": [
        "1,451 kg",
        "635 kg",
        "22,680 kg"
      ],
      "classify": [],
      "describe": "Total maximum gross weight of aircrafts for each airport",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total maximum gross weight of the aircrafts at each airport?",
      "Which airport has the highest total maximum gross weight of aircrafts?",
      "How does the total maximum gross weight of aircrafts compare between London Heathrow and London Gatwick?",
      "What is the proportion of total maximum gross weight of aircrafts for each airport?"
    ],
    "irrelevant_tables": [
      "match",
      "pilot"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "35": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Airport_Name, Total_Passengers FROM airport",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Airport_Name, Total_Passengers FROM airport"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Airport_Name",
      "y_name": "Total_Passengers",
      "x_data": [
        "London Heathrow",
        "London Gatwick",
        "London Stansted"
      ],
      "y_data": [
        67054745.0,
        34205887.0,
        22360364.0
      ],
      "classify": [],
      "describe": "Total number of passengers for each airport",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of passengers for each airport?",
      "How does the number of international passengers compare to the total passengers for each airport?",
      "What is the distribution of aircraft movements across the airports?",
      "How does freight tonnage correlate with total passengers for each airport?"
    ],
    "irrelevant_tables": [
      "airport_aircraft",
      "pilot",
      "aircraft",
      "match"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "36": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT airport.Airport_Name, aircraft.Aircraft, COUNT(airport_aircraft.Aircraft_ID) AS Aircraft_Count FROM airport_aircraft JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID GROUP BY airport.Airport_Name, aircraft.Aircraft",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT airport.Airport_Name, aircraft.Aircraft, COUNT(airport_aircraft.Aircraft_ID) AS Aircraft_Count FROM airport_aircraft JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID GROUP BY airport.Airport_Name, aircraft.Aircraft"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Airport_Name",
      "y_name": "Aircraft_Count",
      "x_data": [
        "London Heathrow",
        "London Gatwick"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [
        "Aircraft"
      ],
      "describe": "Count of different aircraft models at each airport",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the count of different aircraft models at each airport.",
      "Which airport has the highest number of a specific aircraft model?",
      "How does the presence of different aircraft models vary across airports?",
      "Identify any noteworthy trends in aircraft distribution among the airports."
    ],
    "irrelevant_tables": [
      "pilot",
      "match"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "37": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT AllergyType, COUNT(*) AS Count FROM Has_Allergy h JOIN Allergy_Type a ON h.Allergy = a.Allergy GROUP BY AllergyType",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT AllergyType, COUNT(*) AS Count FROM Has_Allergy h JOIN Allergy_Type a ON h.Allergy = a.Allergy GROUP BY AllergyType"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "AllergyType",
      "y_name": "Count",
      "x_data": [
        "food"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of students with different types of allergies",
      "sort": null
    },
    "nl_queries": [
      "What is the count of students with different types of allergies?",
      "How many students have food-related allergies compared to other types of allergies?",
      "What is the distribution of students with food-related allergies by gender?",
      "Which cities have the most students with food-related allergies?"
    ],
    "irrelevant_tables": [
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "74": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT apt_type_code, COUNT(*) AS count FROM Apartments GROUP BY apt_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT apt_type_code, COUNT(*) AS count FROM Apartments GROUP BY apt_type_code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "apt_type_code",
      "y_name": "count",
      "x_data": [
        "Flat",
        "Studio"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Distribution of apartment types",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of apartment types in the database?",
      "How many apartments of each type are booked provisionally?",
      "What are the average booking durations for each apartment type?",
      "Which building has the highest number of provisionally booked apartments?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "Apartment_Buildings",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "81": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_short_name AS building, COUNT(apt_id) AS total_apartments FROM Apartments INNER JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id GROUP BY building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_short_name AS building, COUNT(apt_id) AS total_apartments FROM Apartments INNER JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id GROUP BY building_short_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "total_apartments",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        4,
        5,
        6
      ],
      "classify": [],
      "describe": "Number of apartments in each building",
      "sort": "asc"
    },
    "nl_queries": [
      "How many apartments are there in each building?",
      "Which building has the highest number of apartments?",
      "What is the average number of apartments per building?",
      "Compare the number of apartments in 'The Eugene' and 'Mercedes House'."
    ],
    "irrelevant_tables": [
      "View_Unit_Status",
      "Guests",
      "Apartment_Bookings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "86": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_full_name, COUNT(apt_booking_id) AS total_bookings FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id WHERE booking_status_code = 'Provisional' GROUP BY building_full_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_full_name, COUNT(apt_booking_id) AS total_bookings FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id WHERE booking_status_code = 'Provisional' GROUP BY building_full_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_full_name",
      "y_name": "total_bookings",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of provisional apartment bookings per building",
      "sort": "desc"
    },
    "nl_queries": [
      "How many provisional apartment bookings are there in each building?",
      "Which buildings have the highest number of provisional bookings?",
      "What is the distribution of provisional bookings across different buildings?",
      "Identify the buildings with the least provisional bookings."
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "93": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT apt_type_code, COUNT(*) AS apt_count FROM Apartments GROUP BY apt_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT apt_type_code, COUNT(*) AS apt_count FROM Apartments GROUP BY apt_type_code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "apt_type_code",
      "y_name": "apt_count",
      "x_data": [
        "Flat",
        "Studio"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Distribution of apartment types",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of apartment types?",
      "Which buildings have the most apartments of each type?",
      "How many apartments of each type are booked?",
      "What is the booking status distribution for each apartment type?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "Apartment_Buildings",
      "View_Unit_Status",
      "Apartment_Bookings",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "94": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_short_name AS building, COUNT(apt_id) AS total_apartments FROM Apartments INNER JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id GROUP BY building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_short_name AS building, COUNT(apt_id) AS total_apartments FROM Apartments INNER JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id GROUP BY building_short_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "total_apartments",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        3,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of apartments in each building",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of apartments in each building?",
      "Which building has the highest number of apartments?",
      "What is the distribution of apartment types (e.g., Flat, Studio) in each building?",
      "How many bathrooms are there in total for each apartment type in each building?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Apartment_Bookings",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "96": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT ab.building_short_name AS building, a.apt_type_code AS apartment_type, COUNT(ab.guest_id) AS total_bookings FROM Apartment_Bookings ab JOIN Apartments a ON ab.apt_id = a.apt_id GROUP BY ab.building_short_name, a.apt_type_code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT ab.building_short_name AS building, a.apt_type_code AS apartment_type, COUNT(ab.guest_id) AS total_bookings FROM Apartment_Bookings ab JOIN Apartments a ON ab.apt_id = a.apt_id GROUP BY ab.building_short_name, a.apt_type_code"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "building",
      "y_name": "total_bookings",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        8,
        12,
        15
      ],
      "classify": [
        "apartment_type"
      ],
      "describe": "Visualizing the total bookings per building, categorized by apartment type",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total bookings per building, categorized by apartment type?",
      "How do the total bookings compare between different buildings for each apartment type?",
      "Which building has the highest number of bookings for Studio apartments?",
      "Which apartment type is booked the most across all buildings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "Apartment_Buildings",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "98": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT A.building_id, COUNT(B.apt_booking_id) AS total_bookings FROM Apartments A JOIN Apartment_Bookings B ON A.apt_id = B.apt_id GROUP BY A.building_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT A.building_id, COUNT(B.apt_booking_id) AS total_bookings FROM Apartments A JOIN Apartment_Bookings B ON A.apt_id = B.apt_id GROUP BY A.building_id"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_id",
      "y_name": "total_bookings",
      "x_data": [
        "133",
        "153",
        "191"
      ],
      "y_data": [
        "1",
        "2",
        "1"
      ],
      "classify": [],
      "describe": "Total bookings per building",
      "sort": "asc"
    },
    "nl_queries": [
      "How many bookings does each building have?",
      "What is the distribution of bookings across different apartment types in each building?",
      "Which buildings have the highest number of bookings for studios?",
      "What is the trend of booking statuses across different buildings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "103": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT AB.building_short_name, COUNT(A.apt_id) AS apartment_count FROM Apartment_Buildings AB JOIN Apartments A ON AB.building_id = A.building_id GROUP BY AB.building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT AB.building_short_name, COUNT(A.apt_id) AS apartment_count FROM Apartment_Buildings AB JOIN Apartments A ON AB.building_id = A.building_id GROUP BY AB.building_short_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_short_name",
      "y_name": "apartment_count",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        3,
        2,
        1
      ],
      "classify": [],
      "describe": "Count of apartments available in each building",
      "sort": "asc"
    },
    "nl_queries": [
      "How many apartments are available in each building?",
      "What is the distribution of apartment types (Studio, Flat) across all buildings?",
      "Which buildings have the highest number of bookings and what is the distribution of booking status?",
      "What is the average number of bedrooms in apartments across buildings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "120": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT fl.fault_log_entry_id, COUNT(fl.fault_log_entry_id) AS fault_count, fl.fault_description FROM Fault_Log fl INNER JOIN Engineer_Visits ev ON fl.fault_log_entry_id = ev.fault_log_entry_id WHERE ev.fault_status = 'Waiting' GROUP BY fl.fault_log_entry_id, fl.fault_description ORDER BY fault_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT fl.fault_log_entry_id, COUNT(fl.fault_log_entry_id) AS fault_count, fl.fault_description FROM Fault_Log fl INNER JOIN Engineer_Visits ev ON fl.fault_log_entry_id = ev.fault_log_entry_id WHERE ev.fault_status = 'Waiting' GROUP BY fl.fault_log_entry_id, fl.fault_description ORDER BY fault_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "fault_description",
      "y_name": "fault_count",
      "x_data": [
        "system error",
        "system error",
        "system error"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Fault logs with waiting status, counted and grouped by fault description",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the most common fault descriptions for faults with a 'Waiting' status?",
      "Which assets are associated with the most common fault descriptions for faults with a 'Waiting' status?",
      "What is the average time taken to resolve the faults with the most common descriptions and a 'Waiting' status?",
      "Which engineers have the highest number of visits for faults with the most common descriptions and a 'Waiting' status?"
    ],
    "irrelevant_tables": [
      "Skills",
      "Maintenance_Contracts",
      "Parts",
      "Engineer_Skills",
      "Maintenance_Engineers",
      "Staff",
      "Skills_Required_To_Fix",
      "Asset_Parts",
      "Assets",
      "Part_Faults",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "131": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT eng.company_id, COUNT(DISTINCT eng.engineer_id) AS engineer_count FROM Maintenance_Engineers eng INNER JOIN Engineer_Skills es ON eng.engineer_id = es.engineer_id GROUP BY eng.company_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT eng.company_id, COUNT(DISTINCT eng.engineer_id) AS engineer_count FROM Maintenance_Engineers eng INNER JOIN Engineer_Skills es ON eng.engineer_id = es.engineer_id GROUP BY eng.company_id"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "company_id",
      "y_name": "engineer_count",
      "x_data": [
        2,
        6,
        14
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of engineers per company",
      "sort": null
    },
    "nl_queries": [
      "How many engineers does each company have?",
      "Which companies have the most skilled engineers?",
      "How many engineers with electrical skills does each company have?",
      "Which companies have the highest count of engineers with both mechanical and electrical skills?"
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Engineer_Visits",
      "Maintenance_Contracts",
      "Parts",
      "Staff",
      "Skills_Required_To_Fix",
      "Asset_Parts",
      "Fault_Log",
      "Assets",
      "Part_Faults",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "146": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT company_name, COUNT(engineer_id) AS engineer_count FROM Maintenance_Engineers JOIN Third_Party_Companies ON Maintenance_Engineers.company_id = Third_Party_Companies.company_id GROUP BY company_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT company_name, COUNT(engineer_id) AS engineer_count FROM Maintenance_Engineers JOIN Third_Party_Companies ON Maintenance_Engineers.company_id = Third_Party_Companies.company_id GROUP BY company_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "company_name",
      "y_name": "engineer_count",
      "x_data": [
        "Langworth-Funk",
        "McDermott Group",
        "Schuppe-Carroll"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of engineers per maintenance company",
      "sort": null
    },
    "nl_queries": [
      "How many engineers are there per maintenance company?",
      "Which company has the highest number of engineers?",
      "What is the total number of engineers across all companies?",
      "Are there any companies with the same number of engineers?"
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Engineer_Visits",
      "Maintenance_Contracts",
      "Parts",
      "Engineer_Skills",
      "Staff",
      "Asset_Parts",
      "Fault_Log",
      "Assets"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "150": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT a.asset_make, COUNT(fl.fault_log_entry_id) AS fault_count FROM Assets a JOIN Fault_Log fl ON a.asset_id = fl.asset_id GROUP BY a.asset_make",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT a.asset_make, COUNT(fl.fault_log_entry_id) AS fault_count FROM Assets a JOIN Fault_Log fl ON a.asset_id = fl.asset_id GROUP BY a.asset_make"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "asset_make",
      "y_name": "fault_count",
      "x_data": [
        "PT",
        "IN",
        "IT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of faults per asset make",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of faults for each asset make?",
      "Which maintenance contractor has handled the most faults for each asset make?",
      "What is the average duration of engineer visits for the most fault-prone asset make?",
      "Which engineers have the skills required to fix the faults in the most fault-prone asset make?"
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Engineer_Visits",
      "Maintenance_Contracts",
      "Parts",
      "Engineer_Skills",
      "Maintenance_Engineers",
      "Staff",
      "Asset_Parts",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "158": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT year, AVG(salary) AS avg_salary FROM salary GROUP BY year ORDER BY year ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT year, AVG(salary) AS avg_salary FROM salary GROUP BY year ORDER BY year ASC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "year",
      "y_name": "avg_salary",
      "x_data": [
        "1985",
        "1986",
        "1987",
        "1988",
        "1989"
      ],
      "y_data": [
        500000,
        550000,
        600000,
        650000,
        700000
      ],
      "classify": [],
      "describe": "Average salary of players over the years",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average salary of players over the years?",
      "How has the average salary of players changed from 1985 to 1989?",
      "What is the trend in player salaries over the given years?",
      "Can you compare the average player salaries for each year from 1985 to 1989?"
    ],
    "irrelevant_tables": [
      "hall_of_fame",
      "player_award",
      "appearances",
      "college",
      "team_half",
      "pitching_postseason",
      "pitching",
      "fielding_postseason",
      "home_game",
      "player_award_vote",
      "manager_award",
      "batting_postseason",
      "player_college",
      "manager_award_vote",
      "team_franchise",
      "player",
      "all_star",
      "manager_half",
      "park",
      "fielding_outfield",
      "manager",
      "batting",
      "fielding"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "163": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT player_id, SUM(w) AS total_wins FROM pitching_postseason GROUP BY player_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT player_id, SUM(w) AS total_wins FROM pitching_postseason GROUP BY player_id"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "player_id",
      "y_name": "total_wins",
      "x_data": [
        "becanbu01",
        "keefeti01",
        "radboch01"
      ],
      "y_data": [
        0,
        0,
        3
      ],
      "classify": [],
      "describe": "Total postseason wins by player",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the total number of postseason wins for each player.",
      "Identify the player with the most postseason wins.",
      "Compare the total postseason wins of players who have played in the World Series.",
      "Determine the average number of postseason wins for players in the pitching_postseason table."
    ],
    "irrelevant_tables": [
      "hall_of_fame",
      "player_award",
      "appearances",
      "college",
      "team_half",
      "pitching",
      "fielding_postseason",
      "home_game",
      "player_award_vote",
      "manager_award",
      "batting_postseason",
      "player_college",
      "manager_award_vote",
      "team_franchise",
      "player",
      "all_star",
      "manager_half",
      "park",
      "fielding_outfield",
      "salary",
      "manager",
      "batting",
      "fielding"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "173": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.name AS battle_name, SUM(d.killed) AS total_killed FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.name ORDER BY total_killed DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.name AS battle_name, SUM(d.killed) AS total_killed FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.name ORDER BY total_killed DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "battle_death",
    "vis_obj": {
      "chart": "bar",
      "x_name": "battle_name",
      "y_name": "total_killed",
      "x_data": [
        "Battle of Rusion",
        "Battle of Adrianople",
        "Battle of Serres"
      ],
      "y_data": [
        25,
        8,
        3
      ],
      "classify": [],
      "describe": "Total killed per battle",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of deaths caused in each battle?",
      "Which battle resulted in the highest number of deaths?",
      "How do the number of deaths compare across battles?",
      "What insights can be drawn from the distribution of deaths among the battles?"
    ],
    "irrelevant_tables": [
      "ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "175": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.location AS location, s.name AS ship_name, SUM(d.killed) AS total_killed FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.location, s.name ORDER BY total_killed DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.location AS location, s.name AS ship_name, SUM(d.killed) AS total_killed FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.location, s.name ORDER BY total_killed DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "battle_death",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "location",
      "y_name": "total_killed",
      "x_data": [
        "English Channel",
        "English Channel",
        "English Channel"
      ],
      "y_data": [
        25,
        8,
        3
      ],
      "classify": [
        "ship_name"
      ],
      "describe": "Analysis of total deaths caused by each ship at various locations.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of deaths caused by each ship at various locations?",
      "Among the locations, which ship caused the highest number of deaths?",
      "How do the deaths caused by ships compare across different locations?",
      "What insights can we draw about the impact of different ships on the number of deaths at specific locations?"
    ],
    "irrelevant_tables": [
      "battle"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "186": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT teacher_id, COUNT(detention_id) AS num_detentions FROM Detention GROUP BY teacher_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT teacher_id, COUNT(detention_id) AS num_detentions FROM Detention GROUP BY teacher_id"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "teacher_id",
      "y_name": "num_detentions",
      "x_data": [
        "7",
        "14",
        "11"
      ],
      "y_data": [
        "1",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Number of detentions assigned by each teacher",
      "sort": null
    },
    "nl_queries": [
      "How many detentions has each teacher assigned?",
      "Which teacher assigned the most detentions?",
      "What is the total number of detentions assigned by all teachers?",
      "What is the average number of detentions assigned by each teacher?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Student_Addresses",
      "Ref_Detention_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "189": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.first_name || ' ' || s.last_name AS student_name, rdt.detention_type_description, COUNT(sd.detention_id) AS detention_count FROM Students s JOIN Students_in_Detention sd ON s.student_id = sd.student_id JOIN Detention d ON sd.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY s.first_name, s.last_name, rdt.detention_type_description ORDER BY student_name, detention_count DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.first_name || ' ' || s.last_name AS student_name, rdt.detention_type_description, COUNT(sd.detention_id) AS detention_count FROM Students s JOIN Students_in_Detention sd ON s.student_id = sd.student_id JOIN Detention d ON sd.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY s.first_name, s.last_name, rdt.detention_type_description ORDER BY student_name, detention_count DESC"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "student_name",
      "y_name": "detention_count",
      "x_data": [
        "Emma Rohan",
        "Louvenia Hansen",
        "Rhea Bergnaum"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [
        "detention_type_description"
      ],
      "describe": "Count of detentions by type for each student",
      "sort": "desc"
    },
    "nl_queries": [
      "Which students have the highest number of detentions?",
      "What types of detentions are most common among students with multiple detentions?",
      "How does the frequency of different detention types vary across students?",
      "Can we identify any patterns in the types of detentions assigned by different teachers?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "194": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT t.first_name || ' ' || t.last_name AS teacher_name, COUNT(d.detention_id) AS detention_count FROM Detention d JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY t.teacher_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT t.first_name || ' ' || t.last_name AS teacher_name, COUNT(d.detention_id) AS detention_count FROM Detention d JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY t.teacher_id"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "teacher_name",
      "y_name": "detention_count",
      "x_data": [
        "Lyla Medhurst",
        "Sid Brakus",
        "Trystan Schuster"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of detentions supervised by each teacher",
      "sort": "desc"
    },
    "nl_queries": [
      "How many detentions has each teacher supervised?",
      "What is the distribution of detention types supervised by each teacher?",
      "Which teachers supervised the most break-time detentions?",
      "How many students were involved in detentions supervised by each teacher?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "195": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT ti.teacher_id, CONCAT(t.first_name, ' ', t.last_name) AS teacher_name, d.detention_type_code, COUNT(*) AS detention_count FROM Detention d JOIN Teachers t ON d.teacher_id = t.teacher_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY ti.teacher_id, t.first_name, t.last_name, d.detention_type_code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT ti.teacher_id, CONCAT(t.first_name, ' ', t.last_name) AS teacher_name, d.detention_type_code, COUNT(*) AS detention_count FROM Detention d JOIN Teachers t ON d.teacher_id = t.teacher_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY ti.teacher_id, t.first_name, t.last_name, d.detention_type_code"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "teacher_name",
      "y_name": "detention_count",
      "x_data": [
        "Lyla Medhurst",
        "Sid Brakus",
        "Trystan Schuster"
      ],
      "y_data": [
        10,
        15,
        8
      ],
      "classify": [
        "detention_type_code"
      ],
      "describe": "Number of detentions by teacher and detention type",
      "sort": "desc"
    },
    "nl_queries": [
      "How many detentions were assigned by each teacher?",
      "What types of detentions were most commonly assigned by each teacher?",
      "Which teacher assigned the most after-school detentions?",
      "Compare the distribution of detention types among teachers."
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "196": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.first_name || ' ' || s.last_name AS student_name, COUNT(d.detention_id) AS detention_count FROM Students s JOIN Students_in_Detention sd ON s.student_id = sd.student_id JOIN Detention d ON sd.detention_id = d.detention_id GROUP BY s.first_name || ' ' || s.last_name ORDER BY detention_count DESC;",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.first_name || ' ' || s.last_name AS student_name, COUNT(d.detention_id) AS detention_count FROM Students s JOIN Students_in_Detention sd ON s.student_id = sd.student_id JOIN Detention d ON sd.detention_id = d.detention_id GROUP BY s.first_name || ' ' || s.last_name ORDER BY detention_count DESC;"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "student_name",
      "y_name": "detention_count",
      "x_data": [
        "Rhea Bergnaum",
        "Louvenia Hansen",
        "Emma Rohan"
      ],
      "y_data": [
        2,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of detentions per student",
      "sort": "desc"
    },
    "nl_queries": [
      "Which students have the highest number of detentions?",
      "What are the most common reasons for detentions among the students with the highest number of detentions?",
      "Are there any specific teachers who are more likely to assign detentions to these students?",
      "How do the detention counts vary over time for the students with the highest number of detentions?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "201": {
    "vis_query": {
      "vis_part": "Visualize BAR CHART",
      "data_part": {
        "sql_part": "SELECT s.first_name || ' ' || s.last_name AS student_name, COUNT(d.detention_id) AS detention_count FROM Students s JOIN Students_in_Detention sid ON s.student_id = sid.student_id JOIN Detention d ON sid.detention_id = d.detention_id GROUP BY s.student_id ORDER BY detention_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR CHART SELECT s.first_name || ' ' || s.last_name AS student_name, COUNT(d.detention_id) AS detention_count FROM Students s JOIN Students_in_Detention sid ON s.student_id = sid.student_id JOIN Detention d ON sid.detention_id = d.detention_id GROUP BY s.student_id ORDER BY detention_count DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "student_name",
      "y_name": "detention_count",
      "x_data": [
        "Rhea Bergnaum",
        "Louvenia Hansen",
        "Emma Rohan"
      ],
      "y_data": [
        3,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of detentions each student received",
      "sort": "desc"
    },
    "nl_queries": [
      "Who are the students with the highest number of detentions?",
      "What are the dates and types of detentions for the student with the highest number of detentions?",
      "Which teachers gave the most detentions to the student with the highest number of detentions?",
      "What are the common reasons for detentions among students with the highest number of detentions?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Student_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "202": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ref_detention_type.detention_type_description AS detention_type, COUNT(detention.detention_id) AS count FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code GROUP BY ref_detention_type.detention_type_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ref_detention_type.detention_type_description AS detention_type, COUNT(detention.detention_id) AS count FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code GROUP BY ref_detention_type.detention_type_description"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "detention_type",
      "y_name": "count",
      "x_data": [
        "After School",
        "During Break time"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "The distribution of different types of detentions",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the different types of detentions and their frequencies?",
      "Which teachers have assigned the most detentions and what types of detentions do they assign?",
      "Is there a correlation between the number of detentions assigned and the incidents reported?",
      "What is the trend of detentions over time for the different types of incidents?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "210": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rdt.detention_type_description AS Detention_Type, COUNT(d.detention_id) AS Number_of_Detentions FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description ORDER BY Number_of_Detentions DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rdt.detention_type_description AS Detention_Type, COUNT(d.detention_id) AS Number_of_Detentions FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description ORDER BY Number_of_Detentions DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Detention_Type",
      "y_name": "Number_of_Detentions",
      "x_data": [
        "After School",
        "During Break time",
        "Lunch-time"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Distribution of different types of detentions.",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the different types of detentions and how many of each type have been recorded?",
      "Which type of detention is the most frequent?",
      "Who are the teachers who have recorded the most detentions?",
      "What is the distribution of detentions across different students and how many detentions has each student received?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "219": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rdt.detention_type_description, COUNT(sid.student_id) AS count_of_students FROM Students_in_Detention sid JOIN Detention d ON sid.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description ORDER BY count_of_students DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rdt.detention_type_description, COUNT(sid.student_id) AS count_of_students FROM Students_in_Detention sid JOIN Detention d ON sid.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description ORDER BY count_of_students DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "detention_type_description",
      "y_name": "count_of_students",
      "x_data": [
        "After School",
        "During Break time",
        "Lunch-time"
      ],
      "y_data": [
        10,
        5,
        2
      ],
      "classify": [],
      "describe": "Number of students in each type of detention",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students received each type of detention?",
      "Which type of detention has the highest number of students?",
      "What are the counts of students in each type of detention in descending order?",
      "Can you show a bar chart of the number of students in each type of detention?"
    ],
    "irrelevant_tables": [
      "Students",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Student_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "224": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rdt.detention_type_description AS detention_type, COUNT(sd.student_id) AS student_count FROM Students_in_Detention sd JOIN Detention d ON sd.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rdt.detention_type_description AS detention_type, COUNT(sd.student_id) AS student_count FROM Students_in_Detention sd JOIN Detention d ON sd.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "detention_type",
      "y_name": "student_count",
      "x_data": [
        "After School",
        "During Break time",
        "Lunch-time"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of students per detention type",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students were assigned to each type of detention?",
      "Which type of detention had the highest number of students?",
      "Can you show the number of students in each detention type over time?",
      "What is the trend of students receiving each type of detention over the past year?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "225": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rdt.detention_type_description AS Detention_Type, COUNT(d.detention_id) AS Number_of_Detentions FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rdt.detention_type_description AS Detention_Type, COUNT(d.detention_id) AS Number_of_Detentions FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Detention_Type",
      "y_name": "Number_of_Detentions",
      "x_data": [
        "After School",
        "During Break time"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of detentions by type",
      "sort": "null"
    },
    "nl_queries": [
      "How many detentions are there for each type?",
      "Which type of detention is most common?",
      "What is the distribution of different types of detentions?",
      "Can we see the number of after-school detentions compared to other detentions?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "231": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT dt.detention_type_description AS detention_type, COUNT(sid.student_id) AS student_count, t.gender AS teacher_gender FROM Detention d JOIN Ref_Detention_Type dt ON d.detention_type_code = dt.detention_type_code JOIN Students_in_Detention sid ON d.detention_id = sid.detention_id JOIN Students s ON sid.student_id = s.student_id JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY dt.detention_type_description, t.gender ORDER BY dt.detention_type_description, t.gender",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT dt.detention_type_description AS detention_type, COUNT(sid.student_id) AS student_count, t.gender AS teacher_gender FROM Detention d JOIN Ref_Detention_Type dt ON d.detention_type_code = dt.detention_type_code JOIN Students_in_Detention sid ON d.detention_id = sid.detention_id JOIN Students s ON sid.student_id = s.student_id JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY dt.detention_type_description, t.gender ORDER BY dt.detention_type_description, t.gender"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "detention_type",
      "y_name": "student_count",
      "x_data": [
        "After School",
        "After School",
        "During Break time",
        "During Break time",
        "Lunch-time",
        "Lunch-time"
      ],
      "y_data": [
        5,
        3,
        8,
        6,
        2,
        4
      ],
      "classify": [
        "teacher_gender"
      ],
      "describe": "Distribution of students in detention by detention type and teacher gender",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of students in detention by detention type and teacher gender?",
      "Among the different detention types, which one has the highest number of students assigned by male teachers?",
      "How does the distribution of detentions given by female teachers compare across different detention types?",
      "What is the overall ratio of detentions given by male teachers versus female teachers for each detention type?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Addresses",
      "Student_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "233": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT det.teacher_id, COUNT(sid.student_id) AS num_students_in_detention FROM Detention det JOIN Students_in_Detention sid ON det.detention_id = sid.detention_id GROUP BY det.teacher_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT det.teacher_id, COUNT(sid.student_id) AS num_students_in_detention FROM Detention det JOIN Students_in_Detention sid ON det.detention_id = sid.detention_id GROUP BY det.teacher_id"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "teacher_id",
      "y_name": "num_students_in_detention",
      "x_data": [
        7,
        14,
        11
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students in detention by teacher",
      "sort": null
    },
    "nl_queries": [
      "How many students have been in detention per teacher?",
      "Which teacher has the highest number of students in detention?",
      "What is the distribution of detention types assigned by the teacher with the most students in detention?",
      "What are the incident types associated with detentions supervised by the teacher with the most students in detention?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "238": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT dt.detention_type_description AS detention_type, COUNT(sid.student_id) AS number_of_students, t.gender AS teacher_gender FROM Students_in_Detention sid JOIN Detention d ON sid.detention_id = d.detention_id JOIN Ref_Detention_Type dt ON d.detention_type_code = dt.detention_type_code JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY dt.detention_type_description, t.gender",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT dt.detention_type_description AS detention_type, COUNT(sid.student_id) AS number_of_students, t.gender AS teacher_gender FROM Students_in_Detention sid JOIN Detention d ON sid.detention_id = d.detention_id JOIN Ref_Detention_Type dt ON d.detention_type_code = dt.detention_type_code JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY dt.detention_type_description, t.gender"
    },
    "reasoning_level": "L2",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "detention_type",
      "y_name": "number_of_students",
      "x_data": [
        "After School",
        "During Break time",
        "Lunch-time"
      ],
      "y_data": [
        "5",
        "3",
        "2"
      ],
      "classify": [
        "teacher_gender"
      ],
      "describe": "Number of students in detention categorized by detention type and teacher gender",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students were placed in detention for each type of detention by teacher gender?",
      "What is the distribution of students in different types of detentions supervised by male and female teachers?",
      "Which detention type has the highest number of students supervised by male teachers?",
      "Compare the number of students in each detention type supervised by male versus female teachers."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "246": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.detention_type_code AS detention_type, COUNT(s.student_id) AS student_count, t.gender FROM Detention d JOIN Students_in_Detention sid ON d.detention_id = sid.detention_id JOIN Students s ON s.student_id = sid.student_id JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY d.detention_type_code, t.gender",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.detention_type_code AS detention_type, COUNT(s.student_id) AS student_count, t.gender FROM Detention d JOIN Students_in_Detention sid ON d.detention_id = sid.detention_id JOIN Students s ON s.student_id = sid.student_id JOIN Teachers t ON d.teacher_id = t.teacher_id GROUP BY d.detention_type_code, t.gender"
    },
    "reasoning_level": "L2",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "detention_type",
      "y_name": "student_count",
      "x_data": [
        "AFTER",
        "BREAK",
        "LUNCH"
      ],
      "y_data": [
        10,
        5,
        7
      ],
      "classify": [
        "gender"
      ],
      "describe": "The number of students in different types of detention, classified by the gender of the teacher",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of students across different types of detention?",
      "How does the gender of the teacher impact the number of students in each type of detention?",
      "Which type of detention has the highest number of students, and what is the gender distribution of teachers for that type?",
      "Can we identify any patterns in the number of students in detentions based on the teacher's gender?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "247": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date(date_incident_start) AS incident_date, COUNT(*) AS incident_count FROM Behavior_Incident GROUP BY date(date_incident_start) ORDER BY incident_date",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date(date_incident_start) AS incident_date, COUNT(*) AS incident_count FROM Behavior_Incident GROUP BY date(date_incident_start) ORDER BY incident_date"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "incident_date",
      "y_name": "incident_count",
      "x_data": [
        "2017-07-09",
        "2017-10-10",
        "2018-01-31"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of behavior incidents over time",
      "sort": "asc"
    },
    "nl_queries": [
      "How many behavior incidents occurred over time?",
      "What are the types of incidents that occurred over time?",
      "Which students were involved in the incidents over time?",
      "What are the recommendations based on the incidents over time?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Detention",
      "Ref_Address_Types",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "248": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rdt.detention_type_description AS detention_type, COUNT(sd.student_id) AS student_count FROM Students_in_Detention sd JOIN Detention d ON sd.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rdt.detention_type_description AS detention_type, COUNT(sd.student_id) AS student_count FROM Students_in_Detention sd JOIN Detention d ON sd.detention_id = d.detention_id JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "detention_type",
      "y_name": "student_count",
      "x_data": [
        "After School",
        "During Break time",
        "Lunch-time"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of students in each type of detention",
      "sort": null
    },
    "nl_queries": [
      "How many students are in each type of detention?",
      "Which type of detention has the highest number of students?",
      "What is the distribution of students across different detention types?",
      "How does the number of students in 'After School' detention compare to other types?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "252": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.first_name AS student_first_name, COUNT(d.detention_id) AS number_of_detentions FROM Students s JOIN Students_in_Detention sid ON s.student_id = sid.student_id JOIN Detention d ON sid.detention_id = d.detention_id GROUP BY s.first_name ORDER BY number_of_detentions DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.first_name AS student_first_name, COUNT(d.detention_id) AS number_of_detentions FROM Students s JOIN Students_in_Detention sid ON s.student_id = sid.student_id JOIN Detention d ON sid.detention_id = d.detention_id GROUP BY s.first_name ORDER BY number_of_detentions DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "student_first_name",
      "y_name": "number_of_detentions",
      "x_data": [
        "Rhea",
        "Louvenia",
        "Emma"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of detentions per student",
      "sort": "desc"
    },
    "nl_queries": [
      "How many detentions does each student have?",
      "Which teacher has given the most detentions?",
      "What is the most common type of detention?",
      "Which students have the highest number of incidents leading to detentions?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Student_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "264": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.first_name || ' ' || s.last_name AS student_name, COUNT(d.detention_id) AS num_detentions FROM Students s JOIN Students_in_Detention sid ON s.student_id = sid.student_id JOIN Detention d ON sid.detention_id = d.detention_id GROUP BY student_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.first_name || ' ' || s.last_name AS student_name, COUNT(d.detention_id) AS num_detentions FROM Students s JOIN Students_in_Detention sid ON s.student_id = sid.student_id JOIN Detention d ON sid.detention_id = d.detention_id GROUP BY student_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "student_name",
      "y_name": "num_detentions",
      "x_data": [
        "Rhea Bergnaum",
        "Emma Rohan",
        "Louvenia Hansen"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of detentions per student",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the total number of detentions for each student?",
      "Which students have the highest number of detentions?",
      "How do the number of detentions compare among different students?",
      "What is the average number of detentions per student?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Student_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "265": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.detention_type_code, COUNT(s.student_id) AS student_count FROM Students_in_Detention s JOIN Detention d ON s.detention_id = d.detention_id GROUP BY d.detention_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.detention_type_code, COUNT(s.student_id) AS student_count FROM Students_in_Detention s JOIN Detention d ON s.detention_id = d.detention_id GROUP BY d.detention_type_code"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "detention_type_code",
      "y_name": "student_count",
      "x_data": [
        "AFTER",
        "BREAK",
        "LUNCH"
      ],
      "y_data": [
        10,
        8,
        5
      ],
      "classify": [],
      "describe": "Number of students in each detention type",
      "sort": null
    },
    "nl_queries": [
      "How many students are in each type of detention?",
      "What is the distribution of students across different detention types?",
      "Which detention type has the highest number of students?",
      "Are there more students in after-school detentions compared to break-time detentions?"
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "267": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT student_id, COUNT(detention_id) AS detention_count FROM Students_in_Detention GROUP BY student_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT student_id, COUNT(detention_id) AS detention_count FROM Students_in_Detention GROUP BY student_id"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "student_id",
      "y_name": "detention_count",
      "x_data": [
        "3",
        "8",
        "11"
      ],
      "y_data": [
        "1",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "This chart shows the count of detentions for each student.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the number of detentions for each student?",
      "Which student has the highest number of detentions?",
      "What is the average number of detentions per student?",
      "How many students have more than one detention?"
    ],
    "irrelevant_tables": [
      "Students",
      "Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Ref_Detention_Type",
      "Addresses",
      "Student_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "273": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rdt.detention_type_description AS Detention_Type, COUNT(d.detention_id) AS Detention_Count FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rdt.detention_type_description AS Detention_Type, COUNT(d.detention_id) AS Detention_Count FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code GROUP BY rdt.detention_type_description"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Detention_Type",
      "y_name": "Detention_Count",
      "x_data": [
        "After School",
        "During Break time",
        "Lunch-time"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of detentions by type",
      "sort": "asc"
    },
    "nl_queries": [
      "How many detentions occurred for each type?",
      "Which type of detention was the most frequent?",
      "What is the distribution of detentions over time for each type?",
      "Which teachers issued the most detentions for each type?"
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Ref_Address_Types",
      "Behavior_Incident",
      "Assessment_Notes",
      "Ref_Incident_Type",
      "Teachers",
      "Addresses",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "285": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, COUNT(id) AS station_count FROM station GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, COUNT(id) AS station_count FROM station GROUP BY city"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "station_count",
      "x_data": [
        "San Jose"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of bike stations in each city",
      "sort": null
    },
    "nl_queries": [
      "How many bike stations are there in each city?",
      "What is the distribution of bike stations in different cities?",
      "Which city has the highest number of bike stations?",
      "Can we see the number of bike stations in San Jose compared to other cities?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "weather"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "286": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT DATE(start_date) AS date, COUNT(id) AS trip_count FROM trip GROUP BY DATE(start_date) ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT DATE(start_date) AS date, COUNT(id) AS trip_count FROM trip GROUP BY DATE(start_date) ORDER BY date"
    },
    "reasoning_level": "L4",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "trip_count",
      "x_data": [
        "2015-08-21",
        "2015-08-22",
        "2015-08-23"
      ],
      "y_data": [
        3,
        5,
        2
      ],
      "classify": [],
      "describe": "Analyzing the number of trips per day to observe trends over time.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the daily trip count trend over time?",
      "How does the daily trip count correlate with weather conditions such as temperature and precipitation?",
      "Which stations have the highest number of trips starting from them on days with the highest trip counts?",
      "What is the duration distribution of trips on days with high trip counts?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "291": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date, AVG(mean_temperature_f) AS avg_temp FROM weather GROUP BY date ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date, AVG(mean_temperature_f) AS avg_temp FROM weather GROUP BY date ORDER BY date"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "avg_temp",
      "x_data": [
        "8/29/2013",
        "8/30/2013",
        "8/31/2013"
      ],
      "y_data": [
        68.0,
        69.0,
        64.0
      ],
      "classify": [],
      "describe": "Average temperature over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average temperature over different dates?",
      "How does the average temperature change over time?",
      "Is there any noticeable trend in the average temperature over the dates?",
      "Can we see a comparison of average temperatures over these dates?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "292": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT DATE_FORMAT(start_date, '%Y-%m-%d') AS date, COUNT(id) AS trip_count FROM trip GROUP BY date ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT DATE_FORMAT(start_date, '%Y-%m-%d') AS date, COUNT(id) AS trip_count FROM trip GROUP BY date ORDER BY date"
    },
    "reasoning_level": "L4",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "trip_count",
      "x_data": [
        "2015-08-21",
        "2015-08-22",
        "2015-08-23"
      ],
      "y_data": [
        3,
        5,
        2
      ],
      "classify": [],
      "describe": "Trend of bike trips over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the trend of bike trips over time?",
      "How does the number of bike trips correlate with weather conditions on specific dates?",
      "What is the impact of different weather events on the number of bike trips?",
      "How do bike trip trends differ between weekdays and weekends under varying weather conditions?"
    ],
    "irrelevant_tables": [
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "293": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, AVG(max_temperature_f) AS avg_max_temp FROM weather GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, AVG(max_temperature_f) AS avg_max_temp FROM weather GROUP BY city"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "avg_max_temp",
      "x_data": [
        "San Jose"
      ],
      "y_data": [
        "74.0"
      ],
      "classify": [],
      "describe": "Average maximum temperature by city",
      "sort": null
    },
    "nl_queries": [
      "What is the average maximum temperature in each city?",
      "How does the average maximum temperature compare between the cities?",
      "What is the trend of average maximum temperature over time in each city?",
      "How do weather conditions like humidity and wind speed correlate with bike usage in each city?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "295": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date, mean_temperature_f FROM weather WHERE date BETWEEN '2015-06-01' AND '2015-06-30' ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date, mean_temperature_f FROM weather WHERE date BETWEEN '2015-06-01' AND '2015-06-30' ORDER BY date"
    },
    "reasoning_level": "L3",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "mean_temperature_f",
      "x_data": [
        "2015-06-01",
        "2015-06-02",
        "2015-06-03",
        "...",
        "2015-06-30"
      ],
      "y_data": [
        65.0,
        67.0,
        64.0,
        "...",
        70.0
      ],
      "classify": [],
      "describe": "Mean temperature over June 2015",
      "sort": "asc"
    },
    "nl_queries": [
      "What was the mean temperature trend in June 2015?",
      "How did bike usage correlate with temperature changes in June 2015?",
      "Did any specific weather events in June 2015 affect bike usage?",
      "How did the availability of bikes and docks change during specific weather events in June 2015?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "296": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, AVG(mean_temperature_f) AS avg_temp FROM weather WHERE date >= '2015-01-01' AND date <= '2015-12-31' GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, AVG(mean_temperature_f) AS avg_temp FROM weather WHERE date >= '2015-01-01' AND date <= '2015-12-31' GROUP BY city"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "avg_temp",
      "x_data": [
        "San Jose",
        "San Francisco"
      ],
      "y_data": [
        65.0,
        60.0
      ],
      "classify": [],
      "describe": "Average temperature by city for the year 2015",
      "sort": null
    },
    "nl_queries": [
      "What is the average temperature for each city in 2015?",
      "How does the average temperature in San Francisco compare to San Jose in 2015?",
      "Which city had the highest average temperature in 2015?",
      "What is the temperature range across cities in 2015?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "312": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT start_station_name, COUNT(*) AS trip_count FROM trip GROUP BY start_station_name ORDER BY trip_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT start_station_name, COUNT(*) AS trip_count FROM trip GROUP BY start_station_name ORDER BY trip_count DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "start_station_name",
      "y_name": "trip_count",
      "x_data": [
        "Howard at 2nd",
        "South Van Ness at Market",
        "Market at Sansome"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Trip count per start station",
      "sort": "desc"
    },
    "nl_queries": [
      "How many trips started from each station?",
      "Which start stations have the highest number of trips?",
      "What is the distribution of trip counts across all start stations?",
      "Are there any start stations with significantly higher trip counts compared to others?"
    ],
    "irrelevant_tables": [
      "status",
      "station",
      "weather"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "342": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, AVG(max_temperature_f) AS avg_max_temp FROM weather w JOIN station s ON w.zip_code = s.zip_code GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, AVG(max_temperature_f) AS avg_max_temp FROM weather w JOIN station s ON w.zip_code = s.zip_code GROUP BY city"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "avg_max_temp",
      "x_data": [
        "San Jose",
        "San Francisco"
      ],
      "y_data": [
        73.0,
        72.0
      ],
      "classify": [],
      "describe": "Average maximum temperatures by city",
      "sort": null
    },
    "nl_queries": [
      "What is the average maximum temperature in each city?",
      "How does the average maximum temperature compare between San Jose and San Francisco?",
      "What are the highest and lowest average maximum temperatures recorded in each city?",
      "How has the average maximum temperature in each city changed over time?"
    ],
    "irrelevant_tables": [
      "trip",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "354": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT p.Birth_Place, AVG(b.Total) AS Avg_Total, SUM(b.Total) AS Sum_Total FROM body_builder b JOIN people p ON b.People_ID = p.People_ID GROUP BY p.Birth_Place",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT p.Birth_Place, AVG(b.Total) AS Avg_Total, SUM(b.Total) AS Sum_Total FROM body_builder b JOIN people p ON b.People_ID = p.People_ID GROUP BY p.Birth_Place"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "body_builder",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Birth_Place",
      "y_name": "Sum_Total",
      "x_data": [
        "Port Huron, Michigan",
        "Anchorage, Alaska",
        "Glenview, Illinois"
      ],
      "y_data": [
        317.5,
        315.0,
        315.0
      ],
      "classify": [
        "Avg_Total"
      ],
      "describe": "Average and Sum of Total by Birth Place",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total and average lifting total for body builders from different birth places?",
      "How does the average lifting total compare between the body builders from different birth places?",
      "Which birth place has the highest sum of lifting totals among body builders?",
      "Is there a noticeable difference in the average and sum of lifting totals between body builders from different birth places?"
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "367": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Writer, COUNT(Book_ID) AS Number_of_Books FROM book GROUP BY Writer",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Writer, COUNT(Book_ID) AS Number_of_Books FROM book GROUP BY Writer"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "book_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Writer",
      "y_name": "Number_of_Books",
      "x_data": [
        "Timothy Truman",
        "Garth Ennis"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "This bar chart shows the number of books written by each writer.",
      "sort": "asc"
    },
    "nl_queries": [
      "How many books did each writer author?",
      "What are the titles of the books written by Garth Ennis?",
      "What is the publication date and price of each book written by Garth Ennis?",
      "Which publisher published the most expensive book written by Garth Ennis?"
    ],
    "irrelevant_tables": [
      "publication"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "368": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT wb.name AS browser_name, SUM(wb.market_share) AS total_market_share FROM accelerator_compatible_browser acb JOIN browser wb ON acb.browser_id = wb.id GROUP BY wb.name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT wb.name AS browser_name, SUM(wb.market_share) AS total_market_share FROM accelerator_compatible_browser acb JOIN browser wb ON acb.browser_id = wb.id GROUP BY wb.name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "browser_web",
    "vis_obj": {
      "chart": "bar",
      "x_name": "browser_name",
      "y_name": "total_market_share",
      "x_data": [
        "Internet Explorer",
        "Firefox",
        "Safari"
      ],
      "y_data": [
        28.96,
        18.11,
        8.54
      ],
      "classify": [],
      "describe": "Total market share of each browser compatible with accelerators",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total market share of each browser compatible with accelerators?",
      "How does the market share of browsers compatible with accelerators compare?",
      "Which browser has the highest market share among those compatible with accelerators?",
      "What is the cumulative market share of the top 2 browsers that are compatible with accelerators?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "370": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.name AS browser_name, b.market_share FROM browser b",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.name AS browser_name, b.market_share FROM browser b"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "browser_web",
    "vis_obj": {
      "chart": "bar",
      "x_name": "browser_name",
      "y_name": "market_share",
      "x_data": [
        "Internet Explorer",
        "Firefox",
        "Safari"
      ],
      "y_data": [
        28.96,
        18.11,
        8.54
      ],
      "classify": [],
      "describe": "Market share of different browsers",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the market share of different browsers?",
      "Which browser has the highest market share?",
      "How does the market share of Firefox compare to Safari?",
      "What is the combined market share of Internet Explorer and Firefox?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "376": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT people.Name, candidate.Support_rate FROM candidate JOIN people ON candidate.People_ID = people.People_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT people.Name, candidate.Support_rate FROM candidate JOIN people ON candidate.People_ID = people.People_ID"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Support_rate",
      "x_data": [
        "Hubert Henno",
        "Stéphane Antiga"
      ],
      "y_data": [
        0.25,
        0.17
      ],
      "classify": [],
      "describe": "Initial view of support rates for each candidate.",
      "sort": null
    },
    "nl_queries": [
      "What are the support rates for each candidate?",
      "How do the consider rates compare to the support rates for each candidate?",
      "What is the overall distribution of support, consider, and oppose rates for each candidate?",
      "How do the overall support rates differ between male and female candidates?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "387": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Name, AVG(c.Support_rate) AS Avg_Support_Rate FROM candidate c JOIN people p ON c.People_ID = p.People_ID GROUP BY p.Name ORDER BY Avg_Support_Rate DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Name, AVG(c.Support_rate) AS Avg_Support_Rate FROM candidate c JOIN people p ON c.People_ID = p.People_ID GROUP BY p.Name ORDER BY Avg_Support_Rate DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Avg_Support_Rate",
      "x_data": [
        "Hubert Henno",
        "Stéphane Antiga"
      ],
      "y_data": [
        0.25,
        0.17
      ],
      "classify": [],
      "describe": "Average support rates for each candidate",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average support rate for each candidate?",
      "How does the average support rate compare among all candidates?",
      "Which candidate has the highest average support rate?",
      "What are the support rates for the top two candidates by average support rate?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "399": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Poll_Source, AVG(c.Support_rate) AS Avg_Support_rate FROM candidate c GROUP BY c.Poll_Source",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Poll_Source, AVG(c.Support_rate) AS Avg_Support_rate FROM candidate c GROUP BY c.Poll_Source"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Poll_Source",
      "y_name": "Avg_Support_rate",
      "x_data": [
        "WNBC/Marist Poll",
        "FOX News/Opinion Dynamics Poll"
      ],
      "y_data": [
        0.21,
        0.18
      ],
      "classify": [],
      "describe": "Average support rate across different poll sources",
      "sort": null
    },
    "nl_queries": [
      "What is the average support rate for each poll source?",
      "How does the consideration rate compare across different poll sources?",
      "Which poll source shows the highest opposition rate?",
      "What is the trend of unsure rate across different poll sources?"
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "400": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Poll_Source, AVG(c.Support_rate) AS Avg_Support_Rate FROM candidate c GROUP BY c.Poll_Source",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Poll_Source, AVG(c.Support_rate) AS Avg_Support_Rate FROM candidate c GROUP BY c.Poll_Source"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Poll_Source",
      "y_name": "Avg_Support_Rate",
      "x_data": [
        "WNBC/Marist Poll",
        "FOX News/Opinion Dynamics Poll"
      ],
      "y_data": [
        0.21,
        0.18
      ],
      "classify": [],
      "describe": "Average support rate across different poll sources",
      "sort": null
    },
    "nl_queries": [
      "What is the average support rate for each poll source?",
      "How does the average support rate compare between WNBC/Marist Poll and FOX News/Opinion Dynamics Poll?",
      "What are the average consider rates for each poll source?",
      "Compare the average support and consider rates for each poll source."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "402": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Name, c.Support_rate FROM people p JOIN candidate c ON p.People_ID = c.People_ID WHERE c.Poll_Source = 'WNBC/Marist Poll'",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Name, c.Support_rate FROM people p JOIN candidate c ON p.People_ID = c.People_ID WHERE c.Poll_Source = 'WNBC/Marist Poll'"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Support_rate",
      "x_data": [
        "Hubert Henno",
        "Stéphane Antiga"
      ],
      "y_data": [
        0.25,
        0.17
      ],
      "classify": [],
      "describe": "Support rate for candidates from WNBC/Marist Poll",
      "sort": null
    },
    "nl_queries": [
      "What is the support rate for each candidate in the WNBC/Marist Poll?",
      "How does the support rate compare between candidates Hubert Henno and Stéphane Antiga in the WNBC/Marist Poll?",
      "What are the consider rates for the candidates in the WNBC/Marist Poll?",
      "How do the support rates compare to the consider rates for candidates in the WNBC/Marist Poll?"
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "464": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Location, f.Title, COUNT(*) AS Show_Count FROM schedule s JOIN film f ON s.Film_ID = f.Film_ID JOIN cinema c ON s.Cinema_ID = c.Cinema_ID GROUP BY c.Location, f.Title ORDER BY c.Location, Show_Count DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Location, f.Title, COUNT(*) AS Show_Count FROM schedule s JOIN film f ON s.Film_ID = f.Film_ID JOIN cinema c ON s.Cinema_ID = c.Cinema_ID GROUP BY c.Location, f.Title ORDER BY c.Location, Show_Count DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Location",
      "y_name": "Show_Count",
      "x_data": [
        "County Wicklow",
        "County Cork",
        "County Dublin"
      ],
      "y_data": [
        "5",
        "3",
        "2"
      ],
      "classify": [
        "Title"
      ],
      "describe": "Number of show times per film by cinema location",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of show times per film by cinema location?",
      "Which cinema location has the highest number of show times for each film?",
      "How do the show times for films compare across different cinema locations?",
      "Are there any films that are shown significantly more or less frequently in certain locations?"
    ],
    "irrelevant_tables": [
      "film"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "470": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS Cinema_Name, SUM(s.Show_times_per_day) AS Total_Showtimes FROM schedule s JOIN cinema c ON s.Cinema_ID = c.Cinema_ID GROUP BY c.Name ORDER BY Total_Showtimes DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS Cinema_Name, SUM(s.Show_times_per_day) AS Total_Showtimes FROM schedule s JOIN cinema c ON s.Cinema_ID = c.Cinema_ID GROUP BY c.Name ORDER BY Total_Showtimes DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Cinema_Name",
      "y_name": "Total_Showtimes",
      "x_data": [
        "Codling"
      ],
      "y_data": [
        10
      ],
      "classify": [],
      "describe": "Total number of showtimes per cinema",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of showtimes for each cinema?",
      "Which cinema has the highest number of showtimes?",
      "How do the showtimes compare between different cinemas?",
      "Is there a significant difference in the number of showtimes across cinemas?"
    ],
    "irrelevant_tables": [
      "film"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "487": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT m.Country AS Mountain_Country, c.Country AS Climber_Country, SUM(c.Points) AS Total_Points FROM climber c JOIN mountain m ON c.Mountain_ID = m.Mountain_ID GROUP BY m.Country, c.Country",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT m.Country AS Mountain_Country, c.Country AS Climber_Country, SUM(c.Points) AS Total_Points FROM climber c JOIN mountain m ON c.Mountain_ID = m.Mountain_ID GROUP BY m.Country, c.Country"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "climbing",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Mountain_Country",
      "y_name": "Total_Points",
      "x_data": [
        "Tanzania",
        "Kenya"
      ],
      "y_data": [
        27.0,
        10.0
      ],
      "classify": [
        "Climber_Country"
      ],
      "describe": "Total points accumulated by climbers from different countries for each mountain country",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of total points accumulated by climbers from different countries for each mountain country?",
      "Which country has the highest total points accumulated by climbers for each mountain country?",
      "How do the total points accumulated by climbers compare between mountain countries?",
      "What are the points contributions from each climber country for the mountain countries with the highest total points?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "488": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country, SUM(Points) AS Total_Points FROM climber GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country, SUM(Points) AS Total_Points FROM climber GROUP BY Country"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "climbing",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Total_Points",
      "x_data": [
        "West Germany"
      ],
      "y_data": [
        37.0
      ],
      "classify": [],
      "describe": "Summing up the total points per country",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of points accumulated by climbers from each country?",
      "Which climber has the highest number of points from each country?",
      "What is the average time taken by climbers from each country?",
      "Which country has the highest average points per climber?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "491": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Month, SUM(Total_amount) AS Total_Happy_Hour_Revenue FROM happy_hour_member hhm JOIN happy_hour hh ON hhm.HH_ID = hh.HH_ID GROUP BY Month",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Month, SUM(Total_amount) AS Total_Happy_Hour_Revenue FROM happy_hour_member hhm JOIN happy_hour hh ON hhm.HH_ID = hh.HH_ID GROUP BY Month"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Month",
      "y_name": "Total_Happy_Hour_Revenue",
      "x_data": [
        "April",
        "May",
        "June"
      ],
      "y_data": [
        0,
        20.9,
        0
      ],
      "classify": [],
      "describe": "Total Happy Hour Revenue per Month",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total revenue generated from happy hour events for each month?",
      "Which shop has the highest happy hour revenue in May?",
      "What is the average number of staff in charge during happy hours in months with highest revenues?",
      "How does the revenue from happy hour events correlate with the number of staff in charge?"
    ],
    "irrelevant_tables": [
      "member",
      "shop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "492": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Address, AVG(Score) AS Average_Score FROM shop GROUP BY Address",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Address, AVG(Score) AS Average_Score FROM shop GROUP BY Address"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Address",
      "y_name": "Average_Score",
      "x_data": [
        "1200 Main Street",
        "1111 Main Street",
        "1330 Baltimore Street"
      ],
      "y_data": [
        42.0,
        38.0,
        36.0
      ],
      "classify": [],
      "describe": "Average score of coffee shops at different addresses",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average score of coffee shops at different addresses?",
      "How does the average score of coffee shops vary with the number of staff at each address?",
      "What is the total number of staff at each address and how does it correlate with the shop scores?",
      "How do the number of staff and shop scores correlate with the year of opening of the shops?"
    ],
    "irrelevant_tables": [
      "member",
      "happy_hour",
      "happy_hour_member"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "494": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Address, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Address",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Address, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Address"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Address",
      "y_name": "Number_of_Members",
      "x_data": [
        "Hartford",
        "Waterbury"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of members per address",
      "sort": null
    },
    "nl_queries": [
      "Show the number of members in each address.",
      "How many members are there in Hartford?",
      "Compare the number of members between Hartford and Waterbury.",
      "Which address has the highest number of members?"
    ],
    "irrelevant_tables": [
      "shop",
      "happy_hour",
      "happy_hour_member"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "505": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Age, AVG(Total_amount) AS Average_Spent FROM happy_hour_member hh INNER JOIN member m ON hh.Member_ID = m.Member_ID GROUP BY Age",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Age, AVG(Total_amount) AS Average_Spent FROM happy_hour_member hh INNER JOIN member m ON hh.Member_ID = m.Member_ID GROUP BY Age"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Age",
      "y_name": "Average_Spent",
      "x_data": [
        "29",
        "34",
        "67"
      ],
      "y_data": [
        "0",
        "20.91",
        "0"
      ],
      "classify": [],
      "describe": "Average amount spent by members of different ages",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average amount spent by members of different ages?",
      "Which age group spends the most on average during happy hours?",
      "How does the average amount spent vary across different age groups?",
      "Is there a significant difference in average spending between younger and older members?"
    ],
    "irrelevant_tables": [
      "shop",
      "happy_hour"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "513": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(CLASS_CODE) AS NUMBER_OF_CLASSES FROM CLASS GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(CLASS_CODE) AS NUMBER_OF_CLASSES FROM CLASS GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUMBER_OF_CLASSES",
      "x_data": [
        "ACCT",
        "CIS"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of classes offered by each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many classes are offered by each department?",
      "Which professor teaches the most classes in each department?",
      "What is the highest degree of the professors who teach the most classes in each department?",
      "What is the distribution of class grades for the classes taught by the professors with the highest degree in each department?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "EMPLOYEE",
      "ENROLL",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "516": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_PROFESSORS",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of professors per department",
      "sort": null
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "Which department has the most professors?",
      "What is the ratio of professors in each department?",
      "How does the professor count compare across departments?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "ENROLL",
      "EMPLOYEE",
      "DEPARTMENT",
      "COURSE",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "561": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_PROFESSORS",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of professors in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "Which department has the most professors?",
      "How does the number of professors in the History department compare to the English department?",
      "Show the number of professors in all departments sorted by count."
    ],
    "irrelevant_tables": [
      "STUDENT",
      "ENROLL",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "577": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(STU_NUM) AS NUM_OF_STUDENTS FROM STUDENT GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(STU_NUM) AS NUM_OF_STUDENTS FROM STUDENT GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_OF_STUDENTS",
      "x_data": [
        "BIOL",
        "CIS",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students enrolled in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students are there in each department?",
      "What is the average GPA of students in each department?",
      "What is the distribution of student GPA across different departments?",
      "Which department has the highest number of students with a GPA greater than 3.0?"
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "PROFESSOR",
      "COURSE",
      "DEPARTMENT",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "611": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary per department",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average salary for instructors in each department?",
      "How does the average salary compare between the departments?",
      "Which department has the highest average salary?",
      "What is the difference in average salary between the highest and lowest paying departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "616": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.dept_name, c.credits, COUNT(*) AS course_count FROM department d JOIN course c ON d.dept_name = c.dept_name GROUP BY d.dept_name, c.credits ORDER BY d.dept_name, c.credits",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.dept_name, c.credits, COUNT(*) AS course_count FROM department d JOIN course c ON d.dept_name = c.dept_name GROUP BY d.dept_name, c.credits ORDER BY d.dept_name, c.credits"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "dept_name",
      "y_name": "course_count",
      "x_data": [
        "Civil Eng.",
        "Biology",
        "History",
        "Mech. Eng."
      ],
      "y_data": [
        3,
        2,
        1,
        2
      ],
      "classify": [
        "credits"
      ],
      "describe": "Number of courses by department and credits",
      "sort": "asc"
    },
    "nl_queries": [
      "How many courses are there in each department by credit hour?",
      "Which department offers the most 3-credit courses?",
      "Are there any departments that only offer 4-credit courses?",
      "What is the total number of courses offered by each department?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "section",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "617": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average salary of instructors in each department?",
      "What is the total budget allocated to each department?",
      "What is the relationship between the average salary of instructors and the total budget of each department?",
      "Identify any departments with a high average salary but a relatively low budget."
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "section",
      "course",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "622": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each department?",
      "Which department has the highest average salary?",
      "How does the average salary in Marketing compare to other departments?",
      "Are there any departments with significantly lower average salaries?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "section",
      "course",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "628": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary of instructors by department",
      "sort": null
    },
    "nl_queries": [
      "What is the average salary of instructors in each department?",
      "How does the average salary in the Cybernetics department compare to other departments?",
      "What is the department with the highest average instructor salary?",
      "What is the average salary of instructors in departments with an average salary above 60,000?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "classroom",
      "section",
      "course",
      "takes",
      "time_slot",
      "advisor",
      "student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "659": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.Major, d.DName, COUNT(*) AS Student_Count FROM Student s JOIN Department d ON s.Major = d.DNO GROUP BY s.Major, d.DName ORDER BY Student_Count DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.Major, d.DName, COUNT(*) AS Student_Count FROM Student s JOIN Department d ON s.Major = d.DNO GROUP BY s.Major, d.DName ORDER BY Student_Count DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Major",
      "y_name": "Student_Count",
      "x_data": [
        "600",
        "600",
        "600"
      ],
      "y_data": [
        "1",
        "1",
        "1"
      ],
      "classify": [
        "DName"
      ],
      "describe": "Count of Students in each Major by Department",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are there in each major?",
      "Which department has the highest number of students in the major 600?",
      "What is the distribution of students across different majors?",
      "How does the number of students vary across different departments for each major?"
    ],
    "irrelevant_tables": [
      "Minor_in",
      "Faculty",
      "Enrolled_in",
      "Gradeconversion",
      "Member_of",
      "Course"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "664": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DName AS Department, COUNT(StuID) AS Number_of_Students FROM Student JOIN Department ON Student.Major = Department.DNO GROUP BY DName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DName AS Department, COUNT(StuID) AS Number_of_Students FROM Student JOIN Department ON Student.Major = Department.DNO GROUP BY DName"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Department",
      "y_name": "Number_of_Students",
      "x_data": [
        "Computer Science",
        "History of Art",
        "Biology",
        "Chemistry"
      ],
      "y_data": [
        3,
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of students per department",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are enrolled in each department?",
      "What is the average GPA of students in the Computer Science department?",
      "How does the average GPA of students in the Computer Science department compare to other departments?",
      "What is the distribution of grades for students in the Computer Science department?"
    ],
    "irrelevant_tables": [
      "Minor_in",
      "Faculty",
      "Enrolled_in",
      "Gradeconversion",
      "Member_of"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "665": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Major, AVG(g.gradepoint) AS avg_gradepoint FROM Enrolled_in e INNER JOIN Student s ON e.StuID = s.StuID INNER JOIN Gradeconversion g ON e.Grade = g.lettergrade GROUP BY s.Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Major, AVG(g.gradepoint) AS avg_gradepoint FROM Enrolled_in e INNER JOIN Student s ON e.StuID = s.StuID INNER JOIN Gradeconversion g ON e.Grade = g.lettergrade GROUP BY s.Major"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "avg_gradepoint",
      "x_data": [
        "600",
        "520",
        "550"
      ],
      "y_data": [
        3.7,
        3.5,
        3.8
      ],
      "classify": [],
      "describe": "Average grade points by major",
      "sort": null
    },
    "nl_queries": [
      "What are the average grade points for each major?",
      "Which department has the highest average grade point?",
      "How does the average grade point of each major compare over time?",
      "What is the distribution of grade points within each major?"
    ],
    "irrelevant_tables": [
      "Minor_in",
      "Faculty",
      "Member_of",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "674": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.DName, COUNT(s.StuID) AS student_count FROM Student s JOIN Course c ON s.Major = c.DNO GROUP BY c.DName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.DName, COUNT(s.StuID) AS student_count FROM Student s JOIN Course c ON s.Major = c.DNO GROUP BY c.DName"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DName",
      "y_name": "student_count",
      "x_data": [
        "Computer Science",
        "History of Art",
        "Biology"
      ],
      "y_data": [
        3,
        1,
        2
      ],
      "classify": [],
      "describe": "Number of students in each department",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are enrolled in each department?",
      "Which department has the highest number of students?",
      "What is the distribution of students across different departments?",
      "Are there any departments with significantly fewer students?"
    ],
    "irrelevant_tables": [
      "Minor_in",
      "Faculty",
      "Enrolled_in",
      "Gradeconversion",
      "Member_of",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "676": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.CName, COUNT(e.StuID) AS StudentCount FROM Enrolled_in e JOIN Course c ON e.CID = c.CID GROUP BY c.CName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.CName, COUNT(e.StuID) AS StudentCount FROM Enrolled_in e JOIN Course c ON e.CID = c.CID GROUP BY c.CName"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "CName",
      "y_name": "StudentCount",
      "x_data": [
        "COMPUTER LITERACY",
        "INTRODUCTION TO COMPUTER SCIENCE",
        "INTRO TO PROGRAMMING IN JAVA"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students enrolled in each course",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students are enrolled in each course?",
      "Which course has the highest number of students enrolled?",
      "What is the average number of students per course?",
      "How does the enrollment distribution look across different departments?"
    ],
    "irrelevant_tables": [
      "Minor_in",
      "Faculty",
      "Gradeconversion",
      "Member_of",
      "Department",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "688": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, Profits_billion FROM Companies",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, Profits_billion FROM Companies"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "company_office",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "Profits_billion",
      "x_data": [
        "JPMorgan Chase",
        "HSBC",
        "General Electric"
      ],
      "y_data": [
        17.4,
        13.3,
        11.6
      ],
      "classify": [],
      "describe": "Profits of each company in billions",
      "sort": null
    },
    "nl_queries": [
      "What are the profits of each company?",
      "Which company has the highest profits?",
      "How do the profits compare between companies in the same industry?",
      "What is the total profit of all companies combined?"
    ],
    "irrelevant_tables": [
      "buildings",
      "Office_locations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "693": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country ORDER BY Number_of_Singers DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country ORDER BY Number_of_Singers DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Number_of_Singers",
      "x_data": [
        "United States",
        "France",
        "Netherlands"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of singers from each country",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the number of singers from each country.",
      "Which country has the highest number of singers?",
      "How many singers are there in total from the United States, France, and the Netherlands?",
      "List the countries in descending order of number of singers."
    ],
    "irrelevant_tables": [
      "stadium",
      "singer_in_concert",
      "concert"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "722": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.shipping_agent_code, s.shipping_agent_name, COUNT(d.document_id) AS document_count FROM Documents d JOIN Ref_Shipping_Agents s ON d.shipping_agent_code = s.shipping_agent_code GROUP BY d.shipping_agent_code, s.shipping_agent_name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.shipping_agent_code, s.shipping_agent_name, COUNT(d.document_id) AS document_count FROM Documents d JOIN Ref_Shipping_Agents s ON d.shipping_agent_code = s.shipping_agent_code GROUP BY d.shipping_agent_code, s.shipping_agent_name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "cre_Doc_Control_Systems",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "shipping_agent_name",
      "y_name": "document_count",
      "x_data": [
        "UPS",
        "USPS"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of documents shipped by each shipping agent",
      "sort": "desc"
    },
    "nl_queries": [
      "How many documents are shipped by each shipping agent?",
      "What is the distribution of document types for each shipping agent?",
      "Which shipping agents are associated with the most overdue documents?",
      "How does the document count vary by shipping agent and document status?"
    ],
    "irrelevant_tables": [
      "Documents_Mailed",
      "Circulation_History",
      "Document_Drafts",
      "Ref_Document_Types",
      "Draft_Copies",
      "Ref_Document_Status",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "743": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Template_Type_Code, COUNT(Document_ID) AS Document_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Template_Type_Code, COUNT(Document_ID) AS Document_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Template_Type_Code",
      "y_name": "Document_Count",
      "x_data": [
        "PP",
        "BK"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of documents per template type code",
      "sort": "desc"
    },
    "nl_queries": [
      "How many documents are associated with each template type code?",
      "Which template type code has the highest number of documents?",
      "What is the distribution of documents across different template types over time?",
      "Are there any trends in document creation for certain template types over the years?"
    ],
    "irrelevant_tables": [
      "Paragraphs",
      "Ref_Template_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "744": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Name AS Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Document_Name AS Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Name",
      "y_name": "Paragraph_Count",
      "x_data": [
        "Introduction of OS",
        "Understanding DB",
        "Summer Show"
      ],
      "y_data": [
        0,
        0,
        1
      ],
      "classify": [],
      "describe": "Count of paragraphs in each document",
      "sort": null
    },
    "nl_queries": [
      "How many paragraphs are there in each document?",
      "Which document has the most paragraphs?",
      "Are there any documents without paragraphs?",
      "Can you show the document names and the count of paragraphs for each?"
    ],
    "irrelevant_tables": [
      "Ref_Template_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "747": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY Document_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY Document_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Name",
      "y_name": "Paragraph_Count",
      "x_data": [
        "Introduction of OS",
        "Understanding DB",
        "Summer Show"
      ],
      "y_data": [
        0,
        0,
        1
      ],
      "classify": [],
      "describe": "Count of paragraphs for each document",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of paragraphs for each document?",
      "Which document has the highest number of paragraphs?",
      "What is the distribution of documents with respect to the number of paragraphs?",
      "How many documents have more than one paragraph?"
    ],
    "irrelevant_tables": [
      "Templates",
      "Ref_Template_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "770": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Location_Name, COUNT(d.Document_ID) AS Number_of_Documents FROM Document_Locations dl JOIN Ref_Locations e ON dl.Location_Code = e.Location_Code JOIN Documents_to_be_Destroyed d ON dl.Document_ID = d.Document_ID GROUP BY e.Location_Name ORDER BY Number_of_Documents DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Location_Name, COUNT(d.Document_ID) AS Number_of_Documents FROM Document_Locations dl JOIN Ref_Locations e ON dl.Location_Code = e.Location_Code JOIN Documents_to_be_Destroyed d ON dl.Document_ID = d.Document_ID GROUP BY e.Location_Name ORDER BY Number_of_Documents DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Hard",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location_Name",
      "y_name": "Number_of_Documents",
      "x_data": [
        "Edinburgh",
        "Canada"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "This bar chart shows the number of documents to be destroyed in each location.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of documents to be destroyed across different locations?",
      "Which locations have the highest number of documents to be destroyed?",
      "How does the number of documents to be destroyed compare between Edinburgh and Canada?",
      "Identify the location with the fewest documents to be destroyed."
    ],
    "irrelevant_tables": [
      "All_Documents",
      "Roles",
      "Ref_Document_Types",
      "Employees",
      "Ref_Calendar"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "809": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Type_Name, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Document_Type_Name, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type_Name",
      "y_name": "Document_Count",
      "x_data": [
        "Book",
        "CV"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of documents by Document Type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the count of documents by each document type?",
      "Which document type has the highest number of documents?",
      "How do the counts of documents for each type compare?",
      "What are the Document_Type_Descriptions for the document types with the highest counts?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Accounts",
      "Statements",
      "Ref_Budget_Codes",
      "Documents_with_Expenses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "817": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Type_Name AS Document_Type, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Document_Type_Name AS Document_Type, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type",
      "y_name": "Document_Count",
      "x_data": [
        "CV",
        "BK"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of documents by type",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of documents by type?",
      "How does the total expense for each document type compare?",
      "What are the details of the projects associated with the document types?",
      "Which budget types are most commonly associated with each document type and project?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Ref_Budget_Codes",
      "Documents_with_Expenses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "832": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Type_Name, b.Budget_Type_Description, COUNT(*) AS Document_Count FROM Documents d JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID JOIN Ref_Budget_Codes b ON de.Budget_Type_Code = b.Budget_Type_Code GROUP BY d.Document_Type_Name, b.Budget_Type_Description",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.Document_Type_Name, b.Budget_Type_Description, COUNT(*) AS Document_Count FROM Documents d JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID JOIN Ref_Budget_Codes b ON de.Budget_Type_Code = b.Budget_Type_Code GROUP BY d.Document_Type_Name, b.Budget_Type_Description"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Document_Type_Name",
      "y_name": "Document_Count",
      "x_data": [
        "Book",
        "CV",
        "Presentation"
      ],
      "y_data": [
        1,
        2,
        0
      ],
      "classify": [
        "Budget_Type_Description"
      ],
      "describe": "Distribution of document types by budget category",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of document types across different budget categories?",
      "Which budget category has the highest number of documents for each document type?",
      "What is the total count of documents for each budget category?",
      "How does the distribution of document types compare between different budget categories?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Accounts",
      "Statements",
      "Ref_Document_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "834": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Type_Name, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Document_Type_Name, COUNT(d.Document_ID) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type_Name",
      "y_name": "Document_Count",
      "x_data": [
        "CV",
        "BK"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of documents by type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of document types in the database?",
      "Which document type has the highest number of documents?",
      "How many documents are there for each document type?",
      "Show the count of each document type in descending order."
    ],
    "irrelevant_tables": [
      "Projects",
      "Accounts",
      "Statements",
      "Documents_with_Expenses",
      "Ref_Budget_Codes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "838": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Type_Code, COUNT(*) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Document_Type_Code, COUNT(*) AS Document_Count FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code GROUP BY d.Document_Type_Code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type_Code",
      "y_name": "Document_Count",
      "x_data": [
        "CV",
        "BK"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of documents by document type",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of documents by document type?",
      "Which document types have the highest and lowest counts?",
      "How does the count of government budget type documents vary across document types?",
      "What are the budget types associated with the most reviewed document types?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Accounts",
      "Statements",
      "Documents_with_Expenses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "856": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Workshop_Group_ID, COUNT(Booking_ID) AS Num_Bookings FROM Bookings GROUP BY Workshop_Group_ID ORDER BY Num_Bookings DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Workshop_Group_ID, COUNT(Booking_ID) AS Num_Bookings FROM Bookings GROUP BY Workshop_Group_ID ORDER BY Num_Bookings DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Workshop_Group_ID",
      "y_name": "Num_Bookings",
      "x_data": [
        "140",
        "838",
        "176"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of bookings per workshop group",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of bookings for each workshop group?",
      "Which workshop group has the highest number of bookings?",
      "Compare the number of bookings for the top 3 workshop groups.",
      "Identify trends in workshop group bookings over time."
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Services",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Stores",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "858": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, p.Product_Name, SUM(oi.Order_Quantity) AS Total_Quantity FROM Order_Items oi JOIN Products p ON oi.Product_ID = p.Product_ID JOIN Customer_Orders co ON oi.Order_ID = co.Order_ID JOIN Stores s ON co.Store_ID = s.Store_ID GROUP BY s.Store_Name, p.Product_Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.Store_Name, p.Product_Name, SUM(oi.Order_Quantity) AS Total_Quantity FROM Order_Items oi JOIN Products p ON oi.Product_ID = p.Product_ID JOIN Customer_Orders co ON oi.Order_ID = co.Order_ID JOIN Stores s ON co.Store_ID = s.Store_ID GROUP BY s.Store_Name, p.Product_Name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Store_Name",
      "y_name": "Total_Quantity",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        8,
        8,
        1
      ],
      "classify": [
        "Product_Name"
      ],
      "describe": "Total quantity of products ordered per store",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total quantity of products ordered per store?",
      "Which products contribute most to the total quantity of orders in each store?",
      "How does the total quantity of products ordered compare across different stores?",
      "What are the trends in product orders for the top contributing products in each store?"
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Services",
      "Drama_Workshop_Groups",
      "Invoices",
      "Bookings_Services",
      "Stores",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "868": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Customer_Name AS Performer_Name, COUNT(b.Booking_ID) AS Number_of_Bookings FROM Performers p JOIN Performers_in_Bookings pib ON p.Performer_ID = pib.Performer_ID JOIN Bookings b ON pib.Order_ID = b.Booking_ID GROUP BY p.Customer_Name ORDER BY Number_of_Bookings DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Customer_Name AS Performer_Name, COUNT(b.Booking_ID) AS Number_of_Bookings FROM Performers p JOIN Performers_in_Bookings pib ON p.Performer_ID = pib.Performer_ID JOIN Bookings b ON pib.Order_ID = b.Booking_ID GROUP BY p.Customer_Name ORDER BY Number_of_Bookings DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Performer_Name",
      "y_name": "Number_of_Bookings",
      "x_data": [
        "Shawna",
        "Ashley",
        "Oren"
      ],
      "y_data": [
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of Bookings by Performer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of bookings each performer has?",
      "Which performer has the highest number of bookings?",
      "How many bookings does the top performer have?",
      "Display the number of bookings for each performer in a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Bookings",
      "Addresses",
      "Customers",
      "Services",
      "Drama_Workshop_Groups",
      "Invoices",
      "Bookings_Services",
      "Stores",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "874": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ws.Store_Name, COUNT(b.Booking_ID) AS Booking_Count FROM Bookings b JOIN Stores s ON b.Store_ID = s.Store_ID GROUP BY ws.Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ws.Store_Name, COUNT(b.Booking_ID) AS Booking_Count FROM Bookings b JOIN Stores s ON b.Store_ID = s.Store_ID GROUP BY ws.Store_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Booking_Count",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of bookings per store",
      "sort": "null"
    },
    "nl_queries": [
      "Show the number of bookings per store",
      "Which store has the highest number of bookings?",
      "What is the average number of bookings per store?",
      "Display the total number of bookings across all stores"
    ],
    "irrelevant_tables": [
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Drama_Workshop_Groups",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "875": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.Store_ID, COUNT(DISTINCT p.Performer_ID) AS Num_Performers FROM Bookings b JOIN Performers_in_Bookings pb ON b.Booking_ID = pb.Order_ID JOIN Performers p ON pb.Performer_ID = p.Performer_ID GROUP BY b.Store_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.Store_ID, COUNT(DISTINCT p.Performer_ID) AS Num_Performers FROM Bookings b JOIN Performers_in_Bookings pb ON b.Booking_ID = pb.Order_ID JOIN Performers p ON pb.Performer_ID = p.Performer_ID GROUP BY b.Store_ID"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_ID",
      "y_name": "Num_Performers",
      "x_data": [
        "8",
        "7",
        "9"
      ],
      "y_data": [
        "2",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Number of distinct performers in each store",
      "sort": "desc"
    },
    "nl_queries": [
      "How many distinct performers are there in each store?",
      "Which store has the highest number of distinct performers?",
      "What is the distribution of performers across all stores?",
      "Is there a significant difference in the number of performers between stores?"
    ],
    "irrelevant_tables": [
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Drama_Workshop_Groups",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Stores",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "880": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, COUNT(o.Order_ID) AS Total_Orders FROM Stores s JOIN Customer_Orders o ON s.Store_ID = o.Store_ID GROUP BY s.Store_Name ORDER BY Total_Orders DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Store_Name, COUNT(o.Order_ID) AS Total_Orders FROM Stores s JOIN Customer_Orders o ON s.Store_ID = o.Store_ID GROUP BY s.Store_Name ORDER BY Total_Orders DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Total_Orders",
      "x_data": [
        "Rob Dinning",
        "Adan Dinning",
        "FJA Filming"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of orders per store",
      "sort": "desc"
    },
    "nl_queries": [
      "Which store received the most orders?",
      "What is the total number of orders for each store?",
      "How do the order counts compare between the different stores?",
      "Identify trends in order counts across stores."
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Bookings",
      "Addresses",
      "Customers",
      "Services",
      "Drama_Workshop_Groups",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "883": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, COUNT(b.Booking_ID) AS Booking_Count FROM Bookings b JOIN Stores s ON b.Store_ID = s.Store_ID GROUP BY s.Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Store_Name, COUNT(b.Booking_ID) AS Booking_Count FROM Bookings b JOIN Stores s ON b.Store_ID = s.Store_ID GROUP BY s.Store_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Booking_Count",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of bookings by store",
      "sort": null
    },
    "nl_queries": [
      "How many bookings are there for each store?",
      "Which store has the highest number of bookings?",
      "What is the total number of bookings across all stores?",
      "Can you list the stores in descending order of bookings?"
    ],
    "irrelevant_tables": [
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Drama_Workshop_Groups",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "887": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT t.Name, COUNT(v.Visit_ID) AS Visit_Count FROM Tourist_Attractions t JOIN Visits v ON t.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY t.Name ORDER BY Visit_Count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT t.Name, COUNT(v.Visit_ID) AS Visit_Count FROM Tourist_Attractions t JOIN Visits v ON t.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY t.Name ORDER BY Visit_Count DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Theme_park",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Visit_Count",
      "x_data": [
        "flying elephant",
        "UK gallery",
        "art museum"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of visits per tourist attraction",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the most visited tourist attractions?",
      "Which tourist attraction has the highest number of visits?",
      "How does the number of visits compare between different tourist attractions?",
      "What insights can be derived from the visit patterns across the tourist attractions?"
    ],
    "irrelevant_tables": [
      "Museums",
      "Ref_Hotel_Star_Ratings",
      "Royal_Family",
      "Photos",
      "Theme_Parks",
      "Staff",
      "Locations",
      "Street_Markets",
      "Visits",
      "Tourist_Attraction_Features",
      "Features",
      "Shops",
      "Ref_Attraction_Types",
      "Visitors",
      "Hotels"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "906": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Company_name AS Company, SUM(m.Gross_worldwide) AS Total_Gross FROM culture_company c JOIN movie m ON c.movie_id = m.movie_id GROUP BY c.Company_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Company_name AS Company, SUM(m.Gross_worldwide) AS Total_Gross FROM culture_company c JOIN movie m ON c.movie_id = m.movie_id GROUP BY c.Company_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "culture_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company",
      "y_name": "Total_Gross",
      "x_data": [
        "Culture China",
        "Culture China Cargo",
        "Culture Hong Kong"
      ],
      "y_data": [
        3728888,
        40500,
        0
      ],
      "classify": [],
      "describe": "Total worldwide gross revenue for each company",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total worldwide gross revenue for each company?",
      "What are the highest grossing movies for each company?",
      "What is the relationship between company equity shareholding and their movie gross revenue?",
      "How does the book club affiliation relate to the company's overall performance in terms of movie gross revenue?"
    ],
    "irrelevant_tables": [
      "culture_company",
      "movie"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "908": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.town_city, COUNT(com.complaint_id) AS complaint_count FROM Customers c JOIN Complaints com ON c.customer_id = com.customer_id GROUP BY c.town_city ORDER BY complaint_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.town_city, COUNT(com.complaint_id) AS complaint_count FROM Customers c JOIN Complaints com ON c.customer_id = com.customer_id GROUP BY c.town_city ORDER BY complaint_count DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customer_complaints",
    "vis_obj": {
      "chart": "bar",
      "x_name": "town_city",
      "y_name": "complaint_count",
      "x_data": [
        "Maryamport",
        "Sauerberg",
        "Tyreekhaven"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "This visualization shows the number of complaints from each town/city. It helps identify which locations have the highest number of customer complaints.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of complaints across different towns/cities?",
      "Which town/city has the highest number of complaints?",
      "What are the complaint counts for the top three towns/cities?",
      "Identify trends in complaint counts across all towns/cities over time."
    ],
    "irrelevant_tables": [
      "Staff",
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "910": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT complaint_type_code, product_category_code, COUNT(*) AS complaint_count FROM Complaints INNER JOIN Products ON Complaints.product_id = Products.product_id GROUP BY complaint_type_code, product_category_code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT complaint_type_code, product_category_code, COUNT(*) AS complaint_count FROM Complaints INNER JOIN Products ON Complaints.product_id = Products.product_id GROUP BY complaint_type_code, product_category_code"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "customer_complaints",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "complaint_type_code",
      "y_name": "complaint_count",
      "x_data": [
        "Product Failure",
        "Product Unusable"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [
        "product_category_code"
      ],
      "describe": "Number of complaints by type and product category",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the total counts of complaints based on complaint type and product category?",
      "Which product category has the highest number of 'Product Unusable' complaints?",
      "How do 'Product Failure' complaints compare across different product categories?",
      "What trends can be observed in the number of complaints for each product category over time?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "912": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ao.order_status_code, COUNT(*) AS order_count FROM Actual_Orders ao GROUP BY ao.order_status_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ao.order_status_code, COUNT(*) AS order_count FROM Actual_Orders ao GROUP BY ao.order_status_code"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customer_deliveries",
    "vis_obj": {
      "chart": "bar",
      "x_name": "order_status_code",
      "y_name": "order_count",
      "x_data": [
        "Success",
        "Cancel"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of orders by order status",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of orders by status?",
      "How many orders were successful and how many were canceled?",
      "Which status has the highest number of orders?",
      "Can we compare the number of successful orders to the total number of orders?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Regular_Orders",
      "Actual_Order_Products",
      "Order_Deliveries",
      "Employees",
      "Regular_Order_Products",
      "Products",
      "Delivery_Route_Locations",
      "Trucks",
      "Delivery_Routes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "914": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_addresses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "total_orders",
      "x_data": [
        "Tillman Ernser",
        "Rodrick Heaney",
        "Dr. Julia Wuckert MD"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Total number of orders by each customer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of orders placed by each customer?",
      "Which customers have placed the most orders?",
      "How does the total number of orders vary among different customers?",
      "Identify any trends or patterns in the ordering behavior of customers based on the total number of orders."
    ],
    "irrelevant_tables": [
      "Customer_Contact_Channels",
      "Customer_Addresses",
      "Products",
      "Order_Items",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "924": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'Delivered' GROUP BY c.customer_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'Delivered' GROUP BY c.customer_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_addresses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "number_of_orders",
      "x_data": [
        "Dr. Julia Wuckert MD",
        "Tillman Ernser",
        "Rodrick Heaney"
      ],
      "y_data": [
        1,
        0,
        1
      ],
      "classify": [],
      "describe": "Number of delivered orders by customer",
      "sort": "desc"
    },
    "nl_queries": [
      "Which customers have the most delivered orders?",
      "What is the distribution of delivered orders across different customers?",
      "How many delivered orders were made by each customer?",
      "Identify the top customers by the number of delivered orders."
    ],
    "irrelevant_tables": [
      "Customer_Contact_Channels",
      "Customer_Addresses",
      "Products",
      "Order_Items",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "926": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_first_name, SUM(il.derived_total_cost) AS total_spent FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Orders o ON a.account_id = o.customer_id JOIN Invoices i ON o.order_id = i.order_id JOIN Invoice_Line_Items il ON i.invoice_number = il.invoice_number GROUP BY c.customer_first_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_first_name, SUM(il.derived_total_cost) AS total_spent FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Orders o ON a.account_id = o.customer_id JOIN Invoices i ON o.order_id = i.order_id JOIN Invoice_Line_Items il ON i.invoice_number = il.invoice_number GROUP BY c.customer_first_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_first_name",
      "y_name": "total_spent",
      "x_data": [
        "Dee",
        "Brennon",
        "Joesph"
      ],
      "y_data": [
        129.38,
        59.56,
        59.93
      ],
      "classify": [],
      "describe": "Total amount spent by each customer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount spent by each customer?",
      "Which customer spent the most?",
      "How does the spending of the top customer compare to others?",
      "What is the average spending of customers?"
    ],
    "irrelevant_tables": [
      "Financial_Transactions",
      "Products",
      "Product_Categories"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "961": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_name, SUM(product_quantity) AS total_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY product_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_name, SUM(product_quantity) AS total_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY product_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "Coffee Bean",
        "Learning French",
        "Fans"
      ],
      "y_data": [
        6,
        7,
        4
      ],
      "classify": [],
      "describe": "Total product quantities sold",
      "sort": null
    },
    "nl_queries": [
      "What is the total quantity of each product sold?",
      "How does the quantity of 'Coffee Bean' sold compare to 'Learning French'?",
      "What is the highest selling product?",
      "Which product has the least quantity sold?"
    ],
    "irrelevant_tables": [
      "Financial_Transactions",
      "Accounts",
      "Invoice_Line_Items",
      "Customers",
      "Invoices",
      "Orders",
      "Product_Categories"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "971": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_first_name, c.customer_last_name, SUM(il.derived_total_cost) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Invoices i ON o.order_id = i.order_id JOIN Invoice_Line_Items il ON i.invoice_number = il.invoice_number GROUP BY c.customer_first_name, c.customer_last_name ORDER BY total_spent DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_first_name, c.customer_last_name, SUM(il.derived_total_cost) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Invoices i ON o.order_id = i.order_id JOIN Invoice_Line_Items il ON i.invoice_number = il.invoice_number GROUP BY c.customer_first_name, c.customer_last_name ORDER BY total_spent DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_first_name",
      "y_name": "total_spent",
      "x_data": [
        "Dee",
        "Brennon",
        "Joesph"
      ],
      "y_data": [
        191.31,
        59.56,
        59.93
      ],
      "classify": [],
      "describe": "Total amount spent by each customer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount spent by each customer?",
      "Which customers have the highest total spending?",
      "How do different customers compare in terms of their total spending?",
      "Identify the top spending customers and analyze their spending patterns."
    ],
    "irrelevant_tables": [
      "Products",
      "Accounts",
      "Financial_Transactions",
      "Product_Categories"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "975": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_first_name, COUNT(o.order_id) AS order_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_first_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_first_name, COUNT(o.order_id) AS order_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_first_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_first_name",
      "y_name": "order_count",
      "x_data": [
        "Dee",
        "Brennon",
        "Joesph"
      ],
      "y_data": [
        0,
        0,
        1
      ],
      "classify": [],
      "describe": "Number of orders placed by each customer",
      "sort": "desc"
    },
    "nl_queries": [
      "How many orders has each customer placed?",
      "Which customer has placed the most orders?",
      "What are the total order counts for customers who placed orders?",
      "How does the number of orders compare between VIP and Regular customers?"
    ],
    "irrelevant_tables": [
      "Financial_Transactions",
      "Invoice_Line_Items",
      "Products",
      "Invoices",
      "Order_Items",
      "Product_Categories"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "990": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT a.account_name, COUNT(*) AS total_orders FROM Orders o JOIN Accounts a ON o.customer_id = a.customer_id GROUP BY a.account_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT a.account_name, COUNT(*) AS total_orders FROM Orders o JOIN Accounts a ON o.customer_id = a.customer_id GROUP BY a.account_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "account_name",
      "y_name": "total_orders",
      "x_data": [
        "900",
        "520",
        "323"
      ],
      "y_data": [
        1,
        0,
        1
      ],
      "classify": [],
      "describe": "Count of total orders placed by different account names",
      "sort": "asc"
    },
    "nl_queries": [
      "How many total orders have been placed by different account names?",
      "What is the distribution of orders placed by account types (Regular, VIP)?",
      "Which account type has the highest number of orders?",
      "Compare the number of orders placed by account types over time."
    ],
    "irrelevant_tables": [
      "Financial_Transactions",
      "Invoice_Line_Items",
      "Products",
      "Invoices",
      "Order_Items",
      "Product_Categories"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "994": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT a.city, COUNT(c.customer_id) AS customer_count FROM Addresses a JOIN Customer_Address_History c ON a.address_id = c.address_id GROUP BY a.city ORDER BY customer_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT a.city, COUNT(c.customer_id) AS customer_count FROM Addresses a JOIN Customer_Address_History c ON a.address_id = c.address_id GROUP BY a.city ORDER BY customer_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "customer_count",
      "x_data": [
        "Hertafurt",
        "Edgardoberg",
        "Gilbertmouth"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of customers per city",
      "sort": "desc"
    },
    "nl_queries": [
      "Which city has the highest number of customers?",
      "How does the number of customers compare across different cities?",
      "What is the distribution of customers across the top cities?",
      "Can we identify the city with the least number of customers?"
    ],
    "irrelevant_tables": [
      "Contacts",
      "Products",
      "Order_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "998": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.gender, COUNT(*) AS num_customers FROM Contacts c GROUP BY c.gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.gender, COUNT(*) AS num_customers FROM Contacts c GROUP BY c.gender"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "num_customers",
      "x_data": [
        "male",
        "female"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of customers by gender",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of customers by gender?",
      "What are the total number of orders placed by each gender?",
      "What is the average order value for each gender?",
      "How does the average order value compare between customers who have moved addresses more than once and those who haven't, for each gender?"
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Products",
      "Order_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "999": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.gender, p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Contacts c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.gender, p.product_name ORDER BY c.gender, total_quantity DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.gender, p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Contacts c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.gender, p.product_name ORDER BY c.gender, total_quantity DESC"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "Apple",
        "jcrew",
        "Apple"
      ],
      "y_data": [
        10,
        7,
        3
      ],
      "classify": [
        "gender"
      ],
      "describe": "This visualization displays the total quantity of products ordered, broken down by gender. It helps to analyze the product preference differences between male and female customers.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total quantity of products ordered by gender?",
      "Which products are most popular among male customers?",
      "How do product preferences differ between male and female customers?",
      "What are the top three products ordered by female customers?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Customers",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1001": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "Apple",
        "jcrew"
      ],
      "y_data": [
        12,
        7
      ],
      "classify": [],
      "describe": "Total quantity ordered for each product",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total quantity of each product ordered?",
      "Which product has the highest total quantity ordered?",
      "How does the total quantity ordered compare between 'Apple' and 'jcrew' products?",
      "What is the proportion of total quantity ordered between 'Apple' and 'jcrew' products?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Customer_Orders",
      "Customers",
      "Contacts",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1003": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.gender, COUNT(co.order_id) AS total_orders FROM Contacts c JOIN Customers cu ON c.customer_id = cu.customer_id JOIN Customer_Orders co ON cu.customer_id = co.customer_id GROUP BY c.gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.gender, COUNT(co.order_id) AS total_orders FROM Contacts c JOIN Customers cu ON c.customer_id = cu.customer_id JOIN Customer_Orders co ON cu.customer_id = co.customer_id GROUP BY c.gender"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "total_orders",
      "x_data": [
        "male",
        "female"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Total number of orders by gender",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of orders placed by male and female customers?",
      "Which gender has placed the most orders?",
      "How does the number of orders differ between male and female customers?",
      "Can we see a breakdown of order counts by gender?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Addresses",
      "Order_Items",
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1007": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_name, SUM(p.product_price) AS total_spent FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.customer_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_name, SUM(p.product_price) AS total_spent FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.customer_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "total_spent",
      "x_data": [
        "Kayley",
        "Sterling",
        "Buford"
      ],
      "y_data": [
        54753980,
        30590930,
        1026885
      ],
      "classify": [],
      "describe": "Total amount spent by each customer",
      "sort": "desc"
    },
    "nl_queries": [
      "How much has each customer spent in total?",
      "What is the total amount spent by each customer, sorted in descending order?",
      "Which customer has spent the most overall?",
      "Provide a bar chart showing customer names and their total spending."
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Contacts",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1008": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_name, SUM(order_quantity) AS total_quantity FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY product_name ORDER BY total_quantity DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_name, SUM(order_quantity) AS total_quantity FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY product_name ORDER BY total_quantity DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "Apple",
        "jcrew"
      ],
      "y_data": [
        12,
        7
      ],
      "classify": [],
      "describe": "Total quantity of each product ordered",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total quantity of each product ordered?",
      "Which product has the highest total quantity ordered?",
      "How does the total ordered quantity compare between different products?",
      "What are the top 3 products by total ordered quantity?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Customer_Orders",
      "Customers",
      "Contacts",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1012": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_category, COUNT(order_id) AS order_count FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id WHERE CO.order_status_code = 'Cancelled' GROUP BY product_category",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_category, COUNT(order_id) AS order_count FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id WHERE CO.order_status_code = 'Cancelled' GROUP BY product_category"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_category",
      "y_name": "order_count",
      "x_data": [
        "Food",
        "Electronics",
        "Books"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of cancelled orders per product category",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of cancelled orders per product category?",
      "How many orders were cancelled for each product category, and what is the distribution?",
      "Which product category had the highest number of cancelled orders?",
      "Analyze the trends in cancelled orders across different product categories."
    ],
    "irrelevant_tables": [
      "Customer_Addresses",
      "Mailshot_Customers",
      "Mailshot_Campaigns",
      "Customers",
      "Premises"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1061": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_first_name || ' ' || c.customer_last_name AS customer_name, SUM(ft.transaction_amount) AS total_transaction_amount FROM Financial_Transactions ft JOIN Customers_Cards cc ON ft.card_id = cc.card_id JOIN Customers c ON c.customer_id = cc.customer_id GROUP BY c.customer_first_name, c.customer_last_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_first_name || ' ' || c.customer_last_name AS customer_name, SUM(ft.transaction_amount) AS total_transaction_amount FROM Financial_Transactions ft JOIN Customers_Cards cc ON ft.card_id = cc.card_id JOIN Customers c ON c.customer_id = cc.customer_id GROUP BY c.customer_first_name, c.customer_last_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "total_transaction_amount",
      "x_data": [
        "John Doe",
        "Jane Smith",
        "Marcel Brekke"
      ],
      "y_data": [
        3218.79,
        1931.76,
        486.56
      ],
      "classify": [],
      "describe": "Total transaction amounts by customer",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total transaction amounts for each customer?",
      "Which customer has the highest total transaction amount?",
      "How do the total transaction amounts compare between VIP and Regular account holders?",
      "What is the breakdown of transaction types for the customer with the highest total transaction amount?"
    ],
    "irrelevant_tables": [
      "Accounts"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1071": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Total_Audience",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        432,
        134
      ],
      "classify": [],
      "describe": "Total audience count by venue",
      "sort": null
    },
    "nl_queries": [
      "What is the total audience count for each venue?",
      "Which venue had the highest total audience count?",
      "How does the audience count at Manama compare to Doha?",
      "Are there any patterns in audience counts based on venue?"
    ],
    "irrelevant_tables": [
      "people",
      "debate_people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1072": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Total_Audience",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        432,
        134
      ],
      "classify": [],
      "describe": "Total audience count per venue",
      "sort": null
    },
    "nl_queries": [
      "What is the total audience count for each venue?",
      "How does the audience count compare between different venues?",
      "What are the trends in audience attendance by venue?",
      "Which venue has the highest audience attendance?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1073": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Total_Audience",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        432,
        134
      ],
      "classify": [],
      "describe": "Total audience for debates held at different venues",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of audience for debates held at different venues?",
      "How does the total number of audience compare between different venues?",
      "Which venue hosted the maximum number of audiences?",
      "What is the difference in the number of audience between the venue with the highest and the lowest audience?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1074": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Party, COUNT(*) AS Num_Debates FROM debate_people dp JOIN people p ON dp.Affirmative = p.People_ID OR dp.Negative = p.People_ID GROUP BY p.Party",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Party, COUNT(*) AS Num_Debates FROM debate_people dp JOIN people p ON dp.Affirmative = p.People_ID OR dp.Negative = p.People_ID GROUP BY p.Party"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "Num_Debates",
      "x_data": [
        "Republican",
        "Democratic"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of debates participated in by each party",
      "sort": "desc"
    },
    "nl_queries": [
      "How many debates has each political party participated in?",
      "Which political party has participated in the most debates?",
      "What is the distribution of debate wins for each political party?",
      "Which political party has the highest win rate in debates?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1079": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Venue, COUNT(dp.Debate_ID) AS Number_of_Debates FROM debate d JOIN debate_people dp ON d.Debate_ID = dp.Debate_ID GROUP BY d.Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Venue, COUNT(dp.Debate_ID) AS Number_of_Debates FROM debate d JOIN debate_people dp ON d.Debate_ID = dp.Debate_ID GROUP BY d.Venue"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Number_of_Debates",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of debates held at different venues",
      "sort": null
    },
    "nl_queries": [
      "Count the number of debates held at each venue",
      "What is the average number of debates held at each venue?",
      "Show the number of debates where the affirmative side won at each venue",
      "Compare the total number of debates and the number of debates where the affirmative side won at each venue"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1081": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Total_Audience",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        432,
        134
      ],
      "classify": [],
      "describe": "Total audience count per debate venue",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total audience count at each venue?",
      "Which venue had the highest audience count?",
      "How does the audience count compare between different venues?",
      "What is the distribution of debates across different venues based on audience count?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1082": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Total_Audience",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        432,
        134
      ],
      "classify": [],
      "describe": "Total audience count per venue",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of audience per venue?",
      "Which venue had the highest total audience count?",
      "How does the audience count compare between different venues?",
      "What are the trends in audience numbers over time for the venue with the highest audience count?"
    ],
    "irrelevant_tables": [
      "people",
      "debate_people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1088": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT college.Name AS College_Name, COUNT(member.Member_ID) AS Member_Count FROM member JOIN college ON member.College_ID = college.College_ID GROUP BY college.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT college.Name AS College_Name, COUNT(member.Member_ID) AS Member_Count FROM member JOIN college ON member.College_ID = college.College_ID GROUP BY college.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "decoration_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College_Name",
      "y_name": "Member_Count",
      "x_data": [
        "Saskatchewan School",
        "B.C. School",
        "Calgary School"
      ],
      "y_data": [
        2,
        0,
        1
      ],
      "classify": [],
      "describe": "Number of members from each college",
      "sort": "desc"
    },
    "nl_queries": [
      "How many members are there from each college?",
      "Which college has the highest number of participants?",
      "What is the distribution of members by country for the college with the highest number of participants?",
      "Which decoration themes have been most popular among the top-ranked members from the college with the highest number of participants?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1090": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS College_Name, COUNT(m.Member_ID) AS Member_Count FROM member m JOIN college c ON m.College_ID = c.College_ID GROUP BY c.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS College_Name, COUNT(m.Member_ID) AS Member_Count FROM member m JOIN college c ON m.College_ID = c.College_ID GROUP BY c.Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "decoration_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College_Name",
      "y_name": "Member_Count",
      "x_data": [
        "Saskatchewan School",
        "B.C. School",
        "Calgary School"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of members in each college",
      "sort": "desc"
    },
    "nl_queries": [
      "How many members are there in each college?",
      "What is the rank distribution of members by decoration theme in each college?",
      "Which college has the highest ranked members in each decoration theme?",
      "What is the average rank of members in each college for the 'Walk on the Moon' theme?"
    ],
    "irrelevant_tables": [
      "round"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1104": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Budget_in_Billions FROM department",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Budget_in_Billions FROM department"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Budget_in_Billions",
      "x_data": [
        "State",
        "Treasury",
        "Defense"
      ],
      "y_data": [
        9.96,
        11.1,
        439.3
      ],
      "classify": [],
      "describe": "Comparison of budget in billions for each department",
      "sort": null
    },
    "nl_queries": [
      "What is the budget distribution among different departments?",
      "Which department has the highest budget?",
      "How much higher is the budget of the Defense department compared to the Treasury department?",
      "What is the combined budget of all departments?"
    ],
    "irrelevant_tables": [
      "head",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1182": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(dog_id) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(dog_id) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "This bar chart shows the count of dogs for each breed.",
      "sort": "asc"
    },
    "nl_queries": [
      "How many dogs are there for each breed?",
      "Which breed has the highest number of dogs?",
      "What is the distribution of dog breeds in the kennel?",
      "Compare the number of dogs for each breed to identify the most common breed."
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1187": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, size_description, COUNT(*) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY breed_name, size_description",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT breed_name, size_description, COUNT(*) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY breed_name, size_description"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        {
          "Small": 3,
          "Medium": 5,
          "Large": 2
        },
        {
          "Small": 2,
          "Medium": 4,
          "Large": 6
        },
        {
          "Small": 1,
          "Medium": 7,
          "Large": 3
        }
      ],
      "classify": [
        "size_description"
      ],
      "describe": "Count of dogs grouped by breed and size",
      "sort": null
    },
    "nl_queries": [
      "How many dogs of each breed are there, categorized by size?",
      "Which breed has the highest number of medium-sized dogs?",
      "Can we see the distribution of large dogs across different breeds?",
      "Which breed and size combination is the most common?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Professionals",
      "Charges",
      "Treatment_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1188": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(*) AS number_of_dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(*) AS number_of_dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "number_of_dogs",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Number of Dogs by Breed",
      "sort": "asc"
    },
    "nl_queries": [
      "How many dogs are there for each breed?",
      "What is the distribution of dog sizes within each breed?",
      "How many abandoned dogs are there for each breed?",
      "What is the average age of dogs for each breed?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1192": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(dog_id) AS dog_count FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY dog_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(dog_id) AS dog_count FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY dog_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Bulldog",
        "Eskimo",
        "Husky"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Comparison of the number of dogs per breed",
      "sort": "desc"
    },
    "nl_queries": [
      "Which breed has the highest number of dogs?",
      "How many dogs belong to each breed?",
      "What is the distribution of dogs across different breeds?",
      "Are there any breeds that have no dogs?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1198": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(dog_id) AS number_of_dogs FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(dog_id) AS number_of_dogs FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "number_of_dogs",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Number of dogs for each breed",
      "sort": "desc"
    },
    "nl_queries": [
      "How many dogs are there for each breed?",
      "What is the distribution of dog breeds based on their size?",
      "Which breed has the highest number of dogs?",
      "What is the average weight of dogs for each breed?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Dogs",
      "Professionals",
      "Charges",
      "Treatment_Types",
      "Treatments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1204": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name AS Breed, COUNT(*) AS Number_of_Dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name AS Breed, COUNT(*) AS Number_of_Dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Breed",
      "y_name": "Number_of_Dogs",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Number of dogs for each breed in the kennel",
      "sort": null
    },
    "nl_queries": [
      "How many dogs of each breed are currently in the kennel?",
      "Which breed has the highest number of dogs in the kennel?",
      "What is the distribution of dog breeds in the kennel?",
      "Are there any breeds in the kennel with no dogs currently present?"
    ],
    "irrelevant_tables": [
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1211": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender, COUNT(*) AS num_dorms FROM Dorm GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender, COUNT(*) AS num_dorms FROM Dorm GROUP BY gender"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "num_dorms",
      "x_data": [
        "X",
        "M"
      ],
      "y_data": [
        "2",
        "1"
      ],
      "classify": [],
      "describe": "Number of dorms by gender",
      "sort": null
    },
    "nl_queries": [
      "How many dorms are there for each gender?",
      "What is the student capacity for each gender's dorms?",
      "How many students live in each gender's dorms?",
      "What is the average age of students living in each gender's dorms?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1216": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dorm_name, COUNT(stuid) AS student_count FROM Dorm INNER JOIN Lives_in ON Dorm.dormid = Lives_in.dormid GROUP BY dorm_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dorm_name, COUNT(stuid) AS student_count FROM Dorm INNER JOIN Lives_in ON Dorm.dormid = Lives_in.dormid GROUP BY dorm_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dorm_name",
      "y_name": "student_count",
      "x_data": [
        "Smith Hall",
        "Bud Jones Hall",
        "Fawlty Towers"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of students living in each dorm",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students live in each dorm?",
      "Which dorms have the highest and lowest student populations?",
      "What is the gender distribution of students in the dorms with the highest student populations?",
      "How does the availability of amenities correlate with the dorm student populations?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1223": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dorm_name, COUNT(student_capacity) AS total_capacity FROM Dorm GROUP BY dorm_name ORDER BY total_capacity DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dorm_name, COUNT(student_capacity) AS total_capacity FROM Dorm GROUP BY dorm_name ORDER BY total_capacity DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dorm_name",
      "y_name": "total_capacity",
      "x_data": [
        "Fawlty Towers",
        "Bud Jones Hall",
        "Smith Hall"
      ],
      "y_data": [
        355,
        116,
        85
      ],
      "classify": [],
      "describe": "Total student capacity of each dorm",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total student capacity for each dorm?",
      "Which dorm has the highest student capacity?",
      "How does the total student capacity compare across different dorms?",
      "What is the distribution of student capacities across all dorms?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1229": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Major, COUNT(StuID) AS Student_Count FROM Student GROUP BY Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Major, COUNT(StuID) AS Student_Count FROM Student GROUP BY Major"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "Student_Count",
      "x_data": [
        "600"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of students per major",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the number of students per major.",
      "Show the number of male and female students per major.",
      "Show the age distribution of students in each major.",
      "Show the number of students from each city per major."
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity",
      "Dorm",
      "Lives_in"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1232": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dorm_name, COUNT(stuid) AS student_count FROM Dorm INNER JOIN Lives_in ON Dorm.dormid = Lives_in.dormid GROUP BY dorm_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dorm_name, COUNT(stuid) AS student_count FROM Dorm INNER JOIN Lives_in ON Dorm.dormid = Lives_in.dormid GROUP BY dorm_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dorm_name",
      "y_name": "student_count",
      "x_data": [
        "Smith Hall",
        "Bud Jones Hall",
        "Fawlty Towers"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of students living in each dorm",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are living in each dorm?",
      "Which dorm has the highest number of students?",
      "What is the gender distribution of students in each dorm?",
      "What is the average age of students in each dorm?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1236": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Dorm.dorm_name, COUNT(Lives_in.stuid) AS num_students FROM Dorm LEFT JOIN Lives_in ON Dorm.dormid = Lives_in.dormid GROUP BY Dorm.dorm_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Dorm.dorm_name, COUNT(Lives_in.stuid) AS num_students FROM Dorm LEFT JOIN Lives_in ON Dorm.dormid = Lives_in.dormid GROUP BY Dorm.dorm_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dorm_name",
      "y_name": "num_students",
      "x_data": [
        "Smith Hall",
        "Bud Jones Hall",
        "Fawlty Towers"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of students living in each dorm",
      "sort": null
    },
    "nl_queries": [
      "How many students are living in each dorm?",
      "Which dorm has the highest student capacity?",
      "What is the gender distribution in each dorm?",
      "Which dorms have amenities like TV Lounge or Study Room?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1241": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Major, COUNT(*) AS Student_Count FROM Student GROUP BY Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Major, COUNT(*) AS Student_Count FROM Student GROUP BY Major"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "Student_Count",
      "x_data": [
        "600"
      ],
      "y_data": [
        "3"
      ],
      "classify": [],
      "describe": "The number of students per major",
      "sort": null
    },
    "nl_queries": [
      "How many students are there in each major?",
      "Which major has the highest number of students?",
      "How does the number of students in each major compare?",
      "What is the distribution of students across different majors?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity",
      "Dorm",
      "Lives_in"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1274": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.subject_name, stt.test_result, COUNT(*) AS count FROM Student_Tests_Taken stt JOIN Student_Course_Enrolment sce ON stt.registration_id = sce.registration_id JOIN Courses c ON sce.course_id = c.course_id JOIN Subjects s ON c.subject_id = s.subject_id GROUP BY s.subject_name, stt.test_result",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.subject_name, stt.test_result, COUNT(*) AS count FROM Student_Tests_Taken stt JOIN Student_Course_Enrolment sce ON stt.registration_id = sce.registration_id JOIN Courses c ON sce.course_id = c.course_id JOIN Subjects s ON c.subject_id = s.subject_id GROUP BY s.subject_name, stt.test_result"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "subject_name",
      "y_name": "count",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        10,
        5,
        15,
        3,
        2,
        7
      ],
      "classify": [
        "test_result"
      ],
      "describe": "Number of tests taken per subject categorized by test results",
      "sort": "asc"
    },
    "nl_queries": [
      "How many tests have been taken in each subject, categorized by test results?",
      "What is the distribution of Pass and Fail results within the subject of Computer Science?",
      "Which subject has the highest number of Pass test results?",
      "How does the number of Fail results compare across different subjects?"
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Courses",
      "Subjects",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1275": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT subject_name, COUNT(*) AS number_of_students FROM Students s JOIN Student_Course_Enrolment sce ON s.student_id = sce.student_id JOIN Courses c ON sce.course_id = c.course_id JOIN Subjects sub ON c.subject_id = sub.subject_id GROUP BY subject_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT subject_name, COUNT(*) AS number_of_students FROM Students s JOIN Student_Course_Enrolment sce ON s.student_id = sce.student_id JOIN Courses c ON sce.course_id = c.course_id JOIN Subjects sub ON c.subject_id = sub.subject_id GROUP BY subject_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "subject_name",
      "y_name": "number_of_students",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        3,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of students enrolled in courses by subject",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are enrolled in courses for each subject?",
      "Which subject has the highest number of student enrolments?",
      "How does the distribution of student enrolments across subjects compare?",
      "Are there any subjects with significantly lower enrolment numbers compared to others?"
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Course_Authors_and_Tutors"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1277": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.subject_name, COUNT(sc.course_id) AS course_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment sc ON c.course_id = sc.course_id GROUP BY s.subject_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.subject_name, COUNT(sc.course_id) AS course_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment sc ON c.course_id = sc.course_id GROUP BY s.subject_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "subject_name",
      "y_name": "course_count",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        3,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of courses per subject",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of courses across different subjects?",
      "Which subject has the highest number of courses, and how many?",
      "How does the number of courses in Computer Science compare to Arts?",
      "Are there any subjects with no courses? If so, which ones?"
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Student_Tests_Taken",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1285": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.subject_name, COUNT(e.student_id) AS student_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY s.subject_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.subject_name, COUNT(e.student_id) AS student_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY s.subject_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "subject_name",
      "y_name": "student_count",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        3,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of students enrolled in courses for each subject",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of students enrolled in courses for each subject?",
      "Which subject has the highest number of student enrollments?",
      "What is the comparison of student enrollments between Computer Science and Arts subjects?",
      "How does the number of students enrolled in Language courses compare to other subjects?"
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Course_Authors_and_Tutors",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1288": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.subject_name, COUNT(se.student_id) AS student_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment se ON c.course_id = se.course_id GROUP BY s.subject_name ORDER BY student_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.subject_name, COUNT(se.student_id) AS student_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment se ON c.course_id = se.course_id GROUP BY s.subject_name ORDER BY student_count DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "subject_name",
      "y_name": "student_count",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        10,
        5,
        3
      ],
      "classify": [],
      "describe": "Number of students enrolled in courses per subject",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are enrolled in courses for each subject?",
      "Which subject has the highest number of students enrolled in courses?",
      "What is the distribution of student enrollments across different subjects?",
      "How does student enrollment in courses compare across subjects?"
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Course_Authors_and_Tutors",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1296": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.subject_name, COUNT(e.course_id) AS num_courses FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY s.subject_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.subject_name, COUNT(e.course_id) AS num_courses FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY s.subject_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "subject_name",
      "y_name": "num_courses",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        3,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of courses per subject",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the number of courses available for each subject.",
      "Show the number of students enrolled in each subject.",
      "Show the number of students who have passed courses in each subject.",
      "Compare the number of students who have passed versus failed in each subject."
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Student_Tests_Taken",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1297": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Subjects.subject_name, COUNT(Student_Course_Enrolment.student_id) AS student_count FROM Student_Course_Enrolment JOIN Courses ON Student_Course_Enrolment.course_id = Courses.course_id JOIN Subjects ON Courses.subject_id = Subjects.subject_id GROUP BY Subjects.subject_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Subjects.subject_name, COUNT(Student_Course_Enrolment.student_id) AS student_count FROM Student_Course_Enrolment JOIN Courses ON Student_Course_Enrolment.course_id = Courses.course_id JOIN Subjects ON Courses.subject_id = Subjects.subject_id GROUP BY Subjects.subject_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "subject_name",
      "y_name": "student_count",
      "x_data": [
        "Computer Science",
        "Arts",
        "Language"
      ],
      "y_data": [
        3,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students enrolled in each subject",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of students enrolled in each subject?",
      "Which subject has the highest number of student enrollments?",
      "How does the number of student enrollments in Arts compare to that in Language?",
      "What are the total enrollments in Computer Science?"
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Student_Tests_Taken",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1303": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.County_name AS County, COUNT(e.Election_ID) AS Number_of_Elections FROM election e JOIN county c ON e.Counties_Represented = c.County_Id GROUP BY c.County_name ORDER BY Number_of_Elections DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.County_name AS County, COUNT(e.Election_ID) AS Number_of_Elections FROM election e JOIN county c ON e.Counties_Represented = c.County_Id GROUP BY c.County_name ORDER BY Number_of_Elections DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County",
      "y_name": "Number_of_Elections",
      "x_data": [
        "Baltimore County",
        "Howard",
        "Colony"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of elections held in each county",
      "sort": "desc"
    },
    "nl_queries": [
      "How many elections have been held in each county?",
      "Which county has held the most elections?",
      "What is the total number of elections held across all counties?",
      "How does the number of elections held in Baltimore County compare to other counties?"
    ],
    "irrelevant_tables": [
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1309": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party, COUNT(Election_ID) as Total_Elections FROM election GROUP BY Party",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party, COUNT(Election_ID) as Total_Elections FROM election GROUP BY Party"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "Total_Elections",
      "x_data": [
        "1",
        "2"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of elections per party",
      "sort": null
    },
    "nl_queries": [
      "How many elections have been held for each party?",
      "Which party has had the most elections?",
      "How does the number of elections for Party 1 compare to Party 2?",
      "What is the percentage distribution of elections among the parties?"
    ],
    "irrelevant_tables": [
      "county",
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1310": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party, COUNT(*) AS Number_of_Delegates FROM election GROUP BY Party",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party, COUNT(*) AS Number_of_Delegates FROM election GROUP BY Party"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "Number_of_Delegates",
      "x_data": [
        "1",
        "2"
      ],
      "y_data": [
        "2",
        "1"
      ],
      "classify": [],
      "describe": "Number of Delegates by Party",
      "sort": null
    },
    "nl_queries": [
      "How many delegates belong to each party?",
      "Which party has the most delegates?",
      "What is the proportion of delegates from each party?",
      "How does the number of delegates from each party compare?"
    ],
    "irrelevant_tables": [
      "county"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1314": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Counties_Represented, COUNT(Election_ID) AS Election_Count FROM election GROUP BY Counties_Represented",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Counties_Represented, COUNT(Election_ID) AS Election_Count FROM election GROUP BY Counties_Represented"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Counties_Represented",
      "y_name": "Election_Count",
      "x_data": [
        "09.1 9A",
        "12.1 12A"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of elections by represented counties",
      "sort": "desc"
    },
    "nl_queries": [
      "How many elections have been held in each county?",
      "Which county has the highest number of elections?",
      "Compare the number of elections held in county 09.1 9A and 12.1 12A.",
      "Show the trend of elections over time in the county with the highest number of elections."
    ],
    "irrelevant_tables": [
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1325": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT representative.Name, election.Votes FROM representative JOIN election ON representative.Representative_ID = election.Representative_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT representative.Name, election.Votes FROM representative JOIN election ON representative.Representative_ID = election.Representative_ID"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "election_representative",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Votes",
      "x_data": [
        "Dan Quayle",
        "John Quayle"
      ],
      "y_data": [
        9423.0,
        11059.0
      ],
      "classify": [],
      "describe": "Votes received by each representative in the election",
      "sort": null
    },
    "nl_queries": [
      "Show me the number of votes received by each representative in the election.",
      "Compare the votes received by representatives from different parties.",
      "Identify the representative with the highest votes and their party.",
      "Analyze the vote percentage and seats won by representatives with the highest votes."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1376": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, AVG(rating) AS avg_rating FROM useracct JOIN review ON useracct.u_id = review.u_id GROUP BY name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, AVG(rating) AS avg_rating FROM useracct JOIN review ON useracct.u_id = review.u_id GROUP BY name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "epinions_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "avg_rating",
      "x_data": [
        "Helen",
        "Mark"
      ],
      "y_data": [
        8.5,
        5
      ],
      "classify": [],
      "describe": "Average rating given by each user",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average rating given by each user?",
      "Which user has given the highest average rating?",
      "How does the average rating given by users compare?",
      "Identify any trends in user ratings based on the average."
    ],
    "irrelevant_tables": [
      "trust",
      "item"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1389": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Official_Name AS City, COUNT(fc.Competition_ID) AS Competitions_Hosted FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID GROUP BY c.Official_Name ORDER BY Competitions_Hosted DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Official_Name AS City, COUNT(fc.Competition_ID) AS Competitions_Hosted FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID GROUP BY c.Official_Name ORDER BY Competitions_Hosted DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "farm",
    "vis_obj": {
      "chart": "bar",
      "x_name": "City",
      "y_name": "Competitions_Hosted",
      "x_data": [
        "Grand Falls/Grand-Sault",
        "Perth-Andover",
        "Plaster Rock"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of competitions hosted by each city",
      "sort": "desc"
    },
    "nl_queries": [
      "Which city has hosted the most farm competitions?",
      "How many competitions has each city hosted?",
      "What is the distribution of hosted competitions among the cities?",
      "Can we see a bar chart showing the number of competitions hosted per city?"
    ],
    "irrelevant_tables": [
      "farm",
      "competition_record"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1392": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT f.Title AS film_title, SUM(fme.Low_Estimate) AS total_low_estimate FROM film_market_estimation fme JOIN film f ON fme.Film_ID = f.Film_ID GROUP BY f.Title",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT f.Title AS film_title, SUM(fme.Low_Estimate) AS total_low_estimate FROM film_market_estimation fme JOIN film f ON fme.Film_ID = f.Film_ID GROUP BY f.Title"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "film_rank",
    "vis_obj": {
      "chart": "bar",
      "x_name": "film_title",
      "y_name": "total_low_estimate",
      "x_data": [
        "ET the Extra-Terrestrial",
        "Tootsie",
        "An Officer and a Gentleman"
      ],
      "y_data": [
        80000.0,
        8000.0,
        3000.0
      ],
      "classify": [],
      "describe": "Summing the low market estimates for each film",
      "sort": null
    },
    "nl_queries": [
      "What is the total low market estimate for each film?",
      "How does the high market estimate compare to the low market estimate for each film?",
      "Which studio has the highest total low market estimate across all its films?",
      "What is the total gross revenue for films from the studio with the highest low market estimate?"
    ],
    "irrelevant_tables": [
      "market"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1395": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT f.Title, m.Country, SUM(f.Gross_in_dollar) AS Total_Gross FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID JOIN market m ON fme.Market_ID = m.Market_ID GROUP BY f.Title, m.Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT f.Title, m.Country, SUM(f.Gross_in_dollar) AS Total_Gross FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID JOIN market m ON fme.Market_ID = m.Market_ID GROUP BY f.Title, m.Country"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "film_rank",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Title",
      "y_name": "Total_Gross",
      "x_data": [
        "ET the Extra-Terrestrial",
        "Tootsie",
        "An Officer and a Gentleman"
      ],
      "y_data": [
        435110554,
        177200000,
        129795554
      ],
      "classify": [
        "Country"
      ],
      "describe": "Total gross revenue of films by title and country",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total gross revenue of each film by title and country?",
      "How does the total gross revenue of 'ET the Extra-Terrestrial' compare across different countries?",
      "Which country contributed the most to the gross revenue of the film 'Tootsie'?",
      "Compare the total gross revenue of all films in the USA."
    ],
    "irrelevant_tables": [
      "market"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1398": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT film.Title AS Title, SUM(film_market_estimation.Low_Estimate) AS Low_Estimate FROM film_market_estimation INNER JOIN film ON film_market_estimation.Film_ID = film.Film_ID GROUP BY film.Title",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT film.Title AS Title, SUM(film_market_estimation.Low_Estimate) AS Low_Estimate FROM film_market_estimation INNER JOIN film ON film_market_estimation.Film_ID = film.Film_ID GROUP BY film.Title"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "film_rank",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Title",
      "y_name": "Low_Estimate",
      "x_data": [
        "ET the Extra-Terrestrial",
        "Tootsie",
        "An Officer and a Gentleman"
      ],
      "y_data": [
        80000.0,
        8000.0,
        3000.0
      ],
      "classify": [],
      "describe": "Comparison of the low estimate values of different films",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the low estimate value for each film?",
      "Which film has the highest low estimate value?",
      "Compare the low estimate values of the films.",
      "Sort the films by their low estimate values in ascending order."
    ],
    "irrelevant_tables": [
      "market"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1400": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT origin, SUM(price) AS total_revenue FROM flight GROUP BY origin",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT origin, SUM(price) AS total_revenue FROM flight GROUP BY origin"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "origin",
      "y_name": "total_revenue",
      "x_data": [
        "Los Angeles",
        "Los Angeles",
        "Los Angeles"
      ],
      "y_data": [
        638.96,
        638.96,
        638.96
      ],
      "classify": [],
      "describe": "Total revenue from flights originating from different locations",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total revenue generated from flights originating from each location?",
      "Which location generates the highest total revenue from flights?",
      "What is the average price of flights originating from the location with the highest revenue?",
      "How many flights originate from the location with the highest revenue and what is their total distance?"
    ],
    "irrelevant_tables": [
      "employee",
      "certificate",
      "aircraft"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1408": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT origin, COUNT(flno) AS num_flights FROM flight GROUP BY origin",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT origin, COUNT(flno) AS num_flights FROM flight GROUP BY origin"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "origin",
      "y_name": "num_flights",
      "x_data": [
        "Los Angeles"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of flights originating from each city.",
      "sort": null
    },
    "nl_queries": [
      "What is the number of flights originating from each city?",
      "What is the average price of flights originating from each city?",
      "How many flights are operated by each aircraft type?",
      "What is the total distance covered by each aircraft type?"
    ],
    "irrelevant_tables": [
      "employee",
      "certificate"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1411": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT origin, COUNT(flight.flno) AS number_of_flights FROM flight GROUP BY origin ORDER BY number_of_flights DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT origin, COUNT(flight.flno) AS number_of_flights FROM flight GROUP BY origin ORDER BY number_of_flights DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "origin",
      "y_name": "number_of_flights",
      "x_data": [
        "Los Angeles"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of flights originating from each city",
      "sort": "desc"
    },
    "nl_queries": [
      "How many flights originate from each city?",
      "Which city has the highest number of originating flights?",
      "What is the average price of flights originating from the city with the highest number of flights?",
      "Compare the average prices of flights originating from different cities."
    ],
    "irrelevant_tables": [
      "employee",
      "certificate",
      "aircraft"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1434": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT drivers.nationality, constructors.name AS constructor, SUM(results.points) AS total_points FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId GROUP BY drivers.nationality, constructors.name ORDER BY total_points DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT drivers.nationality, constructors.name AS constructor, SUM(results.points) AS total_points FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId GROUP BY drivers.nationality, constructors.name ORDER BY total_points DESC"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "formula_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "nationality",
      "y_name": "total_points",
      "x_data": [
        "British",
        "German"
      ],
      "y_data": [
        34.0,
        17.0
      ],
      "classify": [
        "constructor"
      ],
      "describe": "This visualization shows the total points scored by drivers of different nationalities, broken down by constructor. It provides an overview of the contribution of each constructor to the drivers' total points within each nationality.",
      "sort": "desc"
    },
    "nl_queries": [
      "Which nationality has the highest total points in Formula 1 races, and which constructors contributed to these points?",
      "For the top nationality, what are the individual contributions of each constructor to the total points?",
      "How do the constructors' contributions to total points compare across different nationalities?",
      "Which constructors have the most consistent performance across different nationalities in terms of total points scored?"
    ],
    "irrelevant_tables": [
      "status",
      "seasons",
      "pitStops",
      "qualifying",
      "circuits",
      "lapTimes",
      "driverStandings",
      "constructorStandings",
      "races"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1435": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT constructors.name AS constructor_name, SUM(constructorStandings.points) AS total_points FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId GROUP BY constructors.name ORDER BY total_points DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT constructors.name AS constructor_name, SUM(constructorStandings.points) AS total_points FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId GROUP BY constructors.name ORDER BY total_points DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "formula_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "constructor_name",
      "y_name": "total_points",
      "x_data": [
        "McLaren",
        "Williams",
        "BMW Sauber"
      ],
      "y_data": [
        14.0,
        9.0,
        8.0
      ],
      "classify": [],
      "describe": "Total points for each constructor",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total points for each constructor?",
      "Which constructor has the highest total points?",
      "How many points does McLaren have compared to other constructors?",
      "What is the difference in total points between the top two constructors?"
    ],
    "irrelevant_tables": [
      "status",
      "seasons",
      "drivers",
      "races",
      "pitStops",
      "constructorResults",
      "qualifying",
      "circuits",
      "results",
      "lapTimes",
      "driverStandings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1482": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Home_team, COUNT(*) AS Number_of_Injuries FROM game INNER JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY Home_team",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Home_team, COUNT(*) AS Number_of_Injuries FROM game INNER JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY Home_team"
    },
    "reasoning_level": "L3",
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Home_team",
      "y_name": "Number_of_Injuries",
      "x_data": [
        "Quruvchi",
        "Pakhtakor"
      ],
      "y_data": [
        "1",
        "2"
      ],
      "classify": [],
      "describe": "Number of injuries per home team",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of injuries experienced by each home team?",
      "Which home team had the most injuries and in which stadium did they occur?",
      "What is the average attendance for games where injuries occurred for the team with the most injuries?",
      "How does the capacity percentage of stadiums correlate with the number of injuries for the team with the most injuries?"
    ],
    "irrelevant_tables": [
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1496": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, Average_Attendance FROM stadium",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, Average_Attendance FROM stadium"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "Average_Attendance",
      "x_data": [
        "Cowboys Stadium",
        "FedExField",
        "New Meadowlands Stadium"
      ],
      "y_data": [
        87047.0,
        83172.0,
        79019.0
      ],
      "classify": [],
      "describe": "Average attendance at each stadium",
      "sort": null
    },
    "nl_queries": [
      "What is the average attendance at each stadium?",
      "Compare the total attendance at each stadium.",
      "How many home games were played at each stadium?",
      "What is the capacity percentage for each stadium?"
    ],
    "irrelevant_tables": [
      "injury_accident",
      "game"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1509": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Company, Sales_billion FROM company ORDER BY Sales_billion DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Company, Sales_billion FROM company ORDER BY Sales_billion DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company",
      "y_name": "Sales_billion",
      "x_data": [
        "Royal Dutch Shell",
        "ExxonMobil",
        "General Electric"
      ],
      "y_data": [
        470.2,
        433.5,
        147.3
      ],
      "classify": [],
      "describe": "Comparison of sales across companies",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the sales figures of different companies?",
      "How do the profits compare to the sales of the top companies?",
      "Which companies have the highest market value and how does it relate to their sales?",
      "What is the relationship between the assets and market value of these companies?"
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1520": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Total_Points FROM people INNER JOIN gymnast ON people.People_ID = gymnast.Gymnast_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Total_Points FROM people INNER JOIN gymnast ON people.People_ID = gymnast.Gymnast_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "gymnast",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Total_Points",
      "x_data": [
        "Paul Hamm",
        "Lorraine Súarez Carmona"
      ],
      "y_data": [
        58.061,
        57.924
      ],
      "classify": [],
      "describe": "Total Points scored by each gymnast",
      "sort": null
    },
    "nl_queries": [
      "What are the total points scored by each gymnast?",
      "Which gymnast scored the highest total points?",
      "How do the total points compare between Paul Hamm and Lorraine Súarez Carmona?",
      "What is the distribution of total points among all gymnasts?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1522": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Name AS Department, COUNT(DISTINCT a.Patient) AS PatientCount FROM Appointment a JOIN Physician p ON a.Physician = p.EmployeeID JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID GROUP BY d.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Name AS Department, COUNT(DISTINCT a.Patient) AS PatientCount FROM Appointment a JOIN Physician p ON a.Physician = p.EmployeeID JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID GROUP BY d.Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Department",
      "y_name": "PatientCount",
      "x_data": [
        "General Medicine",
        "Surgery",
        "Psychiatry"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of patients per department based on appointments",
      "sort": null
    },
    "nl_queries": [
      "How many patients have appointments in each department?",
      "Which physicians have the highest number of appointments in each department?",
      "What are the details of stays for patients with appointments in the Surgery department?",
      "What medications are prescribed to patients with stays in the Surgery department?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Medication",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Undergoes",
      "Appointment",
      "Patient"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1527": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Physician.Name AS Physician_Name, COUNT(Undergoes.Procedures) AS Procedure_Count FROM Undergoes INNER JOIN Physician ON Undergoes.Physician = Physician.EmployeeID GROUP BY Physician.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Physician.Name AS Physician_Name, COUNT(Undergoes.Procedures) AS Procedure_Count FROM Undergoes INNER JOIN Physician ON Undergoes.Physician = Physician.EmployeeID GROUP BY Physician.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Physician_Name",
      "y_name": "Procedure_Count",
      "x_data": [
        "John Dorian",
        "Christopher Turk"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of procedures performed by each physician",
      "sort": null
    },
    "nl_queries": [
      "How many procedures were performed by each physician?",
      "Which physician performed the most procedures?",
      "What is the distribution of procedures performed by physicians over different dates?",
      "How does the number of procedures performed by physicians correlate with their primary affiliation with departments?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Nurse",
      "Block",
      "Medication",
      "Prescribes",
      "Stay",
      "Affiliated_With",
      "Appointment",
      "Patient",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1528": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Name AS PhysicianName, COUNT(u.Procedures) AS ProcedureCount FROM Physician p JOIN Undergoes u ON p.EmployeeID = u.Physician GROUP BY p.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Name AS PhysicianName, COUNT(u.Procedures) AS ProcedureCount FROM Physician p JOIN Undergoes u ON p.EmployeeID = u.Physician GROUP BY p.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PhysicianName",
      "y_name": "ProcedureCount",
      "x_data": [
        "John Dorian",
        "Christopher Turk"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of procedures performed by each physician",
      "sort": "desc"
    },
    "nl_queries": [
      "How many procedures were performed by each physician?",
      "Which physician performed the most procedures?",
      "What is the distribution of procedures among physicians?",
      "How does the number of procedures compare between physicians?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Nurse",
      "Block",
      "Medication",
      "Prescribes",
      "Stay",
      "Affiliated_With",
      "Appointment",
      "Patient",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1529": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Name AS PatientName, COUNT(u.Procedures) AS ProcedureCount FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient GROUP BY p.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Name AS PatientName, COUNT(u.Procedures) AS ProcedureCount FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient GROUP BY p.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PatientName",
      "y_name": "ProcedureCount",
      "x_data": [
        "John Smith",
        "Grace Ritchie"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of procedures undergone by each patient",
      "sort": "desc"
    },
    "nl_queries": [
      "How many procedures did each patient undergo?",
      "Which patient underwent the highest number of procedures?",
      "What is the distribution of procedures among patients?",
      "Are there any patients who underwent the same number of procedures?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Medication",
      "Physician",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Affiliated_With",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1530": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Name AS PatientName, COUNT(u.Procedures) AS ProcedureCount FROM Undergoes u JOIN Patient p ON u.Patient = p.SSN GROUP BY p.Name ORDER BY ProcedureCount DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Name AS PatientName, COUNT(u.Procedures) AS ProcedureCount FROM Undergoes u JOIN Patient p ON u.Patient = p.SSN GROUP BY p.Name ORDER BY ProcedureCount DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PatientName",
      "y_name": "ProcedureCount",
      "x_data": [
        "John Smith",
        "Random J. Patient"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "This bar chart shows the number of procedures undergone by each patient.",
      "sort": "desc"
    },
    "nl_queries": [
      "How many procedures has each patient undergone?",
      "Which patient has undergone the most procedures?",
      "What is the total number of procedures performed by each physician?",
      "Which physician has performed the most procedures?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Medication",
      "Physician",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Affiliated_With",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1531": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Department.Name AS Department, COUNT(U.Patient) AS NumberOfProcedures FROM Undergoes U JOIN Affiliated_With A ON U.Physician = A.Physician JOIN Department ON A.Department = Department.DepartmentID GROUP BY Department.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Department.Name AS Department, COUNT(U.Patient) AS NumberOfProcedures FROM Undergoes U JOIN Affiliated_With A ON U.Physician = A.Physician JOIN Department ON A.Department = Department.DepartmentID GROUP BY Department.Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Department",
      "y_name": "NumberOfProcedures",
      "x_data": [
        "General Medicine",
        "Surgery",
        "Psychiatry"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of procedures performed by each department",
      "sort": null
    },
    "nl_queries": [
      "How many procedures are performed by each department?",
      "Which physicians are performing the most procedures in the Surgery department?",
      "What is the average cost of procedures performed by Dr. Christopher Turk?",
      "Which patients have been prescribed medications after undergoing procedures by Dr. Christopher Turk?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Physician",
      "Trained_In",
      "Stay",
      "Appointment",
      "Patient",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1534": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT Department.Name AS DepartmentName, Procedures.Name AS ProcedureName, COUNT(Undergoes.Patient) AS NumberOfProcedures FROM Undergoes JOIN Physician ON Undergoes.Physician = Physician.EmployeeID JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID JOIN Procedures ON Undergoes.Procedures = Procedures.Code GROUP BY Department.Name, Procedures.Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT Department.Name AS DepartmentName, Procedures.Name AS ProcedureName, COUNT(Undergoes.Patient) AS NumberOfProcedures FROM Undergoes JOIN Physician ON Undergoes.Physician = Physician.EmployeeID JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID JOIN Procedures ON Undergoes.Procedures = Procedures.Code GROUP BY Department.Name, Procedures.Name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "DepartmentName",
      "y_name": "NumberOfProcedures",
      "x_data": [
        "General Medicine",
        "Surgery"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [
        "ProcedureName"
      ],
      "describe": "This visualization shows the number of procedures performed in each department, categorized by the type of procedure.",
      "sort": null
    },
    "nl_queries": [
      "Show the number of procedures performed in each department, categorized by the type of procedure.",
      "Among the procedures performed in the Surgery department, which procedure is the most common?",
      "How does the number of procedures in the General Medicine department compare to those in the Surgery department?",
      "Identify the department that performs the highest number of 'Reverse Rhinopodoplasty' procedures."
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Nurse",
      "Medication",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Affiliated_With",
      "Appointment",
      "Block"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1535": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT p.Name AS PatientName, pr.Name AS ProcedureName, COUNT(u.Procedures) AS ProcedureCount FROM Undergoes u JOIN Patient p ON u.Patient = p.SSN JOIN Procedures pr ON u.Procedures = pr.Code GROUP BY p.Name, pr.Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT p.Name AS PatientName, pr.Name AS ProcedureName, COUNT(u.Procedures) AS ProcedureCount FROM Undergoes u JOIN Patient p ON u.Patient = p.SSN JOIN Procedures pr ON u.Procedures = pr.Code GROUP BY p.Name, pr.Name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "PatientName",
      "y_name": "ProcedureCount",
      "x_data": [
        "John Smith",
        "John Smith",
        "Random J. Patient"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [
        "ProcedureName"
      ],
      "describe": "Number of procedures undergone by each patient",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the number of procedures each patient has undergone.",
      "Break down the procedures by type for each patient.",
      "Identify which procedures are most common among patients.",
      "Compare the distribution of different procedures among patients."
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Nurse",
      "Block",
      "Medication",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Affiliated_With",
      "Appointment",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1537": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.DEPARTMENT_ID, d.DEPARTMENT_NAME, AVG(e.SALARY) AS AVG_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY e.DEPARTMENT_ID, d.DEPARTMENT_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.DEPARTMENT_ID, d.DEPARTMENT_NAME, AVG(e.SALARY) AS AVG_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY e.DEPARTMENT_ID, d.DEPARTMENT_NAME"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPARTMENT_NAME",
      "y_name": "AVG_SALARY",
      "x_data": [
        "Administration",
        "Marketing",
        "Purchasing"
      ],
      "y_data": [
        5000,
        7000,
        6000
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": null
    },
    "nl_queries": [
      "What is the average salary in each department?",
      "How does the average salary in the Administration department compare to other departments?",
      "Which department has the highest average salary and how much is it?",
      "What is the distribution of average salaries across different departments?"
    ],
    "irrelevant_tables": [
      "locations",
      "regions",
      "countries",
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1556": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT COUNTRY_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY COUNTRY_NAME ORDER BY EMPLOYEE_COUNT DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT COUNTRY_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY COUNTRY_NAME ORDER BY EMPLOYEE_COUNT DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "COUNTRY_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Italy",
        "Japan"
      ],
      "y_data": [
        3,
        1
      ],
      "classify": [],
      "describe": "Number of employees per country",
      "sort": "desc"
    },
    "nl_queries": [
      "How many employees are there in each country?",
      "Which country has the highest number of employees?",
      "What is the distribution of employees across different countries?",
      "Are there significant differences in employee counts between countries?"
    ],
    "irrelevant_tables": [
      "regions",
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1563": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPARTMENT_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Administration",
        "Marketing",
        "Purchasing"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of employees per department",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the number of employees in each department?",
      "Which department has the highest number of employees?",
      "How does the number of employees in the Administration department compare to other departments?",
      "Can we see the trend of employee count changes over time in the department with the highest number?"
    ],
    "irrelevant_tables": [
      "locations",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1611": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.DEPARTMENT_NAME, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME ORDER BY TOTAL_SALARY DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.DEPARTMENT_NAME, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME ORDER BY TOTAL_SALARY DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPARTMENT_NAME",
      "y_name": "TOTAL_SALARY",
      "x_data": [
        "Administration",
        "Marketing",
        "Purchasing"
      ],
      "y_data": [
        24000,
        17000,
        0
      ],
      "classify": [],
      "describe": "Total salary distribution across departments",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total salary distribution across different departments?",
      "Which department has the highest total salary?",
      "How does the total salary of the Administration department compare to other departments?",
      "Can we see the total salary distribution across all departments in descending order?"
    ],
    "irrelevant_tables": [
      "locations",
      "regions",
      "countries",
      "job_history",
      "jobs"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1652": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.JOB_ID, j.JOB_TITLE, AVG(e.SALARY) AS AVG_SALARY FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID GROUP BY e.JOB_ID, j.JOB_TITLE ORDER BY AVG_SALARY DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.JOB_ID, j.JOB_TITLE, AVG(e.SALARY) AS AVG_SALARY FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID GROUP BY e.JOB_ID, j.JOB_TITLE ORDER BY AVG_SALARY DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_TITLE",
      "y_name": "AVG_SALARY",
      "x_data": [
        "President",
        "Administration Vice President",
        "Administration Assistant"
      ],
      "y_data": [
        24000,
        17000,
        0
      ],
      "classify": [],
      "describe": "Average salary by job title",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each job title?",
      "How do the salaries compare between different job titles?",
      "Which job title has the highest average salary?",
      "What is the distribution of salaries for different job titles in descending order?"
    ],
    "irrelevant_tables": [
      "locations",
      "departments",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1690": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.COUNTRY_NAME AS Country, SUM(e.SALARY) AS Total_Salary FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY c.COUNTRY_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.COUNTRY_NAME AS Country, SUM(e.SALARY) AS Total_Salary FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY c.COUNTRY_NAME"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Total_Salary",
      "x_data": [
        "Italy",
        "Japan"
      ],
      "y_data": [
        58000,
        17000
      ],
      "classify": [],
      "describe": "Total salary distribution by country",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total salary distribution by country?",
      "How does the total salary compare across different regions?",
      "Which departments contribute the most to the total salary within each region?",
      "How do the total salaries vary by job titles within the top contributing departments?"
    ],
    "irrelevant_tables": [
      "regions",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1715": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.JOB_ID, j.JOB_TITLE, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID GROUP BY e.JOB_ID, j.JOB_TITLE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.JOB_ID, j.JOB_TITLE, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID GROUP BY e.JOB_ID, j.JOB_TITLE"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_TITLE",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "President",
        "Administration Vice President"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of employees in each job title",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of employees in each job title?",
      "Which job title has the highest number of employees?",
      "How does the employee count vary across different job titles?",
      "Can you show the job titles with fewer than 2 employees?"
    ],
    "irrelevant_tables": [
      "locations",
      "departments",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1741": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.DEPARTMENT_ID, d.DEPARTMENT_NAME, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY e.DEPARTMENT_ID, d.DEPARTMENT_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.DEPARTMENT_ID, d.DEPARTMENT_NAME, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY e.DEPARTMENT_ID, d.DEPARTMENT_NAME"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPARTMENT_NAME",
      "y_name": "TOTAL_SALARY",
      "x_data": [
        "Administration",
        "Marketing",
        "Purchasing"
      ],
      "y_data": [
        24000,
        17000,
        17000
      ],
      "classify": [],
      "describe": "Aggregated total salary by department",
      "sort": null
    },
    "nl_queries": [
      "What is the total salary expense for each department?",
      "How does the total salary expense compare across departments?",
      "Which department has the highest total salary expense?",
      "What are the salary expenses in departments managed by Steven King?"
    ],
    "irrelevant_tables": [
      "locations",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1807": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT REGION_NAME, COUNT(COUNTRY_ID) AS COUNTRY_COUNT FROM countries JOIN regions ON countries.REGION_ID = regions.REGION_ID GROUP BY REGION_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT REGION_NAME, COUNT(COUNTRY_ID) AS COUNTRY_COUNT FROM countries JOIN regions ON countries.REGION_ID = regions.REGION_ID GROUP BY REGION_NAME"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "REGION_NAME",
      "y_name": "COUNTRY_COUNT",
      "x_data": [
        "Europe",
        "Americas",
        "Asia"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of countries by region",
      "sort": "asc"
    },
    "nl_queries": [
      "How many countries are there in each region?",
      "Which region has the most countries?",
      "How does the number of countries per region compare?",
      "What is the proportion of countries in each region?"
    ],
    "irrelevant_tables": [
      "locations",
      "departments",
      "jobs",
      "job_history",
      "employees"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1839": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.COUNTRY_NAME, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY c.COUNTRY_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.COUNTRY_NAME, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY c.COUNTRY_NAME"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "COUNTRY_NAME",
      "y_name": "TOTAL_SALARY",
      "x_data": [
        "Italy",
        "Japan"
      ],
      "y_data": [
        58000,
        17000
      ],
      "classify": [],
      "describe": "Total salary distribution across countries",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total salary distribution across different countries?",
      "How does the total salary distribution look like when segmented by department?",
      "Which departments have the highest total salary within each country?",
      "What is the trend of total salary over time within the top-paying departments in each country?"
    ],
    "irrelevant_tables": [
      "regions",
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1966": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT decor, COUNT(*) AS RoomCount FROM Rooms GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT decor, COUNT(*) AS RoomCount FROM Rooms GROUP BY decor"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "decor",
      "y_name": "RoomCount",
      "x_data": [
        "modern",
        "traditional"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of rooms by decor style",
      "sort": null
    },
    "nl_queries": [
      "What is the count of rooms by decor style?",
      "What is the average base price by decor style?",
      "What is the total maximum occupancy by decor style?",
      "What is the average bed count by decor style?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1968": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT roomName, AVG(Rate) AS avgRate FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT roomName, AVG(Rate) AS avgRate FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "roomName",
      "y_name": "avgRate",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        150.0,
        150.0,
        0
      ],
      "classify": [],
      "describe": "Average rate per room",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average rate for each room?",
      "How does the average rate for each room compare?",
      "Which room has the highest average rate?",
      "What is the difference in average rates between the rooms?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1971": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT r.roomName AS Room, r.bedType AS BedType, COUNT(res.Code) AS Reservations FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName, r.bedType",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT r.roomName AS Room, r.bedType AS BedType, COUNT(res.Code) AS Reservations FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName, r.bedType"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Room",
      "y_name": "Reservations",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [
        "BedType"
      ],
      "describe": "Number of reservations per room type, classified by bed type",
      "sort": "asc"
    },
    "nl_queries": [
      "How many reservations are made for each room type, classified by bed type?",
      "What is the distribution of room types based on bed types?",
      "Which room type with a specific bed type has the highest number of reservations?",
      "Compare the popularity of room types based on different bed types."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1972": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT CheckIn, LastName, SUM(Rate) AS TotalRate FROM Reservations GROUP BY CheckIn, LastName",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT CheckIn, LastName, SUM(Rate) AS TotalRate FROM Reservations GROUP BY CheckIn, LastName"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "CheckIn",
      "y_name": "TotalRate",
      "x_data": [
        "23-OCT-10",
        "19-SEP-10",
        "30-SEP-10"
      ],
      "y_data": [
        100.0,
        150.0,
        150.0
      ],
      "classify": [
        "LastName"
      ],
      "describe": "Total Rate by Check-In Date and Last Name",
      "sort": null
    },
    "nl_queries": [
      "Show the total rate for each check-in date, grouped by last name.",
      "Compare the total rate by check-in date, and identify which last names contribute the most to the total rate.",
      "Analyze the pattern of reservations over different check-in dates and total rates.",
      "Investigate if there is any correlation between the check-in dates and the total rate contributed by different last names."
    ],
    "irrelevant_tables": [
      "Rooms"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1973": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT r.roomName, COUNT(res.Code) AS reservation_count FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT r.roomName, COUNT(res.Code) AS reservation_count FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "roomName",
      "y_name": "reservation_count",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Count of reservations per room",
      "sort": "desc"
    },
    "nl_queries": [
      "How many reservations does each room have?",
      "Which room has the highest number of reservations?",
      "What is the average number of reservations per room?",
      "Is there a correlation between room type (decor) and the number of reservations?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1974": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT roomName, COUNT(*) AS reservation_count FROM Reservations INNER JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT roomName, COUNT(*) AS reservation_count FROM Reservations INNER JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "roomName",
      "y_name": "reservation_count",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of reservations per room",
      "sort": null
    },
    "nl_queries": [
      "How many reservations are there per room?",
      "Which room has the highest number of reservations?",
      "What is the total number of reservations across all rooms?",
      "What is the distribution of reservations across different rooms?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1975": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT roomName AS Room, COUNT(*) AS Reservations FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT roomName AS Room, COUNT(*) AS Reservations FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Room",
      "y_name": "Reservations",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of reservations per room type",
      "sort": null
    },
    "nl_queries": [
      "How many reservations does each room type have?",
      "What is the average rate for each room type?",
      "How many adults and kids are typically staying in each room type?",
      "What is the total revenue generated by each room type?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1976": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT roomName, COUNT(*) AS reservationCount FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT roomName, COUNT(*) AS reservationCount FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "roomName",
      "y_name": "reservationCount",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of reservations per room",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of reservations for each room?",
      "What is the total revenue generated by each room type?",
      "How does the average rate per reservation vary across different room types?",
      "What is the distribution of adult and kid guests across different room types?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1980": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT roomName, COUNT(*) AS reservation_count FROM Reservations INNER JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT roomName, COUNT(*) AS reservation_count FROM Reservations INNER JOIN Rooms ON Reservations.Room = Rooms.RoomId GROUP BY roomName"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "roomName",
      "y_name": "reservation_count",
      "x_data": [
        "Recluse and defiance",
        "Interim but salutary",
        "Abscond or bolster"
      ],
      "y_data": [
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of reservations per room",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total number of reservations for each room?",
      "Which room has the highest number of reservations?",
      "What is the distribution of reservations across different room decor styles?",
      "How does the reservation count differ based on the number of beds in each room?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1990": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Customer_name, COUNT(p.Policy_ID) AS Number_of_Policies FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID JOIN First_Notification_of_Loss fnol ON cp.Policy_ID = fnol.Policy_ID GROUP BY c.Customer_name ORDER BY Number_of_Policies DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Customer_name, COUNT(p.Policy_ID) AS Number_of_Policies FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID JOIN First_Notification_of_Loss fnol ON cp.Policy_ID = fnol.Policy_ID GROUP BY c.Customer_name ORDER BY Number_of_Policies DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_fnol",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Customer_name",
      "y_name": "Number_of_Policies",
      "x_data": [
        "Ellsworth Paucek"
      ],
      "y_data": [
        2
      ],
      "classify": [],
      "describe": "Number of policies per customer",
      "sort": "desc"
    },
    "nl_queries": [
      "How many policies does each customer have?",
      "Which customer has the most policies?",
      "How does the number of policies per customer vary?",
      "Are there any customers with the same number of policies?"
    ],
    "irrelevant_tables": [
      "Claims",
      "Available_Policies",
      "Settlements",
      "Services"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2005": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims INNER JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims INNER JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Total_Amount_Claimed",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        113856,
        79134
      ],
      "classify": [],
      "describe": "Total amount claimed per policy type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount claimed for each policy type?",
      "How does the total amount claimed compare between 'Car' and 'Life' policy types?",
      "Which policy type has the highest total amount claimed?",
      "Can we see the percentage distribution of the total amount claimed across different policy types?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Settlements",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2012": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made, SUM(Amount_Payment) as Total_Payment FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_Payment_Made, SUM(Amount_Payment) as Total_Payment FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made"
    },
    "reasoning_level": "L4",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_Payment_Made",
      "y_name": "Total_Payment",
      "x_data": [
        "2017-05-28",
        "2017-06-24",
        "2018-02-16"
      ],
      "y_data": [
        448613,
        456098,
        241730
      ],
      "classify": [],
      "describe": "Trend of total payments made over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total amount of payments made over time?",
      "How does the total amount of payments change over different periods?",
      "Are there any noticeable trends or patterns in the payment amounts over time?",
      "Can we identify any specific dates with unusually high or low payment amounts?"
    ],
    "irrelevant_tables": [
      "Claims",
      "Customers",
      "Customer_Policies",
      "Settlements"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2013": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, AVG(Amount_Settled) AS Average_Settled_Amount FROM Customer_Policies cp JOIN Claims c ON cp.Policy_ID = c.Policy_ID GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, AVG(Amount_Settled) AS Average_Settled_Amount FROM Customer_Policies cp JOIN Claims c ON cp.Policy_ID = c.Policy_ID GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Average_Settled_Amount",
      "x_data": [
        "Car",
        "Life",
        "Home"
      ],
      "y_data": [
        1500,
        1700,
        1200
      ],
      "classify": [],
      "describe": "Comparison of average amount settled by policy type",
      "sort": null
    },
    "nl_queries": [
      "What is the average amount settled for each type of insurance policy?",
      "How does the average settled amount for car insurance compare to life insurance?",
      "Which type of insurance policy has the highest average settled amount?",
      "What is the trend in the average settled amount for home insurance?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Settlements",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2014": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Customer_Policies.Policy_Type_Code, AVG(Claims.Amount_Settled) AS Avg_Settled FROM Claims JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Customer_Policies.Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Customer_Policies.Policy_Type_Code, AVG(Claims.Amount_Settled) AS Avg_Settled FROM Claims JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Customer_Policies.Policy_Type_Code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Avg_Settled",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        1137,
        1575
      ],
      "classify": [],
      "describe": "Average amount settled per policy type",
      "sort": "null"
    },
    "nl_queries": [
      "What is the average amount settled for each policy type?",
      "How does the average amount settled compare between Car and Life insurance policies?",
      "Which policy type has the highest average settlement amount?",
      "Can we visualize the average settlement amount for each policy type in a bar chart?"
    ],
    "irrelevant_tables": [
      "Settlements",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2015": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Settled, SUM(Amount_Settled) AS Total_Settled_Amount FROM Claims GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_Claim_Settled, SUM(Amount_Settled) AS Total_Settled_Amount FROM Claims GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled"
    },
    "reasoning_level": "L2",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_Claim_Settled",
      "y_name": "Total_Settled_Amount",
      "x_data": [
        "2017-11-03",
        "2018-01-21",
        "2018-01-27"
      ],
      "y_data": [
        1085,
        1189,
        1724
      ],
      "classify": [],
      "describe": "Trend of total amount settled over time.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the trend of the total amount settled over time?",
      "How does the total amount settled change on a monthly basis?",
      "Which month has the highest total amount settled?",
      "Compare the total settled amounts in different months."
    ],
    "irrelevant_tables": [
      "Customers",
      "Customer_Policies",
      "Settlements",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2018": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code AS PolicyType, COUNT(Policy_ID) AS PolicyCount FROM Customer_Policies GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code AS PolicyType, COUNT(Policy_ID) AS PolicyCount FROM Customer_Policies GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PolicyType",
      "y_name": "PolicyCount",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of policies by type",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of each type of insurance policy?",
      "What is the total amount claimed for each type of policy?",
      "What is the total amount settled for each type of policy?",
      "What is the average settlement amount per claim for each type of policy?"
    ],
    "irrelevant_tables": [
      "Claims",
      "Payments",
      "Customers",
      "Settlements"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2019": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, SUM(Amount_Settled) AS Total_Settled_Amount FROM Claims JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Policy_Type_Code ORDER BY Total_Settled_Amount DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, SUM(Amount_Settled) AS Total_Settled_Amount FROM Claims JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Policy_Type_Code ORDER BY Total_Settled_Amount DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Total_Settled_Amount",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        3274,
        1724
      ],
      "classify": [],
      "describe": "Comparison of total settled amount by policy type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount settled for each type of insurance policy?",
      "Which type of insurance policy has the highest total settlement amount?",
      "How does the total settlement amount for Car insurance compare to Life insurance?",
      "What is the total settlement amount across all policy types?"
    ],
    "irrelevant_tables": [
      "Payments",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2021": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, AVG(Amount_Settled) AS Average_Amount_Settled FROM Customer_Policies INNER JOIN Claims ON Customer_Policies.Policy_ID = Claims.Policy_ID GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, AVG(Amount_Settled) AS Average_Amount_Settled FROM Customer_Policies INNER JOIN Claims ON Customer_Policies.Policy_ID = Claims.Policy_ID GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Average_Amount_Settled",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        1155,
        1724
      ],
      "classify": [],
      "describe": "The average amount settled for different types of insurance policies.",
      "sort": "null"
    },
    "nl_queries": [
      "What is the average amount settled for each type of insurance policy?",
      "How does the average amount settled differ between Car and Life insurance policies?",
      "Can we see a breakdown of total amounts claimed and settled for each type of insurance policy?",
      "What is the trend in the settlement amounts over time for each type of insurance policy?"
    ],
    "irrelevant_tables": [
      "Payments",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2027": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, COUNT(Claim_ID) AS Number_of_Claims FROM Claims c JOIN Customer_Policies cp ON c.Policy_ID = cp.Policy_ID GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, COUNT(Claim_ID) AS Number_of_Claims FROM Claims c JOIN Customer_Policies cp ON c.Policy_ID = cp.Policy_ID GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Number_of_Claims",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        4,
        2
      ],
      "classify": [],
      "describe": "Number of claims made for each type of policy",
      "sort": "desc"
    },
    "nl_queries": [
      "How many claims are made for each type of policy?",
      "What is the average settlement amount for each type of policy?",
      "How does the average settlement amount compare to the average claimed amount for each type of policy?",
      "What is the total amount claimed and settled for each type of policy?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Settlements"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2036": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Made, SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims GROUP BY Date_Claim_Made",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Date_Claim_Made, SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims GROUP BY Date_Claim_Made"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Claim_Made",
      "y_name": "Total_Amount_Claimed",
      "x_data": [
        "2017-03-11",
        "2016-08-12",
        "2017-02-24"
      ],
      "y_data": [
        43884,
        79134,
        70088
      ],
      "classify": [],
      "describe": "Total amount claimed by date",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total amount claimed over time?",
      "How does the amount claimed differ across various dates?",
      "Identify the dates with the highest and lowest total claimed amounts.",
      "Analyze the trend of total amount claimed over the provided period."
    ],
    "irrelevant_tables": [
      "Customers",
      "Customer_Policies",
      "Settlements",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2059": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Theme AS Theme, SUM(j.Sales) AS Total_Sales FROM journal j JOIN journal_committee jc ON j.Journal_ID = jc.Journal_ID WHERE jc.Work_Type = 'Article' GROUP BY j.Theme",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Theme AS Theme, SUM(j.Sales) AS Total_Sales FROM journal j JOIN journal_committee jc ON j.Journal_ID = jc.Journal_ID WHERE jc.Work_Type = 'Article' GROUP BY j.Theme"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "journal_committee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Theme",
      "y_name": "Total_Sales",
      "x_data": [
        "Miami Dolphins",
        "at Jacksonville Jaguars",
        "at Baltimore Ravens"
      ],
      "y_data": [
        798,
        994,
        7494
      ],
      "classify": [],
      "describe": "Total sales for articles by theme",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total sales for articles categorized by theme?",
      "Which theme has the highest total sales for articles?",
      "How do the total sales for articles compare across different themes?",
      "What are the themes with the lowest and highest total sales for articles?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2065": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT bname AS branch_name, COUNT(loan_ID) AS loan_count FROM bank INNER JOIN loan ON bank.branch_ID = loan.branch_ID GROUP BY bname ORDER BY loan_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT bname AS branch_name, COUNT(loan_ID) AS loan_count FROM bank INNER JOIN loan ON bank.branch_ID = loan.branch_ID GROUP BY bname ORDER BY loan_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "loan_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "branch_name",
      "y_name": "loan_count",
      "x_data": [
        "broadway",
        "morningside",
        "downtown"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of loans per branch",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of loans issued by each branch?",
      "Which branch has issued the highest number of loans?",
      "What is the distribution of loan types across the branches?",
      "How does the average loan amount compare across different branches?"
    ],
    "irrelevant_tables": [
      "customer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2067": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT state, COUNT(*) AS num_customers FROM customer GROUP BY state ORDER BY num_customers DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT state, COUNT(*) AS num_customers FROM customer GROUP BY state ORDER BY num_customers DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "loan_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state",
      "y_name": "num_customers",
      "x_data": [
        "New York",
        "Utah",
        "Texas"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of customers by state",
      "sort": "desc"
    },
    "nl_queries": [
      "How many customers are there in each state?",
      "Which state has the highest number of customers?",
      "What is the distribution of customers across different states?",
      "Compare the number of customers in New York and Utah."
    ],
    "irrelevant_tables": [
      "loan",
      "bank"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2155": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT source_system_code, COUNT(*) AS count FROM CMI_Cross_References GROUP BY source_system_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT source_system_code, COUNT(*) AS count FROM CMI_Cross_References GROUP BY source_system_code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "local_govt_mdm",
    "vis_obj": {
      "chart": "bar",
      "x_name": "source_system_code",
      "y_name": "count",
      "x_data": [
        "Rent",
        "Parking"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of records grouped by source system code",
      "sort": "asc"
    },
    "nl_queries": [
      "How many records are there for each source system code?",
      "What is the distribution of records across different source system codes?",
      "Which source system code has the highest number of records?",
      "Are there any source system codes with significantly more records than others?"
    ],
    "irrelevant_tables": [
      "Electoral_Register",
      "Rent_Arrears",
      "Business_Rates",
      "Council_Tax",
      "Parking_Fines",
      "Benefits_Overpayments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2166": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT technician.Name AS technician_name, COUNT(repair_assignment.repair_ID) AS repairs_assigned FROM technician LEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT technician.Name AS technician_name, COUNT(repair_assignment.repair_ID) AS repairs_assigned FROM technician LEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "technician_name",
      "y_name": "repairs_assigned",
      "x_data": [
        "Joe Sewell",
        "John Brown",
        "Tony Sewell"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of repairs assigned to each technician",
      "sort": null
    },
    "nl_queries": [
      "How many repairs are assigned to each technician?",
      "What is the distribution of repairs assigned to each technician sorted by technician name?",
      "Which technician has the most repairs assigned?",
      "How many repairs are assigned to each technician, considering only those with more than one repair assigned?"
    ],
    "irrelevant_tables": [
      "repair",
      "machine"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2171": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT t.Name AS Technician_Name, COUNT(r.repair_ID) AS Repair_Count FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN repair r ON ra.repair_ID = r.repair_ID GROUP BY t.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT t.Name AS Technician_Name, COUNT(r.repair_ID) AS Repair_Count FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN repair r ON ra.repair_ID = r.repair_ID GROUP BY t.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Technician_Name",
      "y_name": "Repair_Count",
      "x_data": [
        "Joe Sewell",
        "John Brown",
        "Tony Sewell"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of repairs handled by each technician",
      "sort": null
    },
    "nl_queries": [
      "How many repairs has each technician handled?",
      "What is the average number of repairs handled by technicians in the NYY team?",
      "Compare the total repair counts between technicians from different teams.",
      "Identify the technician with the highest average repair value points and compare it with others."
    ],
    "irrelevant_tables": [
      "repair"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2172": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Revenue FROM Manufacturers",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Revenue FROM Manufacturers"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Revenue",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        120.0,
        100.0,
        50.0
      ],
      "classify": [],
      "describe": "Revenue of different manufacturers",
      "sort": null
    },
    "nl_queries": [
      "What is the revenue of each manufacturer?",
      "Which manufacturer has the highest revenue?",
      "Compare the revenue of Sony and Creative Labs.",
      "How does Hewlett-Packard's revenue compare to the others?"
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2174": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Product_Value FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Name ORDER BY Total_Product_Value DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Product_Value FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Name ORDER BY Total_Product_Value DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Value",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        240,
        120,
        150
      ],
      "classify": [],
      "describe": "This visualization shows the total product value for each manufacturer based on the sum of prices of products they offer.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total product value for each manufacturer?",
      "How does the total product value compare between Sony and Hewlett-Packard?",
      "Which manufacturer has the highest total product value?",
      "What is the total product value for manufacturers headquartered in Tokyo?"
    ],
    "irrelevant_tables": [
      "None"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2180": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Revenue FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Revenue FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Revenue",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Total revenue generated by each manufacturer from their products",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total revenue generated by each manufacturer from their products?",
      "Which manufacturer has the highest total revenue from their products?",
      "How does the total revenue of the top manufacturer compare to others?",
      "What is the average revenue per product for each manufacturer?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2181": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Revenue FROM Manufacturers",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Revenue FROM Manufacturers"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Revenue",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        120.0,
        100.0,
        50.0
      ],
      "classify": [],
      "describe": "Revenue by Manufacturer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the revenue of each manufacturer?",
      "Which manufacturer has the highest revenue?",
      "What is the revenue difference between the top two manufacturers?",
      "How does the revenue of the smallest manufacturer compare to the largest?"
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2230": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT M.Name AS Manufacturer, SUM(P.Price) AS Total_Product_Price FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer GROUP BY M.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT M.Name AS Manufacturer, SUM(P.Price) AS Total_Product_Price FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer GROUP BY M.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Aggregated total product prices by manufacturer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total price of products for each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "Compare the total product prices between Sony and Creative Labs.",
      "How does the total product price for Hewlett-Packard compare to the other manufacturers?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2270": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Revenue FROM Manufacturers",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Revenue FROM Manufacturers"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Revenue",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        120.0,
        100.0,
        50.0
      ],
      "classify": [],
      "describe": "Revenue of different manufacturers",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the revenue of each manufacturer?",
      "Which manufacturer has the highest revenue?",
      "How does the revenue compare between Sony and Creative Labs?",
      "What is the total revenue of all manufacturers combined?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2280": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name, SUM(p.Price) AS Total_Product_Price FROM Products p JOIN Manufacturers m ON p.Manufacturer = m.Code GROUP BY m.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name, SUM(p.Price) AS Total_Product_Price FROM Products p JOIN Manufacturers m ON p.Manufacturer = m.Code GROUP BY m.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Total price of products offered by each manufacturer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total price of products offered by each manufacturer?",
      "How does the total price of products compare among manufacturers with different revenue tiers?",
      "What is the average product price for each manufacturer?",
      "Which manufacturer has the highest average product price and what is their revenue?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2289": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Product_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Product_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Total product price by each manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total product price for each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "What is the average product price per manufacturer?",
      "How does the revenue of each manufacturer compare to their total product price?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2299": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name AS Manufacturer, Revenue FROM Manufacturers",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name AS Manufacturer, Revenue FROM Manufacturers"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Revenue",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        120.0,
        100.0,
        50.0
      ],
      "classify": [],
      "describe": "Revenue of each manufacturer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the revenue of each manufacturer?",
      "What are the names and prices of products for each manufacturer?",
      "Which manufacturers have a total product price above 200?",
      "Visualize the revenue and total product price for each manufacturer."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2307": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer, f.Name AS Furniture, fm.Price_in_Dollar FROM furniture_manufacte fm JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer, f.Name AS Furniture, fm.Price_in_Dollar FROM furniture_manufacte fm JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Price_in_Dollar",
      "x_data": [
        "Chevrolet House",
        "Unknown",
        "Unknown"
      ],
      "y_data": [
        239.0,
        450.0,
        2124.0
      ],
      "classify": [],
      "describe": "Price of different furniture items by manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the prices of different furniture items by each manufacturer?",
      "Which manufacturer has the highest average price for their furniture items?",
      "How does the number of components in the furniture affect the price for each manufacturer?",
      "What is the market rate of furniture items compared to their prices for each manufacturer?"
    ],
    "irrelevant_tables": [
      "furniture_manufacte",
      "manufacturer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2309": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer, COUNT(f.Furniture_ID) AS Furniture_Count FROM furniture_manufacte fm JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID GROUP BY m.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer, COUNT(f.Furniture_ID) AS Furniture_Count FROM furniture_manufacte fm JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID GROUP BY m.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Furniture_Count",
      "x_data": [
        "Chevrolet House",
        "Other Manufacturers"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of furniture items produced by each manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of furniture items produced by each manufacturer?",
      "Which manufacturer produces the most furniture items?",
      "What is the total number of furniture items produced?",
      "How does the furniture production distribution look across different manufacturers?"
    ],
    "irrelevant_tables": [
      "furniture"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2311": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer_Name, COUNT(f.Furniture_ID) AS Total_Furniture FROM furniture_manufacte fm JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID GROUP BY m.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer_Name, COUNT(f.Furniture_ID) AS Total_Furniture FROM furniture_manufacte fm JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID GROUP BY m.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer_Name",
      "y_name": "Total_Furniture",
      "x_data": [
        "Chevrolet House",
        "Manufacturer 4",
        "Manufacturer 7"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of different types of furniture manufactured by each manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total number of different types of furniture manufactured by each manufacturer?",
      "Which manufacturer produces the highest number of different types of furniture?",
      "How does the total number of different types of furniture manufactured compare among manufacturers?",
      "Which manufacturers produce a similar number of different types of furniture?"
    ],
    "irrelevant_tables": [
      "furniture",
      "manufacturer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2397": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.title, AVG(r.stars) AS avg_stars FROM Rating r JOIN Movie m ON r.mID = m.mID GROUP BY m.title ORDER BY avg_stars DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.title, AVG(r.stars) AS avg_stars FROM Rating r JOIN Movie m ON r.mID = m.mID GROUP BY m.title ORDER BY avg_stars DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "title",
      "y_name": "avg_stars",
      "x_data": [
        "Gone with the Wind",
        "Star Wars",
        "The Sound of Music"
      ],
      "y_data": [
        3.0,
        4.0,
        4.0
      ],
      "classify": [],
      "describe": "Average star ratings for each movie",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average star rating for each movie?",
      "Which movies have the highest average star ratings?",
      "How do the average star ratings compare across different movies?",
      "Are there any movies with significantly higher or lower average star ratings?"
    ],
    "irrelevant_tables": [
      "Reviewer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2474": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Name AS Journalist_Name, COUNT(nr.Event_ID) AS Events_Covered FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Name AS Journalist_Name, COUNT(nr.Event_ID) AS Events_Covered FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Journalist_Name",
      "y_name": "Events_Covered",
      "x_data": [
        "Herbert Swindells"
      ],
      "y_data": [
        1
      ],
      "classify": [],
      "describe": "Number of events covered by each journalist.",
      "sort": "desc"
    },
    "nl_queries": [
      "How many events has each journalist covered?",
      "Which journalist has the highest number of events covered?",
      "What is the distribution of events covered by journalists based on their nationality?",
      "How does the number of events covered correlate with the years of experience of the journalists?"
    ],
    "irrelevant_tables": [
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2476": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT journalist_ID, COUNT(Event_ID) AS Report_Count FROM news_report GROUP BY journalist_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT journalist_ID, COUNT(Event_ID) AS Report_Count FROM news_report GROUP BY journalist_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "journalist_ID",
      "y_name": "Report_Count",
      "x_data": [
        1,
        11,
        6
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of reports written by each journalist",
      "sort": null
    },
    "nl_queries": [
      "How many reports has each journalist written?",
      "Which journalist has written the most reports?",
      "What is the distribution of reports among journalists?",
      "Are there any journalists with the same number of reports?"
    ],
    "irrelevant_tables": [
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2478": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Name, COUNT(nr.Event_ID) AS Events_Covered FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Name, COUNT(nr.Event_ID) AS Events_Covered FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Events_Covered",
      "x_data": [
        "Herbert Swindells"
      ],
      "y_data": [
        1
      ],
      "classify": [],
      "describe": "Number of events covered by each journalist",
      "sort": "desc"
    },
    "nl_queries": [
      "How many events has each journalist covered?",
      "Which journalist has covered the most events?",
      "What is the average number of events covered by journalists?",
      "How does the number of events covered correlate with the years of experience of the journalists?"
    ],
    "irrelevant_tables": [
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2479": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Name AS Journalist, COUNT(nr.Event_ID) AS NumberOfEvents FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Name AS Journalist, COUNT(nr.Event_ID) AS NumberOfEvents FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Journalist",
      "y_name": "NumberOfEvents",
      "x_data": [
        "Herbert Swindells"
      ],
      "y_data": [
        1
      ],
      "classify": [],
      "describe": "Number of events covered by each journalist",
      "sort": null
    },
    "nl_queries": [
      "How many events did each journalist cover?",
      "Which journalist covered the most events?",
      "What is the nationality of the journalist who covered the most events?",
      "What is the age and years of experience of the journalist who covered the most events?"
    ],
    "irrelevant_tables": [
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2483": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Venue, COUNT(nr.journalist_ID) AS Num_Journalists FROM news_report nr JOIN event e ON nr.Event_ID = e.Event_ID GROUP BY e.Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Venue, COUNT(nr.journalist_ID) AS Num_Journalists FROM news_report nr JOIN event e ON nr.Event_ID = e.Event_ID GROUP BY e.Venue"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Num_Journalists",
      "x_data": [
        "Marathon",
        "Victoria",
        "Motagua"
      ],
      "y_data": [
        1,
        0,
        1
      ],
      "classify": [],
      "describe": "Number of journalists covering events at different venues",
      "sort": null
    },
    "nl_queries": [
      "How many journalists have covered events at each venue?",
      "Which venue had the highest number of journalists covering events?",
      "What is the distribution of event attendance across different venues?",
      "Is there a correlation between the number of journalists and event attendance at each venue?"
    ],
    "irrelevant_tables": [
      "journalist"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2485": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Nationality, COUNT(nr.journalist_ID) AS Number_of_Reports FROM journalist j LEFT JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Nationality",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Nationality, COUNT(nr.journalist_ID) AS Number_of_Reports FROM journalist j LEFT JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Nationality"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "Number_of_Reports",
      "x_data": [
        "England",
        "Wales"
      ],
      "y_data": [
        1,
        0
      ],
      "classify": [],
      "describe": "Number of reports per nationality of journalists",
      "sort": "asc"
    },
    "nl_queries": [
      "How many reports were made by journalists from each nationality?",
      "Which nationality of journalists has the highest number of reports?",
      "What is the distribution of reports across different nationalities?",
      "Are there any nationalities of journalists that did not report any events?"
    ],
    "irrelevant_tables": [
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2489": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Name, COUNT(nr.Event_ID) AS Number_of_Events FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Name, COUNT(nr.Event_ID) AS Number_of_Events FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Number_of_Events",
      "x_data": [
        "Herbert Swindells"
      ],
      "y_data": [
        1
      ],
      "classify": [],
      "describe": "Number of events covered by each journalist",
      "sort": "desc"
    },
    "nl_queries": [
      "How many events has each journalist covered?",
      "Which events have been covered by Herbert Swindells?",
      "What is the attendance at events covered by Herbert Swindells?",
      "How many events with an attendance greater than 1000 have been covered by Herbert Swindells?"
    ],
    "irrelevant_tables": [
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2503": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT h.Nationality, COUNT(p.Party_ID) AS Number_of_Parties FROM host h JOIN party_host ph ON h.Host_ID = ph.Host_ID JOIN party p ON ph.Party_ID = p.Party_ID GROUP BY h.Nationality",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT h.Nationality, COUNT(p.Party_ID) AS Number_of_Parties FROM host h JOIN party_host ph ON h.Host_ID = ph.Host_ID JOIN party p ON ph.Party_ID = p.Party_ID GROUP BY h.Nationality"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "Number_of_Parties",
      "x_data": [
        "United States",
        "Hungary"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of parties hosted by nationality",
      "sort": "desc"
    },
    "nl_queries": [
      "How many parties have been hosted by nationality?",
      "What is the total number of parties hosted by each nationality and the average number of hosts per party?",
      "Which nationalities have been the main hosts, and how many parties were they in charge of?",
      "What is the age distribution of hosts within each nationality?"
    ],
    "irrelevant_tables": [
      "party_host",
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2506": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party_Theme, COUNT(*) AS Number_of_Parties FROM party GROUP BY Party_Theme",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party_Theme, COUNT(*) AS Number_of_Parties FROM party GROUP BY Party_Theme"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party_Theme",
      "y_name": "Number_of_Parties",
      "x_data": [
        "Spring",
        "Club Q-BASE",
        "Hardcore Resurrection"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of parties per theme",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of parties held for each theme?",
      "What is the total number of parties held at each location?",
      "How many parties were hosted by each nationality?",
      "Which host has been the main in charge for the most parties?"
    ],
    "irrelevant_tables": [
      "party_host",
      "host"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2508": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Party_name, COUNT(m.Member_ID) AS Member_Count FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Party_name, COUNT(m.Member_ID) AS Member_Count FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party_name",
      "y_name": "Member_Count",
      "x_data": [
        "Convention Peoples Party",
        "Progress Party",
        "3"
      ],
      "y_data": [
        0,
        2,
        1
      ],
      "classify": [],
      "describe": "Count of members in each party",
      "sort": "asc"
    },
    "nl_queries": [
      "How many members does each party have?",
      "Which party has the highest number of members?",
      "What is the distribution of members across different parties?",
      "Are there any parties with no members?"
    ],
    "irrelevant_tables": [
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2512": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT p.Party_name, m.In_office, COUNT(m.Member_ID) AS Member_Count FROM member m JOIN party p ON m.Party_ID = p.Party_ID WHERE m.In_office LIKE '%present' GROUP BY p.Party_name, m.In_office ORDER BY p.Party_name, m.In_office",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT p.Party_name, m.In_office, COUNT(m.Member_ID) AS Member_Count FROM member m JOIN party p ON m.Party_ID = p.Party_ID WHERE m.In_office LIKE '%present' GROUP BY p.Party_name, m.In_office ORDER BY p.Party_name, m.In_office"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Party_name",
      "y_name": "Member_Count",
      "x_data": [
        "Convention Peoples Party",
        "Progress Party"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [
        "In_office"
      ],
      "describe": "Number of members currently in office per party",
      "sort": "asc"
    },
    "nl_queries": [
      "How many members are currently in office for each party?",
      "What is the distribution of members who are currently in office across different parties?",
      "Which party has the highest number of members currently in office?",
      "Compare the current members in office with those who are no longer in office for each party."
    ],
    "irrelevant_tables": [
      "party_events",
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2516": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party_name, COUNT(Member_ID) AS Members_Count FROM party INNER JOIN member ON party.Party_ID = member.Party_ID GROUP BY Party_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party_name, COUNT(Member_ID) AS Members_Count FROM party INNER JOIN member ON party.Party_ID = member.Party_ID GROUP BY Party_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party_name",
      "y_name": "Members_Count",
      "x_data": [
        "Convention Peoples Party",
        "Progress Party",
        "3"
      ],
      "y_data": [
        0,
        2,
        1
      ],
      "classify": [],
      "describe": "Count of members in each party",
      "sort": "asc"
    },
    "nl_queries": [
      "How many members are there in each party?",
      "Which party has the most members?",
      "What is the total number of members in all parties?",
      "How do the number of members compare across different parties?"
    ],
    "irrelevant_tables": [
      "party_events",
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2526": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party_name, COUNT(Member_ID) AS Member_Count FROM party INNER JOIN member ON party.Party_ID = member.Party_ID GROUP BY Party_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party_name, COUNT(Member_ID) AS Member_Count FROM party INNER JOIN member ON party.Party_ID = member.Party_ID GROUP BY Party_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party_name",
      "y_name": "Member_Count",
      "x_data": [
        "Convention Peoples Party",
        "Progress Party",
        "3"
      ],
      "y_data": [
        0,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of members in each party",
      "sort": null
    },
    "nl_queries": [
      "How many members are there in each party?",
      "Which party has the most members?",
      "What is the distribution of members across different parties?",
      "Are there any parties with no members?"
    ],
    "irrelevant_tables": [
      "party_events",
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2536": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Host, SUM(Attendance) AS Total_Attendance FROM performance GROUP BY Host",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Host, SUM(Attendance) AS Total_Attendance FROM performance GROUP BY Host"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "performance_attendance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Host",
      "y_name": "Total_Attendance",
      "x_data": [
        "Boston Bruins",
        "New York Rangers",
        "Atlanta Thrashers"
      ],
      "y_data": [
        165,
        1820,
        1878
      ],
      "classify": [],
      "describe": "Comparison of total attendance for each host",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total attendance for each host?",
      "Which host had the highest total attendance?",
      "How does the attendance of the top-performing host compare to the others?",
      "What insights can we draw about the popularity of each host based on their attendance figures?"
    ],
    "irrelevant_tables": [
      "member",
      "member_attendance"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2543": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Home_Town, COUNT(*) AS Perpetrator_Count FROM people INNER JOIN perpetrator ON people.People_ID = perpetrator.People_ID GROUP BY Home_Town",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Home_Town, COUNT(*) AS Perpetrator_Count FROM people INNER JOIN perpetrator ON people.People_ID = perpetrator.People_ID GROUP BY Home_Town"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "perpetrator",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Home_Town",
      "y_name": "Perpetrator_Count",
      "x_data": [
        "Los Angeles, CA",
        "Placentia, CA"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Number of perpetrators originating from each hometown",
      "sort": "asc"
    },
    "nl_queries": [
      "How many perpetrators are there from each hometown?",
      "Which hometown has the highest number of perpetrators?",
      "What is the distribution of perpetrators across different countries?",
      "How do the number of perpetrators correlate with the number of incidents in each country?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2548": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT S.city_code, AVG(P.weight) AS avg_weight FROM Has_Pet H JOIN Student S ON H.StuID = S.StuID JOIN Pets P ON H.PetID = P.PetID GROUP BY S.city_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT S.city_code, AVG(P.weight) AS avg_weight FROM Has_Pet H JOIN Student S ON H.StuID = S.StuID JOIN Pets P ON H.PetID = P.PetID GROUP BY S.city_code"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "avg_weight",
      "x_data": [
        "BAL",
        "HKG"
      ],
      "y_data": [
        12.0,
        11.35
      ],
      "classify": [],
      "describe": "Average pet weight by city",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average weight of pets owned by students in each city?",
      "Which city has the highest average weight of pets owned by students?",
      "How does the average weight of pets vary by city?",
      "Can we identify a trend in the average pet weight across different cities?"
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2549": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetType, COUNT(PetID) AS PetCount FROM Pets GROUP BY PetType",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetType, COUNT(PetID) AS PetCount FROM Pets GROUP BY PetType"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetType",
      "y_name": "PetCount",
      "x_data": [
        "cat",
        "dog"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Distribution of pets by type",
      "sort": "asc"
    },
    "nl_queries": [
      "How many pets of each type are there?",
      "Which type of pet is the most common?",
      "What is the count of dogs compared to cats?",
      "Is there any type of pet that is more dominant?"
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2550": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetType, COUNT(*) AS PetCount FROM Pets GROUP BY PetType",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetType, COUNT(*) AS PetCount FROM Pets GROUP BY PetType"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetType",
      "y_name": "PetCount",
      "x_data": [
        "cat",
        "dog"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of different types of pets",
      "sort": null
    },
    "nl_queries": [
      "What is the count of each type of pet?",
      "What is the average age of each type of pet?",
      "What is the average weight of each type of pet?",
      "What is the total weight of pets by type?"
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2564": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Company_name, COUNT(Hardware_Model_name) AS Model_Count FROM phone GROUP BY Company_name ORDER BY Model_Count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Company_name, COUNT(Hardware_Model_name) AS Model_Count FROM phone GROUP BY Company_name ORDER BY Model_Count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "phone_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company_name",
      "y_name": "Model_Count",
      "x_data": [
        "Sony Mobile Communications",
        "Nokia Corporation",
        "LG Electronics"
      ],
      "y_data": [
        3,
        3,
        1
      ],
      "classify": [],
      "describe": "Number of hardware models released by each company",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of hardware models released by each company?",
      "What are the chip models used in the hardware models released by each company?",
      "What is the RAM and ROM configuration for the chip models used in the hardware models released by each company?",
      "What are the screen modes used in the hardware models released by each company?"
    ],
    "irrelevant_tables": [
      "chip_model"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2567": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT market.District, SUM(phone_market.Num_of_stock) AS Total_Stock FROM phone_market JOIN market ON phone_market.Market_ID = market.Market_ID GROUP BY market.District ORDER BY Total_Stock DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT market.District, SUM(phone_market.Num_of_stock) AS Total_Stock FROM phone_market JOIN market ON phone_market.Market_ID = market.Market_ID GROUP BY market.District ORDER BY Total_Stock DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "bar",
      "x_name": "District",
      "y_name": "Total_Stock",
      "x_data": [
        "Alberta",
        "British Columbia"
      ],
      "y_data": [
        3106,
        4324
      ],
      "classify": [],
      "describe": "Total stock of phones in each district",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total stock of phones in each district?",
      "Which district has the highest stock of phones?",
      "How does the phone stock compare among different districts?",
      "Can we see a bar chart showing the total phone stock across districts?"
    ],
    "irrelevant_tables": [
      "phone"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2568": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT market.District, SUM(phone_market.Num_of_stock) AS Total_Stock FROM phone_market JOIN market ON phone_market.Market_ID = market.Market_ID GROUP BY market.District",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT market.District, SUM(phone_market.Num_of_stock) AS Total_Stock FROM phone_market JOIN market ON phone_market.Market_ID = market.Market_ID GROUP BY market.District"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "bar",
      "x_name": "District",
      "y_name": "Total_Stock",
      "x_data": [
        "Alberta",
        "British Columbia"
      ],
      "y_data": [
        3106,
        4324
      ],
      "classify": [],
      "describe": "This bar chart visualizes the total stock of phones available in each district.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total stock of phones available in each district?",
      "Which district has the highest total stock of phones?",
      "What is the ranking of districts based on the total stock of phones?",
      "How does the number of stocks compare between the highest and lowest-ranked districts?"
    ],
    "irrelevant_tables": [
      "phone"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2569": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.District, SUM(pm.Num_of_stock) AS Total_Stock FROM phone_market pm JOIN market m ON pm.Market_ID = m.Market_ID GROUP BY m.District ORDER BY Total_Stock DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.District, SUM(pm.Num_of_stock) AS Total_Stock FROM phone_market pm JOIN market m ON pm.Market_ID = m.Market_ID GROUP BY m.District ORDER BY Total_Stock DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "bar",
      "x_name": "District",
      "y_name": "Total_Stock",
      "x_data": [
        "Alberta",
        "British Columbia"
      ],
      "y_data": [
        3106,
        4324
      ],
      "classify": [],
      "describe": "Total stock of phones by market district",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total stock of phones available in each market district?",
      "Which market district has the highest total phone stock?",
      "How does the total phone stock in Alberta compare to other districts?",
      "What is the relationship between the number of shops in each district and the total phone stock?"
    ],
    "irrelevant_tables": [
      "phone"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2570": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT market.District AS x, SUM(phone_market.Num_of_stock) AS y FROM phone_market JOIN market ON phone_market.Market_ID = market.Market_ID GROUP BY market.District ORDER BY y DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT market.District AS x, SUM(phone_market.Num_of_stock) AS y FROM phone_market JOIN market ON phone_market.Market_ID = market.Market_ID GROUP BY market.District ORDER BY y DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "bar",
      "x_name": "x",
      "y_name": "y",
      "x_data": [
        "Alberta",
        "British Columbia"
      ],
      "y_data": [
        3106,
        4324
      ],
      "classify": [],
      "describe": "Sum of phone stocks by district",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of phone stocks available in each district?",
      "Which district has the highest number of phone stocks?",
      "What is the difference in the number of phone stocks between the top two districts?",
      "How do the phone stocks compare across all districts?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2606": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT catalog_entry_name, price_in_dollars FROM Catalog_Contents",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT catalog_entry_name, price_in_dollars FROM Catalog_Contents"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "product_catalog",
    "vis_obj": {
      "chart": "bar",
      "x_name": "catalog_entry_name",
      "y_name": "price_in_dollars",
      "x_data": [
        "Cola",
        "Root beer",
        "Cream Soda"
      ],
      "y_data": [
        200.78,
        687.59,
        360.5
      ],
      "classify": [],
      "describe": "Comparison of product prices",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the price of each product in dollars.",
      "Compare the prices of products in dollars across different categories.",
      "Identify the most expensive and the cheapest product based on price in dollars.",
      "Analyze the price distribution of products and identify any patterns or trends."
    ],
    "irrelevant_tables": [
      "Catalog_Structure",
      "Catalog_Contents_Additional_Attributes",
      "Catalogs",
      "Attribute_Definitions"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2615": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.product_name, SUM(pb.booked_amount) AS total_booked_amount FROM Products_for_Hire p JOIN Products_Booked pb ON p.product_id = pb.product_id GROUP BY p.product_name ORDER BY total_booked_amount DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.product_name, SUM(pb.booked_amount) AS total_booked_amount FROM Products_for_Hire p JOIN Products_Booked pb ON p.product_id = pb.product_id GROUP BY p.product_name ORDER BY total_booked_amount DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "products_for_hire",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_booked_amount",
      "x_data": [
        "Book collection A",
        "Book collection C",
        "Book collection B"
      ],
      "y_data": [
        151.68,
        412.49,
        102.76
      ],
      "classify": [],
      "describe": "This bar chart shows the total booked amount for each product.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total booked amount for each product?",
      "Which product has the highest total booked amount?",
      "What are the top three products in terms of total booked amount?",
      "How does the total booked amount compare across different products?"
    ],
    "irrelevant_tables": [
      "View_Product_Availability",
      "Bookings",
      "Customers",
      "Discount_Coupons",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2620": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_category_description, AVG(typical_selling_price) AS average_selling_price FROM Products INNER JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code GROUP BY product_category_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_category_description, AVG(typical_selling_price) AS average_selling_price FROM Products INNER JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code GROUP BY product_category_description"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "products_gen_characteristics",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_category_description",
      "y_name": "average_selling_price",
      "x_data": [
        "Herbs",
        "Spices"
      ],
      "y_data": [
        503.843197,
        1152270.434684
      ],
      "classify": [],
      "describe": "Average selling price by product category",
      "sort": null
    },
    "nl_queries": [
      "What is the average selling price for each product category?",
      "How does the average selling price compare between Herbs and Spices?",
      "Are there any significant differences in the average selling price between different product categories?",
      "Which product category has the highest average selling price?"
    ],
    "irrelevant_tables": [
      "Product_Characteristics",
      "Ref_Colors",
      "Characteristics",
      "Ref_Characteristic_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2622": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS Channel_Name, SUM(b.Share_in_percent) AS Total_Share FROM channel c JOIN broadcast_share b ON c.Channel_ID = b.Channel_ID GROUP BY c.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS Channel_Name, SUM(b.Share_in_percent) AS Total_Share FROM channel c JOIN broadcast_share b ON c.Channel_ID = b.Channel_ID GROUP BY c.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "program_share",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Channel_Name",
      "y_name": "Total_Share",
      "x_data": [
        "CCTV-1",
        "Hunan Satellite TV",
        "CCTV-8"
      ],
      "y_data": [
        3.1,
        1.8,
        2.8
      ],
      "classify": [],
      "describe": "Total share of each channel",
      "sort": null
    },
    "nl_queries": [
      "What is the total share percentage of each channel?",
      "Which channel has the highest total share percentage?",
      "How does the share percentage of 'Hunan Satellite TV' compare to other channels?",
      "What is the overall distribution of share percentages among all channels?"
    ],
    "irrelevant_tables": [
      "program",
      "broadcast_share",
      "broadcast"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2624": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS Channel, SUM(bs.Share_in_percent) AS Total_Share FROM channel c JOIN broadcast_share bs ON c.Channel_ID = bs.Channel_ID GROUP BY c.Name ORDER BY Total_Share DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS Channel, SUM(bs.Share_in_percent) AS Total_Share FROM channel c JOIN broadcast_share bs ON c.Channel_ID = bs.Channel_ID GROUP BY c.Name ORDER BY Total_Share DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "program_share",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Channel",
      "y_name": "Total_Share",
      "x_data": [
        "CCTV-1",
        "Hunan Satellite TV",
        "CCTV-8"
      ],
      "y_data": [
        3.1,
        1.8,
        2.8
      ],
      "classify": [],
      "describe": "Total share of broadcasts per channel",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total share of broadcasts per channel?",
      "How does the total share of broadcasts compare between channels?",
      "Which channel has the highest total share of broadcasts?",
      "What is the distribution of broadcast shares among the top channels?"
    ],
    "irrelevant_tables": [
      "program",
      "broadcast"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2630": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Institution, Enrollment FROM Institution ORDER BY Enrollment DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Institution, Enrollment FROM Institution ORDER BY Enrollment DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Institution",
      "y_name": "Enrollment",
      "x_data": [
        "Dakota State University",
        "Ave Maria University",
        "Edward Waters College"
      ],
      "y_data": [
        3102,
        1200,
        800
      ],
      "classify": [],
      "describe": "Comparing the enrollment numbers of different institutions.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the enrollment of each institution?",
      "Which institution has the highest enrollment?",
      "What are the enrollment numbers of institutions located in Florida?",
      "How does the enrollment of Dakota State University compare to the enrollment of Edward Waters College?"
    ],
    "irrelevant_tables": [
      "protein",
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2631": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT i.Institution, COUNT(p.common_name) AS protein_count FROM Institution i JOIN protein p ON i.Institution_id = p.Institution_id GROUP BY i.Institution ORDER BY protein_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT i.Institution, COUNT(p.common_name) AS protein_count FROM Institution i JOIN protein p ON i.Institution_id = p.Institution_id GROUP BY i.Institution ORDER BY protein_count DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Institution",
      "y_name": "protein_count",
      "x_data": [
        "Dakota State University",
        "Edward Waters College"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Comparison of the number of proteins characterized by each institution",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of proteins characterized by each institution?",
      "Which institution has characterized the highest number of proteins?",
      "How does the enrollment size of these institutions compare?",
      "What is the relationship between the enrollment size and the number of proteins characterized by these institutions?"
    ],
    "irrelevant_tables": [
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2633": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Institution, Location, Enrollment FROM Institution",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Institution, Location, Enrollment FROM Institution"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Institution",
      "y_name": "Enrollment",
      "x_data": [
        "Ave Maria University",
        "Dakota State University",
        "Edward Waters College"
      ],
      "y_data": [
        1200,
        3102,
        800
      ],
      "classify": [],
      "describe": "Comparison of enrollment across different institutions",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the enrollment distribution across different institutions?",
      "Which institution has the highest enrollment?",
      "Compare the enrollment of the institution with the highest enrollment to the one with the lowest.",
      "Provide insights on the enrollment numbers in relation to the location of the institutions."
    ],
    "irrelevant_tables": [
      "protein",
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2634": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Institution, Enrollment FROM Institution",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Institution, Enrollment FROM Institution"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Institution",
      "y_name": "Enrollment",
      "x_data": [
        "Ave Maria University",
        "Dakota State University",
        "Edward Waters College"
      ],
      "y_data": [
        1200,
        3102,
        800
      ],
      "classify": [],
      "describe": "Show enrollment numbers for each institution",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the enrollment of each institution?",
      "Which institution has the highest enrollment?",
      "Compare the enrollment numbers of private institutions.",
      "Identify the institution with the lowest enrollment."
    ],
    "irrelevant_tables": [
      "protein",
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2652": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Railway, COUNT(Train_ID) AS Number_of_Trains FROM railway JOIN train ON railway.Railway_ID = train.Railway_ID GROUP BY Railway",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Railway, COUNT(Train_ID) AS Number_of_Trains FROM railway JOIN train ON railway.Railway_ID = train.Railway_ID GROUP BY Railway"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Railway",
      "y_name": "Number_of_Trains",
      "x_data": [
        "SECR",
        "MR",
        "GNRD"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of trains managed by each railway",
      "sort": "asc"
    },
    "nl_queries": [
      "How many trains are managed by each railway?",
      "Which railway manages the most trains?",
      "What is the distribution of trains managed across different railways?",
      "Is there a significant difference in the number of trains managed by each railway?"
    ],
    "irrelevant_tables": [
      "manager",
      "railway_manage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2656": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT r.Railway, COUNT(t.Train_ID) AS Train_Count FROM railway r JOIN train t ON r.Railway_ID = t.Railway_ID GROUP BY r.Railway",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT r.Railway, COUNT(t.Train_ID) AS Train_Count FROM railway r JOIN train t ON r.Railway_ID = t.Railway_ID GROUP BY r.Railway"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Railway",
      "y_name": "Train_Count",
      "x_data": [
        "SECR",
        "MR",
        "GNRD"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of trains managed by each railway",
      "sort": "desc"
    },
    "nl_queries": [
      "How many trains are managed by each railway?",
      "Which railway manages the highest number of trains?",
      "What is the distribution of trains managed between SECR and MR?",
      "Identify the railway with the least number of managed trains and provide details."
    ],
    "irrelevant_tables": [
      "manager",
      "railway_manage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2657": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country, COUNT(Manager_ID) AS Manager_Count FROM manager GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country, COUNT(Manager_ID) AS Manager_Count FROM manager GROUP BY Country"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Manager_Count",
      "x_data": [
        "United States"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of managers by country",
      "sort": null
    },
    "nl_queries": [
      "How many managers are there in each country?",
      "Which country has the most managers?",
      "What is the average age of managers in the United States?",
      "What is the distribution of managers by their working year start in the United States?"
    ],
    "irrelevant_tables": [
      "train",
      "railway",
      "railway_manage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2757": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality, COUNT(Ship_ID) AS Ship_Count FROM ship GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality, COUNT(Ship_ID) AS Ship_Count FROM ship GROUP BY Nationality"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "Ship_Count",
      "x_data": [
        "United Kingdom",
        "United States"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of ships by nationality",
      "sort": "asc"
    },
    "nl_queries": [
      "How many ships are there from each nationality?",
      "What is the distribution of ship types within each nationality?",
      "What is the average tonnage of ships by nationality?",
      "What is the fate distribution of ships by nationality?"
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2780": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.player_name, AVG(pa.overall_rating) AS avg_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id GROUP BY p.player_name ORDER BY avg_rating DESC LIMIT 10",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.player_name, AVG(pa.overall_rating) AS avg_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id GROUP BY p.player_name ORDER BY avg_rating DESC LIMIT 10"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "soccer_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "player_name",
      "y_name": "avg_rating",
      "x_data": [
        "Player 1",
        "Player 2",
        "Player 3",
        "Player 4",
        "Player 5",
        "Player 6",
        "Player 7",
        "Player 8",
        "Player 9",
        "Player 10"
      ],
      "y_data": [
        85.0,
        84.5,
        84.0,
        83.5,
        83.0,
        82.5,
        82.0,
        81.5,
        81.0,
        80.5
      ],
      "classify": [],
      "describe": "Average overall rating of top 10 players",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the top 10 players by average overall rating?",
      "Show the average overall ratings of players in the England Premier League.",
      "Compare the average overall ratings of players from different leagues.",
      "Identify the player with the highest average overall rating over multiple seasons."
    ],
    "irrelevant_tables": [
      "Team_Attributes",
      "Country",
      "League",
      "sqlite_sequence",
      "Team"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2781": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.player_name, AVG(pa.overall_rating) AS avg_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id GROUP BY p.player_name ORDER BY avg_rating DESC LIMIT 10",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.player_name, AVG(pa.overall_rating) AS avg_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id GROUP BY p.player_name ORDER BY avg_rating DESC LIMIT 10"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "soccer_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "player_name",
      "y_name": "avg_rating",
      "x_data": [
        "Aaron Doran",
        "Aaron Appindangoye",
        "Aaron Cresswell"
      ],
      "y_data": [
        67.0,
        62.0,
        67.0
      ],
      "classify": [],
      "describe": "Top 10 players by average overall rating",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the top 10 players based on average overall rating?",
      "For the top 10 players, how does their average rating compare over the years?",
      "How does the average rating of top players vary by country?",
      "How does the average rating of top players vary by team?"
    ],
    "irrelevant_tables": [
      "Team_Attributes",
      "Country",
      "League",
      "sqlite_sequence",
      "Team"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2782": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date, overall_rating FROM Player_Attributes WHERE player_api_id = 505942 ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date, overall_rating FROM Player_Attributes WHERE player_api_id = 505942 ORDER BY date"
    },
    "reasoning_level": "L3",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "soccer_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "overall_rating",
      "x_data": [
        "2015-09-21 00:00:00",
        "2015-11-19 00:00:00",
        "2016-02-18 00:00:00"
      ],
      "y_data": [
        62.0,
        67.0,
        67.0
      ],
      "classify": [],
      "describe": "Track the player's overall rating over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the trend of Aaron Appindangoye's overall rating over time?",
      "Compare Aaron Appindangoye's overall rating trend with his potential rating over time.",
      "How does Aaron Appindangoye's overall rating compare with other players born in 1992?",
      "What are the overall ratings of players in the same team as Aaron Appindangoye over time?"
    ],
    "irrelevant_tables": [
      "Team_Attributes",
      "Country",
      "League",
      "sqlite_sequence",
      "Team"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2785": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT cName, COUNT(pID) AS num_players FROM Tryout WHERE decision = 'yes' GROUP BY cName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT cName, COUNT(pID) AS num_players FROM Tryout WHERE decision = 'yes' GROUP BY cName"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "cName",
      "y_name": "num_players",
      "x_data": [
        "ASU",
        "FSU"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Number of players accepted by each college",
      "sort": "asc"
    },
    "nl_queries": [
      "How many players were accepted by each college?",
      "Which positions have the highest acceptance rate? (Considering only accepted players)",
      "What is the distribution of players' high school scores among the accepted players?",
      "How does the number of accepted players correlate with the college's enrollment numbers?"
    ],
    "irrelevant_tables": [
      "College"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2787": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT cName, COUNT(*) AS number_of_players FROM Tryout GROUP BY cName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT cName, COUNT(*) AS number_of_players FROM Tryout GROUP BY cName"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "cName",
      "y_name": "number_of_players",
      "x_data": [
        "LSU",
        "ASU",
        "FSU"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of players who tried out for each college",
      "sort": "asc"
    },
    "nl_queries": [
      "How many players tried out for each college?",
      "Which college had the most players trying out?",
      "What is the total number of players who tried out across all colleges?",
      "Show the number of players who tried out for each college, sorted by the number of players in descending order."
    ],
    "irrelevant_tables": [
      "College"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2795": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT state, COUNT(pID) AS num_players FROM Tryout JOIN College ON Tryout.cName = College.cName GROUP BY state",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT state, COUNT(pID) AS num_players FROM Tryout JOIN College ON Tryout.cName = College.cName GROUP BY state"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state",
      "y_name": "num_players",
      "x_data": [
        "LA",
        "AZ"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Number of players who tried out by state",
      "sort": "asc"
    },
    "nl_queries": [
      "How many players tried out for colleges in each state?",
      "Which college has the most players trying out?",
      "How many goalies tried out for ASU?",
      "What is the total enrollment of colleges where players tried out?"
    ],
    "irrelevant_tables": [
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2799": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT state, SUM(enr) AS total_enr FROM College GROUP BY state",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT state, SUM(enr) AS total_enr FROM College GROUP BY state"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state",
      "y_name": "total_enr",
      "x_data": [
        "LA",
        "AZ",
        "OK"
      ],
      "y_data": [
        18000,
        12000,
        22000
      ],
      "classify": [],
      "describe": "Total enrollment by state",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total enrollment for each state?",
      "Which state has the highest total enrollment?",
      "How does the total enrollment compare across states?",
      "What is the distribution of total enrollment across states?"
    ],
    "irrelevant_tables": [
      "Tryout",
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2802": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT cName, COUNT(*) AS player_count FROM Tryout WHERE decision = 'yes' GROUP BY cName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT cName, COUNT(*) AS player_count FROM Tryout WHERE decision = 'yes' GROUP BY cName"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "cName",
      "y_name": "player_count",
      "x_data": [
        "ASU",
        "FSU"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Number of players accepted by each college",
      "sort": "asc"
    },
    "nl_queries": [
      "How many players were accepted by each college?",
      "Which colleges accepted players and how many did each accept?",
      "Which college has the highest number of accepted players?",
      "Show the number of players accepted by each college in ascending order."
    ],
    "irrelevant_tables": [
      "College",
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2804": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Event_Type_Code, COUNT(p.Product_ID) AS Product_Count FROM Events e LEFT JOIN Products_in_Events pi ON e.Event_ID = pi.Event_ID LEFT JOIN Products p ON pi.Product_ID = p.Product_ID GROUP BY e.Event_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Event_Type_Code, COUNT(p.Product_ID) AS Product_Count FROM Events e LEFT JOIN Products_in_Events pi ON e.Event_ID = pi.Event_ID LEFT JOIN Products p ON pi.Product_ID = p.Product_ID GROUP BY e.Event_Type_Code"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Event_Type_Code",
      "y_name": "Product_Count",
      "x_data": [
        "Trade Show",
        "Press Conferenc"
      ],
      "y_data": [
        0,
        1
      ],
      "classify": [],
      "describe": "This bar chart shows the count of products associated with each event type.",
      "sort": "asc"
    },
    "nl_queries": [
      "How many products are associated with each type of event?",
      "Which events have the highest number of products associated?",
      "What is the distribution of product types across different events?",
      "Are there any patterns in the types of events that have the highest product counts?"
    ],
    "irrelevant_tables": [
      "Agreements",
      "Finances",
      "Parties",
      "Channels",
      "Assets",
      "Locations",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2807": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT P.Product_Name, E.Event_Type_Code, SUM(P.Product_Price) AS Total_Price FROM Products P JOIN Products_in_Events PE ON P.Product_ID = PE.Product_ID JOIN Events E ON PE.Event_ID = E.Event_ID GROUP BY P.Product_Name, E.Event_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT P.Product_Name, E.Event_Type_Code, SUM(P.Product_Price) AS Total_Price FROM Products P JOIN Products_in_Events PE ON P.Product_ID = PE.Product_ID JOIN Events E ON PE.Event_ID = E.Event_ID GROUP BY P.Product_Name, E.Event_Type_Code"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Product_Name",
      "y_name": "Total_Price",
      "x_data": [
        "Business Policy",
        "Special Dinning",
        "Men suits"
      ],
      "y_data": [
        1336.26,
        2894.94,
        3298.84
      ],
      "classify": [
        "Event_Type_Code"
      ],
      "describe": "This visualization shows the total price of products grouped by their names, stacked by event types.",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total prices of products involved in different types of events?",
      "Which product has the highest total price across all event types?",
      "How does the total price distribution of products vary between different event types?",
      "Can we identify any event type that consistently involves high-priced products?"
    ],
    "irrelevant_tables": [
      "Agreements",
      "Finances",
      "Parties",
      "Channels",
      "Events",
      "Parties_in_Events",
      "Assets",
      "Locations",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2817": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Region, cr.Gold, cr.Silver, cr.Bronze FROM club c JOIN club_rank cr ON c.Club_ID = cr.Club_ID",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Region, cr.Gold, cr.Silver, cr.Bronze FROM club c JOIN club_rank cr ON c.Club_ID = cr.Club_ID"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Region",
      "y_name": "Total Medals",
      "x_data": [
        "USA",
        "UK",
        "China"
      ],
      "y_data": [
        {
          "Gold": 7,
          "Silver": 4,
          "Bronze": 2
        },
        {
          "Gold": 11,
          "Silver": 11,
          "Bronze": 9
        },
        {
          "Gold": 8,
          "Silver": 7,
          "Bronze": 6
        }
      ],
      "classify": [
        "Gold",
        "Silver",
        "Bronze"
      ],
      "describe": "Distribution of medals won by clubs in different regions.",
      "sort": null
    },
    "nl_queries": [
      "Show the distribution of medals (Gold, Silver, Bronze) won by clubs in different regions.",
      "Compare the total number of medals won by clubs in different regions.",
      "Identify which region has the highest number of each type of medal.",
      "Analyze the overall performance of clubs by summing up all types of medals in each region."
    ],
    "irrelevant_tables": [
      "competition_result",
      "player",
      "competition"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2822": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name AS Club_Name, Total FROM club_rank JOIN club ON club_rank.Club_ID = club.Club_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name AS Club_Name, Total FROM club_rank JOIN club ON club_rank.Club_ID = club.Club_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Club_Name",
      "y_name": "Total",
      "x_data": [
        "BK Slide",
        "IFG",
        "AIB"
      ],
      "y_data": [
        31.0,
        21.0,
        13.0
      ],
      "classify": [],
      "describe": "Total medals won by each club",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of medals won by each club?",
      "How many gold medals has each club won?",
      "How many silver medals has each club won?",
      "How many bronze medals has each club won?"
    ],
    "irrelevant_tables": [
      "competition_result",
      "competition",
      "player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2850": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT artists.name AS artist, COUNT(albums.id) AS album_count FROM artists JOIN albums ON artists.id = albums.artist_id GROUP BY artists.name ORDER BY album_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT artists.name AS artist, COUNT(albums.id) AS album_count FROM artists JOIN albums ON artists.id = albums.artist_id GROUP BY artists.name ORDER BY album_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "artist",
      "y_name": "album_count",
      "x_data": [
        "Accept",
        "AC/DC"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of albums by each artist",
      "sort": "desc"
    },
    "nl_queries": [
      "How many albums does each artist have?",
      "Which artist has the highest number of albums?",
      "What is the total number of albums for the top 3 artists?",
      "How does the distribution of album counts vary among the artists?"
    ],
    "irrelevant_tables": [
      "invoice_lines",
      "invoices",
      "tracks",
      "genres",
      "employees",
      "customers",
      "playlists",
      "playlist_tracks",
      "media_types",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2851": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT billing_country AS country, SUM(total) AS total_sales FROM invoices GROUP BY billing_country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT billing_country AS country, SUM(total) AS total_sales FROM invoices GROUP BY billing_country"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "country",
      "y_name": "total_sales",
      "x_data": [
        "Germany",
        "Norway",
        "Belgium"
      ],
      "y_data": [
        1.98,
        3.96,
        5.94
      ],
      "classify": [],
      "describe": "Total sales by country",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total sales amount for each country?",
      "How do the total sales compare between countries?",
      "Which country has the highest total sales?",
      "Can you show the total sales for the top 2 countries?"
    ],
    "irrelevant_tables": [
      "tracks",
      "albums",
      "invoice_lines",
      "sqlite_sequence",
      "playlists",
      "media_types",
      "artists",
      "genres",
      "playlist_tracks",
      "customers",
      "employees"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2852": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.country, SUM(i.total) AS total_sales FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.country, SUM(i.total) AS total_sales FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.country"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "country",
      "y_name": "total_sales",
      "x_data": [
        "Germany",
        "Norway",
        "Belgium"
      ],
      "y_data": [
        1.98,
        3.96,
        5.94
      ],
      "classify": [],
      "describe": "Total sales by country",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total sales by country?",
      "Which country has the highest total sales?",
      "How do the total sales compare among the top three countries?",
      "What is the proportion of total sales for each country?"
    ],
    "irrelevant_tables": [
      "tracks",
      "albums",
      "invoice_lines",
      "sqlite_sequence",
      "playlists",
      "media_types",
      "artists",
      "genres",
      "playlist_tracks",
      "employees"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2857": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT billing_country, SUM(total) AS total_sales FROM invoices GROUP BY billing_country ORDER BY total_sales DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT billing_country, SUM(total) AS total_sales FROM invoices GROUP BY billing_country ORDER BY total_sales DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "billing_country",
      "y_name": "total_sales",
      "x_data": [
        "Germany",
        "Norway",
        "Belgium"
      ],
      "y_data": [
        1.98,
        3.96,
        5.94
      ],
      "classify": [],
      "describe": "Total sales by billing country",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total sales by billing country?",
      "Which billing country has the highest total sales?",
      "What is the breakdown of total sales for each billing country?",
      "How do the total sales compare between the top three billing countries?"
    ],
    "irrelevant_tables": [
      "tracks",
      "albums",
      "invoice_lines",
      "sqlite_sequence",
      "playlists",
      "media_types",
      "artists",
      "genres",
      "playlist_tracks",
      "customers",
      "employees"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2858": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, s.Number_of_product_category FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID WHERE sd.District_ID = 15",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Store_Name, s.Number_of_product_category FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID WHERE sd.District_ID = 15"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "store_product",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Number_of_product_category",
      "x_data": [
        "Miramichi",
        "Neguac"
      ],
      "y_data": [
        17811.0,
        1678.0
      ],
      "classify": [],
      "describe": "Number of product categories available in each store within District 15",
      "sort": null
    },
    "nl_queries": [
      "Which stores have the highest number of product categories in District 15?",
      "How does the store ranking correlate with the number of product categories in District 15?",
      "What is the distribution of store types in District 15 and their corresponding number of product categories?",
      "How do the number of product categories in stores of District 15 compare with those in other districts?"
    ],
    "irrelevant_tables": [
      "product",
      "store_product"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2861": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Store_Name, COUNT(Product_ID) AS Product_Count FROM store_product INNER JOIN store ON store_product.Store_ID = store.Store_ID GROUP BY Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Store_Name, COUNT(Product_ID) AS Product_Count FROM store_product INNER JOIN store ON store_product.Store_ID = store.Store_ID GROUP BY Store_Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "store_product",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Product_Count",
      "x_data": [
        "Miramichi"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of products available in each store",
      "sort": "null"
    },
    "nl_queries": [
      "How many products are available in each store?",
      "What is the total number of product categories in each store?",
      "What is the ranking of each store based on the number of product categories?",
      "How does the ranking correlate with the number of products available in each store?"
    ],
    "irrelevant_tables": [
      "store_district",
      "district",
      "product"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2864": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT r.Region_name, s.Name, SUM(a.Number_city_affected) AS Total_Cities_Affected FROM storm s JOIN affected_region a ON s.Storm_ID = a.Storm_ID JOIN region r ON a.Region_id = r.Region_id GROUP BY r.Region_name, s.Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT r.Region_name, s.Name, SUM(a.Number_city_affected) AS Total_Cities_Affected FROM storm s JOIN affected_region a ON s.Storm_ID = a.Storm_ID JOIN region r ON a.Region_id = r.Region_id GROUP BY r.Region_name, s.Name"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "storm_record",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Region_name",
      "y_name": "Total_Cities_Affected",
      "x_data": [
        "Afghanistan",
        "Albania",
        "Algeria"
      ],
      "y_data": [
        25,
        15,
        30
      ],
      "classify": [
        "Name"
      ],
      "describe": "Total number of cities affected by each storm in each region",
      "sort": null
    },
    "nl_queries": [
      "Which regions were affected by the storms, and how many cities were affected in each region?",
      "For each storm, how many cities were affected in each region?",
      "Which storm caused the most city-wide impact in each region?",
      "What is the overall distribution of city impacts across all regions for all storms?"
    ],
    "irrelevant_tables": [
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2866": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT r.Region_name, s.Name, ar.Number_city_affected FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON r.Region_id = ar.Region_id",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT r.Region_name, s.Name, ar.Number_city_affected FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON r.Region_id = ar.Region_id"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "storm_record",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Region_name",
      "y_name": "Number_city_affected",
      "x_data": [
        "Afghanistan",
        "Afghanistan",
        "Algeria"
      ],
      "y_data": [
        10.0,
        15.0,
        30.0
      ],
      "classify": [
        "Name"
      ],
      "describe": "Number of cities affected by each storm in different regions",
      "sort": null
    },
    "nl_queries": [
      "Show the number of cities affected by each storm in different regions.",
      "How many cities were affected by each storm within the regions?",
      "Which storm affected the most cities in each region?",
      "Compare the impact of storms on the number of cities affected across different regions."
    ],
    "irrelevant_tables": [
      "storm"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2900": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.department_name, COUNT(se.student_enrolment_id) AS student_count FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.department_name, COUNT(se.student_enrolment_id) AS student_count FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "student_transcripts_tracking",
    "vis_obj": {
      "chart": "bar",
      "x_name": "department_name",
      "y_name": "student_count",
      "x_data": [
        "computer science",
        "history",
        "art"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students enrolled in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of student enrollments across different departments?",
      "Which department has the highest number of student enrollments?",
      "How does the student enrollment count compare across departments?",
      "Can we see the trend of student enrollments over time for the department with the highest enrollments?"
    ],
    "irrelevant_tables": [
      "Sections",
      "Transcript_Contents",
      "Courses",
      "Student_Enrolment_Courses",
      "Addresses",
      "Transcripts"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2903": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.name AS Swimmer, COUNT(r.Result) AS Wins FROM record r JOIN swimmer s ON r.Swimmer_ID = s.ID WHERE r.Result = 'Win' GROUP BY s.name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.name AS Swimmer, COUNT(r.Result) AS Wins FROM record r JOIN swimmer s ON r.Swimmer_ID = s.ID WHERE r.Result = 'Win' GROUP BY s.name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Swimmer",
      "y_name": "Wins",
      "x_data": [
        "Swimmer_1",
        "Swimmer_2"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Count of wins by each swimmer",
      "sort": "desc"
    },
    "nl_queries": [
      "How many wins does each swimmer have?",
      "Which swimmer has the highest number of wins?",
      "What is the distribution of wins among swimmers?",
      "Show the swimmers with at least one win."
    ],
    "irrelevant_tables": [
      "stadium",
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2928": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT name, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time FROM swimmer WHERE ID IN (7, 4, 5)",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT name, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time FROM swimmer WHERE ID IN (7, 4, 5)"
    },
    "reasoning_level": "L3",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "line",
      "x_name": "Distance",
      "y_name": "Time",
      "x_data": [
        "meter_100",
        "meter_200",
        "meter_300",
        "meter_400",
        "meter_500",
        "meter_600",
        "meter_700",
        "Time"
      ],
      "y_data": [
        {
          "name": "Przemysław Stańczyk",
          "values": [
            57.31,
            117.1,
            176.02,
            235.36,
            294.21,
            352.59,
            410.91,
            467.91
          ]
        },
        {
          "name": "Craig Stevens",
          "values": [
            57.35,
            116.34,
            175.9,
            235.72,
            295.08,
            354.45,
            412.69,
            468.67
          ]
        },
        {
          "name": "Federico Colbertaldo",
          "values": [
            57.66,
            116.77,
            176.04,
            235.37,
            294.48,
            353.53,
            412.58,
            469.98
          ]
        }
      ],
      "classify": [
        "name"
      ],
      "describe": "Visualizing the progress of swimmers over different distances.",
      "sort": null
    },
    "nl_queries": [
      "Show the swimming performance of Przemysław Stańczyk, Craig Stevens, and Federico Colbertaldo over various distances.",
      "Compare the swimming times of these three athletes at the 200 meter mark.",
      "Analyze the trends in swimming performance for these athletes at the halfway point (350 meters).",
      "Evaluate the overall performance and identify which swimmer has the best finishing time."
    ],
    "irrelevant_tables": [
      "record",
      "stadium",
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2932": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ex.Theme, SUM(er.Attendance) AS Total_Attendance FROM exhibition ex JOIN exhibition_record er ON ex.Exhibition_ID = er.Exhibition_ID GROUP BY ex.Theme",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ex.Theme, SUM(er.Attendance) AS Total_Attendance FROM exhibition ex JOIN exhibition_record er ON ex.Exhibition_ID = er.Exhibition_ID GROUP BY ex.Theme"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Theme",
      "y_name": "Total_Attendance",
      "x_data": [
        "Santa Claus",
        "Christmas stocking",
        "Santa Claus and Rudolph the Red-Nosed Reindeer"
      ],
      "y_data": [
        5046,
        0,
        0
      ],
      "classify": [],
      "describe": "Total attendance for each exhibition theme",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total attendance for each exhibition theme?",
      "Which theme had the highest total attendance?",
      "What is the total ticket revenue generated for each theme?",
      "Which artist generated the highest total ticket revenue?"
    ],
    "irrelevant_tables": [
      "artist"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2934": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date, SUM(Attendance) AS Total_Attendance FROM exhibition_record WHERE Exhibition_ID = 1 GROUP BY Date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date, SUM(Attendance) AS Total_Attendance FROM exhibition_record WHERE Exhibition_ID = 1 GROUP BY Date"
    },
    "reasoning_level": "L3",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date",
      "y_name": "Total_Attendance",
      "x_data": [
        "December 2",
        "December 5",
        "December 7"
      ],
      "y_data": [
        965,
        1098,
        2983
      ],
      "classify": [],
      "describe": "Total attendance over different dates for Exhibition ID 1",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total attendance for each date in Exhibition ID 1?",
      "How does the total attendance vary over dates for Exhibition ID 1?",
      "Compare the total attendance of Exhibition ID 1 over its different dates.",
      "Identify any patterns or trends in the attendance data for Exhibition ID 1."
    ],
    "irrelevant_tables": [
      "artist"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2941": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Year, COUNT(*) AS NumberOfExhibitions FROM exhibition e GROUP BY e.Year ORDER BY e.Year",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Year, COUNT(*) AS NumberOfExhibitions FROM exhibition e GROUP BY e.Year ORDER BY e.Year"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "NumberOfExhibitions",
      "x_data": [
        "2004",
        "2005",
        "2006"
      ],
      "y_data": [
        "1",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Number of exhibitions per year",
      "sort": "asc"
    },
    "nl_queries": [
      "How many exhibitions were held each year?",
      "What is the total attendance for exhibitions each year?",
      "Which themes had the highest attendance each year?",
      "What are the average ticket prices of exhibitions with the highest attendance each year?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2958": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT organisation_id, SUM(grant_amount) AS total_grant_amount FROM Grants GROUP BY organisation_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT organisation_id, SUM(grant_amount) AS total_grant_amount FROM Grants GROUP BY organisation_id"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "organisation_id",
      "y_name": "total_grant_amount",
      "x_data": [
        "10",
        "3",
        "14"
      ],
      "y_data": [
        "4094.542",
        "281.2446",
        "4515948"
      ],
      "classify": [],
      "describe": "Sum of grant amounts for each organisation",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total grant amount received by each organisation?",
      "Which organisation received the highest total grant amount?",
      "How does the total grant amount compare among the top three organisations?",
      "What is the percentage distribution of total grant amounts among the organisations?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Documents",
      "Staff_Roles",
      "Organisations",
      "Tasks",
      "Document_Types",
      "Organisation_Types",
      "Research_Staff",
      "Project_Staff",
      "Research_Outcomes",
      "Project_Outcomes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2960": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT o.organisation_type, o.organisation_id, SUM(g.grant_amount) AS total_grant_amount FROM Grants g JOIN Organisations o ON g.organisation_id = o.organisation_id GROUP BY o.organisation_type, o.organisation_id",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT o.organisation_type, o.organisation_id, SUM(g.grant_amount) AS total_grant_amount FROM Grants g JOIN Organisations o ON g.organisation_id = o.organisation_id GROUP BY o.organisation_type, o.organisation_id"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "organisation_type",
      "y_name": "total_grant_amount",
      "x_data": [
        "RES",
        "SPON"
      ],
      "y_data": [
        4515948.282,
        2812.446
      ],
      "classify": [
        "organisation_id"
      ],
      "describe": "Total grant amounts by organisation type, further classified by organisation ID",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total grant amount received by each organisation type?",
      "Which organisations within each type received the highest total grant amounts?",
      "What are the detailed grant amounts for each organisation within the organisation types?",
      "How does the grant distribution vary across different organisation types and their respective organisations?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Documents",
      "Staff_Roles",
      "Research_Outcomes",
      "Tasks",
      "Document_Types",
      "Organisation_Types",
      "Project_Outcomes",
      "Project_Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2962": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT o.organisation_details, COUNT(p.project_id) AS project_count FROM Organisations o JOIN Projects p ON o.organisation_id = p.organisation_id GROUP BY o.organisation_details ORDER BY project_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT o.organisation_details, COUNT(p.project_id) AS project_count FROM Organisations o JOIN Projects p ON o.organisation_id = p.organisation_id GROUP BY o.organisation_details ORDER BY project_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "organisation_details",
      "y_name": "project_count",
      "x_data": [
        "et",
        "eius",
        "impedit"
      ],
      "y_data": [
        10,
        7,
        5
      ],
      "classify": [],
      "describe": "Number of projects per organisation",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of projects per organisation?",
      "Which organisation has the highest number of projects?",
      "How does the number of projects compare between organisations?",
      "What is the distribution of project counts across all organisations?"
    ],
    "irrelevant_tables": [
      "Documents",
      "Staff_Roles",
      "Research_Outcomes",
      "Tasks",
      "Document_Types",
      "Organisation_Types",
      "Grants",
      "Project_Outcomes",
      "Research_Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2963": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT organisation_id, SUM(grant_amount) AS total_grant_amount FROM Grants GROUP BY organisation_id ORDER BY total_grant_amount DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT organisation_id, SUM(grant_amount) AS total_grant_amount FROM Grants GROUP BY organisation_id ORDER BY total_grant_amount DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "organisation_id",
      "y_name": "total_grant_amount",
      "x_data": [
        "14",
        "10",
        "3"
      ],
      "y_data": [
        "4515948",
        "4094.542",
        "281.2446"
      ],
      "classify": [],
      "describe": "Summarize total grant amounts by organization",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount of grants given to each organization?",
      "How does the total grant amount vary between organizations?",
      "Which organization received the highest total grant amount?",
      "What is the distribution of total grant amounts across different organizations?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Documents",
      "Staff_Roles",
      "Research_Outcomes",
      "Organisations",
      "Tasks",
      "Document_Types",
      "Organisation_Types",
      "Project_Outcomes",
      "Research_Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2971": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT o.customer_id, COUNT(s.shipment_id) AS shipment_count FROM Orders o JOIN Shipments s ON o.order_id = s.order_id GROUP BY o.customer_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT o.customer_id, COUNT(s.shipment_id) AS shipment_count FROM Orders o JOIN Shipments s ON o.order_id = s.order_id GROUP BY o.customer_id"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "tracking_orders",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_id",
      "y_name": "shipment_count",
      "x_data": [
        "2",
        "11",
        "4"
      ],
      "y_data": [
        "1",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Count of shipments by customer ID",
      "sort": "asc"
    },
    "nl_queries": [
      "How many shipments have been made for each customer?",
      "Which customer has the highest number of shipments?",
      "What is the status of orders for the customer with the highest number of shipments?",
      "Which products are included in the orders of the customer with the highest number of shipments?"
    ],
    "irrelevant_tables": [
      "Invoices",
      "Shipment_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2998": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT transaction_type_code, COUNT(*) AS transaction_count FROM Transactions GROUP BY transaction_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT transaction_type_code, COUNT(*) AS transaction_count FROM Transactions GROUP BY transaction_type_code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "transaction_type_code",
      "y_name": "transaction_count",
      "x_data": [
        "SALE",
        "PUR"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of transactions by type",
      "sort": null
    },
    "nl_queries": [
      "What is the count of transactions by type?",
      "What is the total amount of transactions by type?",
      "Which investor has the highest number of transactions?",
      "What is the distribution of share count by transaction type?"
    ],
    "irrelevant_tables": [
      "Investors",
      "Transactions_Lots",
      "Purchases",
      "Sales",
      "Lots",
      "Ref_Transaction_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3004": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT investor_id, transaction_type_code, SUM(amount_of_transaction) AS total_amount FROM Transactions GROUP BY investor_id, transaction_type_code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT investor_id, transaction_type_code, SUM(amount_of_transaction) AS total_amount FROM Transactions GROUP BY investor_id, transaction_type_code"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "investor_id",
      "y_name": "total_amount",
      "x_data": [
        "2",
        "6",
        "18"
      ],
      "y_data": [
        "48777.9690",
        "302507.6996",
        "27.2570"
      ],
      "classify": [
        "transaction_type_code"
      ],
      "describe": "Total amount of transactions grouped by investor and transaction type",
      "sort": null
    },
    "nl_queries": [
      "What is the total amount of transactions for each investor grouped by transaction type?",
      "Which investor has the highest total transaction amount and what type of transactions contribute to it?",
      "How do the total purchase and sale amounts compare for each investor?",
      "What are the trends in transaction amounts over time for the top investor?"
    ],
    "irrelevant_tables": [
      "Transactions_Lots",
      "Purchases",
      "Sales",
      "Lots",
      "Ref_Transaction_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3067": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, COUNT(*) as tweet_count FROM user_profiles INNER JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, COUNT(*) as tweet_count FROM user_profiles INNER JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "twitter_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "tweet_count",
      "x_data": [
        "Iron Man",
        "Black Widow"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Counting the number of tweets per user",
      "sort": "desc"
    },
    "nl_queries": [
      "How many tweets has each user posted?",
      "Which user has the highest number of tweets?",
      "What is the total number of tweets made by users with more than 1 million followers?",
      "How many followers does the most active user have?"
    ],
    "irrelevant_tables": [
      "follows"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3070": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT School, Enrollment FROM university",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT School, Enrollment FROM university"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School",
      "y_name": "Enrollment",
      "x_data": [
        "University of Delaware",
        "Lebanon Valley College",
        "University of Rhode Island"
      ],
      "y_data": [
        19067,
        2100,
        19095
      ],
      "classify": [],
      "describe": "Comparison of Enrollment numbers among different universities",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the enrollment for each university?",
      "How does the enrollment compare between public and private universities?",
      "Which university has the highest enrollment?",
      "What is the average enrollment across all universities?"
    ],
    "irrelevant_tables": [
      "basketball_match"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3229": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Winery, AVG(Price) AS Avg_Price FROM wine GROUP BY Winery ORDER BY Avg_Price DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Winery, AVG(Price) AS Avg_Price FROM wine GROUP BY Winery ORDER BY Avg_Price DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Winery",
      "y_name": "Avg_Price",
      "x_data": [
        "Robert Biale",
        "Chiarello Family"
      ],
      "y_data": [
        42.67,
        35
      ],
      "classify": [],
      "describe": "Average price of wines by winery",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average price of wines for each winery?",
      "Which winery has the highest average wine price?",
      "How do the average prices of wines compare across different wineries?",
      "What insights can we gain about the price range of wines from different wineries?"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3230": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT State, Grape, AVG(Price) AS AvgPrice FROM wine GROUP BY State, Grape",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT State, Grape, AVG(Price) AS AvgPrice FROM wine GROUP BY State, Grape"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "State",
      "y_name": "AvgPrice",
      "x_data": [
        "California"
      ],
      "y_data": [
        39.67
      ],
      "classify": [
        "Grape"
      ],
      "describe": "Average price of wine by grape type for each state",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average price of wine by grape type for each state?",
      "Which state has the highest average price for Zinfandel?",
      "Compare the average prices of Cabernet Franc and Zinfandel in California.",
      "How do the average prices of different grape types in California compare to those in other states?"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3240": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Appelation, AVG(Price) AS Average_Price FROM wine GROUP BY Appelation",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Appelation, AVG(Price) AS Average_Price FROM wine GROUP BY Appelation"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Appelation",
      "y_name": "Average_Price",
      "x_data": [
        "St. Helena",
        "Napa Valley"
      ],
      "y_data": [
        44.0,
        37.5
      ],
      "classify": [],
      "describe": "Average price of wines by Appellation",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average price of wines for each appellation?",
      "What is the distribution of wine scores for different appellations?",
      "How does the average score compare to the average price for each appellation?",
      "Which wineries produce the highest scoring wines in the most expensive appellations?"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3259": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT College, COUNT(Result) AS Total_Submissions FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY College",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT College, COUNT(Result) AS Total_Submissions FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY College"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College",
      "y_name": "Total_Submissions",
      "x_data": [
        "Notre Dame",
        "Florida",
        "Miami (OH)"
      ],
      "y_data": [
        0,
        2,
        1
      ],
      "classify": [],
      "describe": "The number of submissions made by authors from each college.",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of submissions from each college?",
      "How many submissions from each college were accepted or rejected?",
      "What is the acceptance rate for submissions from each college?",
      "How do the average scores of accepted and rejected submissions compare for each college?"
    ],
    "irrelevant_tables": [
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3262": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT College, AVG(Scores) AS Avg_Scores FROM submission GROUP BY College",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT College, AVG(Scores) AS Avg_Scores FROM submission GROUP BY College"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College",
      "y_name": "Avg_Scores",
      "x_data": [
        "Notre Dame",
        "Florida",
        "Miami (OH)"
      ],
      "y_data": [
        72.0,
        79.0,
        78.0
      ],
      "classify": [],
      "describe": "Average scores by college",
      "sort": null
    },
    "nl_queries": [
      "What is the average score of submissions from each college?",
      "Which college has the highest average submission score?",
      "What are the submission scores for each author from Florida?",
      "Which submissions from Florida were accepted or rejected?"
    ],
    "irrelevant_tables": [
      "workshop",
      "Acceptance"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3263": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Author, COUNT(Result) AS Total_Submissions FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY Author",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Author, COUNT(Result) AS Total_Submissions FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY Author"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Author",
      "y_name": "Total_Submissions",
      "x_data": [
        "Steve Niehaus",
        "Sammy Green",
        "Sherman Smith"
      ],
      "y_data": [
        0,
        2,
        1
      ],
      "classify": [],
      "describe": "Total number of submissions by each author",
      "sort": "null"
    },
    "nl_queries": [
      "How many submissions did each author make?",
      "What is the acceptance rate for each author?",
      "Which workshops had the highest acceptance rates?",
      "What were the average scores of accepted submissions by workshop?"
    ],
    "irrelevant_tables": [
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3264": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT submission.College, COUNT(acceptance.Result) AS Acceptances FROM submission JOIN acceptance ON submission.Submission_ID = acceptance.Submission_ID WHERE acceptance.Result = 'Accepted' GROUP BY submission.College",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT submission.College, COUNT(acceptance.Result) AS Acceptances FROM submission JOIN acceptance ON submission.Submission_ID = acceptance.Submission_ID WHERE acceptance.Result = 'Accepted' GROUP BY submission.College"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College",
      "y_name": "Acceptances",
      "x_data": [
        "Florida"
      ],
      "y_data": [
        1
      ],
      "classify": [],
      "describe": "Number of accepted submissions by college",
      "sort": "desc"
    },
    "nl_queries": [
      "How many submissions were accepted from each college?",
      "Which colleges had the highest acceptance rates?",
      "What is the overall acceptance rate for each college?",
      "How does the acceptance rate of submissions from different colleges compare over time?"
    ],
    "irrelevant_tables": [
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3265": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT College, COUNT(*) AS Submission_Count FROM submission GROUP BY College",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT College, COUNT(*) AS Submission_Count FROM submission GROUP BY College"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College",
      "y_name": "Submission_Count",
      "x_data": [
        "Notre Dame",
        "Florida",
        "Miami (OH)"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of submissions per college",
      "sort": null
    },
    "nl_queries": [
      "What is the number of submissions from each college?",
      "How many submissions were accepted or rejected from each college?",
      "Which college has the highest average score of submissions?",
      "How does the acceptance rate compare across different colleges?"
    ],
    "irrelevant_tables": [
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3268": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "TotalPopulation",
      "x_data": [
        "North America",
        "Asia",
        "Africa"
      ],
      "y_data": [
        103000,
        22720000,
        12878000
      ],
      "classify": [],
      "describe": "Total population by continent",
      "sort": null
    },
    "nl_queries": [
      "What is the total population for each continent?",
      "How does the population of Asia compare to other continents?",
      "Which continent has the highest population?",
      "What is the population distribution across continents?"
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence",
      "countrylanguage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3270": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent, SUM(Population) AS Population FROM country GROUP BY Continent ORDER BY Population DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent, SUM(Population) AS Population FROM country GROUP BY Continent ORDER BY Population DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "Population",
      "x_data": [
        "Asia",
        "Africa",
        "Europe",
        "North America",
        "South America",
        "Oceania",
        "Antarctica"
      ],
      "y_data": [
        3705025700,
        784476000,
        727082222,
        515670000,
        329718000,
        30400000,
        1000
      ],
      "classify": [],
      "describe": "Total population by continent",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total population of each continent?",
      "What is the average life expectancy of countries in each continent?",
      "Which continents have the highest total GNP?",
      "How does the population distribution compare to the surface area distribution across continents?"
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence",
      "countrylanguage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3271": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "TotalPopulation",
      "x_data": [
        "Asia",
        "Africa",
        "North America"
      ],
      "y_data": [
        22720000,
        12878000,
        103000
      ],
      "classify": [],
      "describe": "Total population by continent",
      "sort": null
    },
    "nl_queries": [
      "What is the total population of each continent?",
      "Which continent has the highest population?",
      "How does the population of Africa compare to other continents?",
      "What is the relative population distribution across all continents?"
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence",
      "countrylanguage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3272": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Continent, cl.Language, SUM(c.Population * cl.Percentage / 100) AS Population FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent, cl.Language ORDER BY c.Continent, Population DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Continent, cl.Language, SUM(c.Population * cl.Percentage / 100) AS Population FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent, cl.Language ORDER BY c.Continent, Population DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Continent",
      "y_name": "Population",
      "x_data": [
        "North America",
        "Asia",
        "Africa"
      ],
      "y_data": [
        10000000,
        50000000,
        30000000
      ],
      "classify": [
        "Language"
      ],
      "describe": "Population distribution by language across continents",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the population distribution by language across different continents?",
      "Which languages have the highest population representation within each continent?",
      "What is the total population for each continent based on the languages spoken?",
      "How does the population of different languages compare across continents?"
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3273": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "TotalPopulation",
      "x_data": [
        "Africa",
        "Asia",
        "Europe",
        "North America",
        "Oceania",
        "South America"
      ],
      "y_data": [
        784141000,
        3705025700,
        730074600,
        481377000,
        314399000,
        345780000
      ],
      "classify": [],
      "describe": "Total population by continent",
      "sort": null
    },
    "nl_queries": [
      "What is the total population for each continent?",
      "Which continent has the highest total population?",
      "What is the percentage contribution of each continent to the world's total population?",
      "How does the population distribution compare between continents with the largest and smallest populations?"
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3274": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "AvgLifeExpectancy",
      "x_data": [
        "Asia",
        "Africa",
        "North America"
      ],
      "y_data": [
        60.9,
        40.5,
        78.4
      ],
      "classify": [],
      "describe": "Average life expectancy by continent",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average life expectancy by continent?",
      "Which continent has the highest average life expectancy?",
      "How does the average life expectancy in Asia compare to Africa?",
      "What is the difference between the highest and lowest average life expectancy among continents?"
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3278": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Days_held FROM wrestler",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Days_held FROM wrestler"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "wrestler",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Days_held",
      "x_data": [
        "Rey Misterio Sr.",
        "Fishman",
        "Villaño IV"
      ],
      "y_data": [
        344,
        113,
        1285
      ],
      "classify": [],
      "describe": "Days held by each wrestler",
      "sort": "desc"
    },
    "nl_queries": [
      "How many days did each wrestler hold their reign?",
      "Which wrestler held their reign for the longest time?",
      "Compare the days held by Villaño IV to the other wrestlers.",
      "Order the wrestlers by the number of days they held their reign."
    ],
    "irrelevant_tables": [
      "elimination"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1488@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Season, COUNT(id) AS Game_Count FROM game GROUP BY Season ORDER BY Season ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Season, COUNT(id) AS Game_Count FROM game GROUP BY Season ORDER BY Season ASC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Season",
      "y_name": "Game_Count",
      "x_data": [
        "2007"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of games per season",
      "sort": "asc"
    },
    "nl_queries": [
      "How many games were played each season?",
      "Which season had the highest number of games?",
      "Compare the number of games played in each season over time.",
      "Analyze the trend of game numbers over the seasons."
    ],
    "irrelevant_tables": [
      "injury_accident",
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1491@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT game.Season, COUNT(injury_accident.id) AS Total_Injuries FROM game JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY game.Season ORDER BY game.Season",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT game.Season, COUNT(injury_accident.id) AS Total_Injuries FROM game JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY game.Season ORDER BY game.Season"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Season",
      "y_name": "Total_Injuries",
      "x_data": [
        "2007"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Total number of injuries per season",
      "sort": "asc"
    },
    "nl_queries": [
      "How many injuries occurred each season?",
      "How do the number of injuries compare between seasons?",
      "What is the trend in the number of injuries over the seasons?",
      "Which season had the highest number of injuries?"
    ],
    "irrelevant_tables": [
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1523@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.Name AS DepartmentName, COUNT(u.Patient) AS NumberOfProcedures, p.Name AS PhysicianName FROM Undergoes u JOIN Affiliated_With a ON u.Physician = a.Physician JOIN Department d ON a.Department = d.DepartmentID JOIN Physician p ON u.Physician = p.EmployeeID GROUP BY d.Name, p.Name ORDER BY d.Name, p.Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.Name AS DepartmentName, COUNT(u.Patient) AS NumberOfProcedures, p.Name AS PhysicianName FROM Undergoes u JOIN Affiliated_With a ON u.Physician = a.Physician JOIN Department d ON a.Department = d.DepartmentID JOIN Physician p ON u.Physician = p.EmployeeID GROUP BY d.Name, p.Name ORDER BY d.Name, p.Name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "DepartmentName",
      "y_name": "NumberOfProcedures",
      "x_data": [
        "General Medicine",
        "General Medicine",
        "General Medicine"
      ],
      "y_data": [
        1,
        2,
        1
      ],
      "classify": [
        "PhysicianName"
      ],
      "describe": "Number of procedures performed by each physician in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the number of procedures performed by each physician in each department?",
      "Which department has the highest number of procedures performed by a single physician?",
      "How many procedures were performed in each department by the top-performing physicians?",
      "Compare the number of procedures performed in the General Medicine department by different physicians."
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Medication",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Appointment",
      "Patient"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1525@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Physician.Name AS Physician, COUNT(Appointment.AppointmentID) AS AppointmentCount FROM Physician JOIN Appointment ON Physician.EmployeeID = Appointment.Physician GROUP BY Physician.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Physician.Name AS Physician, COUNT(Appointment.AppointmentID) AS AppointmentCount FROM Physician JOIN Appointment ON Physician.EmployeeID = Appointment.Physician GROUP BY Physician.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Physician",
      "y_name": "AppointmentCount",
      "x_data": [
        "John Dorian",
        "Elliot Reid"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of appointments per physician",
      "sort": null
    },
    "nl_queries": [
      "How many appointments did each physician have?",
      "Which physician had the most appointments?",
      "Compare the number of appointments between John Dorian and Elliot Reid.",
      "What is the total number of appointments handled by all physicians?"
    ],
    "irrelevant_tables": [
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Medication",
      "Trained_In",
      "Prescribes",
      "Stay",
      "Undergoes",
      "Affiliated_With",
      "Patient",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1532@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.Name AS Patient_Name, COUNT(u.Procedures) AS Procedure_Count FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient GROUP BY p.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.Name AS Patient_Name, COUNT(u.Procedures) AS Procedure_Count FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient GROUP BY p.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Patient_Name",
      "y_name": "Procedure_Count",
      "x_data": [
        "John Smith",
        "Grace Ritchie",
        "Random J. Patient"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of procedures undergone by each patient",
      "sort": "desc"
    },
    "nl_queries": [
      "How many procedures did each patient undergo?",
      "Which physician performed the most procedures?",
      "Which patient had the most procedures performed by a specific physician?",
      "What is the distribution of procedures across different rooms?"
    ],
    "irrelevant_tables": [
      "Medication",
      "Room",
      "On_Call",
      "Procedures",
      "Nurse",
      "Block",
      "Physician",
      "Trained_In",
      "Stay",
      "Affiliated_With",
      "Appointment",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2308@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer_Name, f.Name AS Furniture_Name, fm.Price_in_Dollar FROM furniture_manufacte fm JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer_Name, f.Name AS Furniture_Name, fm.Price_in_Dollar FROM furniture_manufacte fm JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer_Name",
      "y_name": "Price_in_Dollar",
      "x_data": [
        "Chevrolet House",
        "Unknown",
        "Unknown"
      ],
      "y_data": [
        239.0,
        450.0,
        2124.0
      ],
      "classify": [
        "Furniture_Name"
      ],
      "describe": "Comparison of furniture prices by manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the prices of different furniture items sold by each manufacturer?",
      "Which manufacturer sells the most expensive furniture item?",
      "How does the number of components in each furniture item compare to its price?",
      "Which manufacturer has the highest number of shops and how does this correlate with their furniture prices?"
    ],
    "irrelevant_tables": [
      "furniture_manufacte",
      "manufacturer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2310@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT manufacturer.Name AS Manufacturer, AVG(furniture_manufacte.Price_in_Dollar) AS Avg_Price FROM furniture_manufacte JOIN manufacturer ON furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID GROUP BY manufacturer.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT manufacturer.Name AS Manufacturer, AVG(furniture_manufacte.Price_in_Dollar) AS Avg_Price FROM furniture_manufacte JOIN manufacturer ON furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID GROUP BY manufacturer.Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Avg_Price",
      "x_data": [
        "Chevrolet House",
        "Other Manufacturer 1",
        "Other Manufacturer 2"
      ],
      "y_data": [
        239.0,
        450.0,
        2124.0
      ],
      "classify": [],
      "describe": "This chart shows the average price of furniture manufactured by each manufacturer.",
      "sort": null
    },
    "nl_queries": [
      "What is the average price of furniture manufactured by each manufacturer?",
      "How does the number of components in each furniture affect the average price by manufacturer?",
      "What is the difference in market rate and average price for each furniture type?",
      "Which manufacturers have the highest market rate to price ratio for their furniture?"
    ],
    "irrelevant_tables": [
      "furniture"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2314@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer, f.Name AS Furniture, fm.Price_in_Dollar FROM furniture_manufacte fm JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer, f.Name AS Furniture, fm.Price_in_Dollar FROM furniture_manufacte fm JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID JOIN manufacturer m ON fm.Manufacturer_ID = m.Manufacturer_ID"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Furniture",
      "y_name": "Price_in_Dollar",
      "x_data": [
        "Bookcase",
        "Chabudai",
        "Furniture"
      ],
      "y_data": [
        239.0,
        450.0,
        2124.0
      ],
      "classify": [
        "Manufacturer"
      ],
      "describe": "Price of different furniture items by manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the price of each type of furniture manufactured by different manufacturers?",
      "Which manufacturer offers the most expensive piece of furniture and what is it?",
      "Compare the average price of furniture items produced by different manufacturers.",
      "Analyze the total revenue generated by each manufacturer based on the furniture prices."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2831@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT station.network_name AS station_name, AVG(weekly_weather.high_temperature) AS avg_high_temp FROM weekly_weather JOIN station ON weekly_weather.station_id = station.id GROUP BY station.network_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT station.network_name AS station_name, AVG(weekly_weather.high_temperature) AS avg_high_temp FROM weekly_weather JOIN station ON weekly_weather.station_id = station.id GROUP BY station.network_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "station_name",
      "y_name": "avg_high_temp",
      "x_data": [
        "Amersham",
        "Bushey",
        "Brentwood"
      ],
      "y_data": [
        61.67,
        62.5,
        63.0
      ],
      "classify": [],
      "describe": "This bar chart shows the average high temperature for each station.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average high temperature for each station?",
      "How does the average high temperature compare between stations?",
      "Which station has the highest average high temperature?",
      "What are the high and low temperatures for the station with the highest average high temperature?"
    ],
    "irrelevant_tables": [
      "route",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2834@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.network_name, w.day_of_week, AVG(w.high_temperature) AS avg_high_temp FROM weekly_weather w JOIN station s ON w.station_id = s.id GROUP BY s.network_name, w.day_of_week ORDER BY s.network_name, w.day_of_week",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.network_name, w.day_of_week, AVG(w.high_temperature) AS avg_high_temp FROM weekly_weather w JOIN station s ON w.station_id = s.id GROUP BY s.network_name, w.day_of_week ORDER BY s.network_name, w.day_of_week"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "network_name",
      "y_name": "avg_high_temp",
      "x_data": [
        "Amersham",
        "Amersham",
        "Amersham",
        "Bushey",
        "Bushey",
        "Bushey",
        "Brentwood",
        "Brentwood",
        "Brentwood"
      ],
      "y_data": [
        61.67,
        66.0,
        60.0,
        62.5,
        65.0,
        63.0,
        58.0,
        61.0,
        60.0
      ],
      "classify": [
        "day_of_week"
      ],
      "describe": "Average high temperature by day of the week for each network station",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average high temperature for each station network by day of the week?",
      "Which station network has the highest average high temperature on Wednesdays?",
      "How does the average high temperature on Mondays compare across different station networks?",
      "Identify the trend in average high temperature from Monday to Wednesday for each station network."
    ],
    "irrelevant_tables": [
      "route",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2838@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT station.network_name, weekly_weather.day_of_week, AVG(weekly_weather.high_temperature) AS avg_high_temp FROM weekly_weather JOIN station ON weekly_weather.station_id = station.id GROUP BY station.network_name, weekly_weather.day_of_week ORDER BY station.network_name, weekly_weather.day_of_week",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT station.network_name, weekly_weather.day_of_week, AVG(weekly_weather.high_temperature) AS avg_high_temp FROM weekly_weather JOIN station ON weekly_weather.station_id = station.id GROUP BY station.network_name, weekly_weather.day_of_week ORDER BY station.network_name, weekly_weather.day_of_week"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "network_name",
      "y_name": "avg_high_temp",
      "x_data": [
        "Amersham",
        "Amersham",
        "Amersham",
        "Bushey",
        "Bushey",
        "Bushey",
        "Brentwood",
        "Brentwood",
        "Brentwood"
      ],
      "y_data": [
        62.5,
        66.0,
        60.0,
        63.0,
        65.0,
        61.0,
        64.0,
        67.0,
        62.0
      ],
      "classify": [
        "day_of_week"
      ],
      "describe": "Average high temperatures for each station across different days of the week",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the average high temperatures at each station over different days of the week?",
      "How do the average high temperatures compare among the stations for each day of the week?",
      "Which station has the highest average high temperature on Wednesdays?",
      "How does the variability in high temperatures across the week differ between Amersham and Brentwood?"
    ],
    "irrelevant_tables": [
      "route",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2841@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT station_id, day_of_week, high_temperature, low_temperature, SUM(precipitation) AS total_precipitation FROM weekly_weather GROUP BY station_id, day_of_week",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT station_id, day_of_week, high_temperature, low_temperature, SUM(precipitation) AS total_precipitation FROM weekly_weather GROUP BY station_id, day_of_week"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "day_of_week",
      "y_name": "total_precipitation",
      "x_data": [
        "Monday",
        "Tuesday",
        "Wednesday"
      ],
      "y_data": [
        90.0,
        20.0,
        10.0
      ],
      "classify": [
        "station_id"
      ],
      "describe": "Total precipitation by day of week for each station",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total precipitation by day of the week for each station?",
      "How does the high and low temperature vary by day of the week for each station?",
      "Which station experiences the highest precipitation on different days of the week?",
      "Analyze the relationship between wind speed and precipitation across different stations and days of the week."
    ],
    "irrelevant_tables": [
      "route",
      "station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2844@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT station_id, day_of_week, SUM(precipitation) AS total_precipitation FROM weekly_weather GROUP BY station_id, day_of_week ORDER BY station_id, day_of_week",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT station_id, day_of_week, SUM(precipitation) AS total_precipitation FROM weekly_weather GROUP BY station_id, day_of_week ORDER BY station_id, day_of_week"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "day_of_week",
      "y_name": "total_precipitation",
      "x_data": [
        "Monday",
        "Tuesday",
        "Wednesday"
      ],
      "y_data": [
        90.0,
        20.0,
        10.0
      ],
      "classify": [
        "station_id"
      ],
      "describe": "This visualization shows the total precipitation for each day of the week, grouped by station.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total precipitation for each day of the week at each station?",
      "How does the total precipitation vary across different stations for each day of the week?",
      "Which station experiences the highest total precipitation on Mondays?",
      "Compare the total precipitation on Wednesdays between different stations."
    ],
    "irrelevant_tables": [
      "route",
      "station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2845@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, COUNT(train_id) AS train_count FROM train JOIN route ON train.id = route.train_id GROUP BY name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, COUNT(train_id) AS train_count FROM train JOIN route ON train.id = route.train_id GROUP BY name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "train_count",
      "x_data": [
        "Ananthapuri Express",
        "Guruvayur Express"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of trains per train name",
      "sort": "desc"
    },
    "nl_queries": [
      "How many trains are there for each train name?",
      "Which train name has the highest number of trains?",
      "What is the distribution of trains for each train name?",
      "How does the train count compare between Ananthapuri Express and Guruvayur Express?"
    ],
    "irrelevant_tables": [
      "weekly_weather"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2865@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Name, s.Max_speed, COUNT(a.Region_id) AS Number_of_Regions FROM storm s JOIN affected_region a ON s.Storm_ID = a.Storm_ID GROUP BY s.Name, s.Max_speed",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Name, s.Max_speed, COUNT(a.Region_id) AS Number_of_Regions FROM storm s JOIN affected_region a ON s.Storm_ID = a.Storm_ID GROUP BY s.Name, s.Max_speed"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "storm_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Number_of_Regions",
      "x_data": [
        "One",
        "Two",
        "Three"
      ],
      "y_data": [
        2,
        0,
        1
      ],
      "classify": [],
      "describe": "Number of regions affected by each storm along with their maximum speed",
      "sort": null
    },
    "nl_queries": [
      "How many regions were affected by each storm?",
      "Which storm had the highest maximum speed and how many regions did it affect?",
      "What is the relationship between the number of regions affected and the maximum speed of the storms?",
      "Can we identify any trends in the number of regions affected by storms with different maximum speeds?"
    ],
    "irrelevant_tables": [
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2201@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer, SUM(p.Price) AS Total_Product_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer, SUM(p.Price) AS Total_Product_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Sum of product prices for each manufacturer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total price of products for each manufacturer?",
      "Which manufacturer has the highest total price of products?",
      "What is the revenue of each manufacturer and how does it compare to their total product price?",
      "How does the revenue-to-product price ratio compare among manufacturers?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2203@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Product_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Product_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Total product price by manufacturer",
      "sort": null
    },
    "nl_queries": [
      "What is the total price of all products for each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "What is the revenue of the manufacturer with the highest total product price?",
      "How does the revenue compare to the total product price for each manufacturer?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2224@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Products_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS Total_Products_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Products_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Sum of products' prices grouped by manufacturer",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total price of all products for each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "How does the total product price compare among the manufacturers?",
      "Can we see the product prices for each manufacturer in descending order?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2225@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS TotalProductPrice FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manufacturers.Name AS Manufacturer, SUM(Products.Price) AS TotalProductPrice FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "TotalProductPrice",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Comparing the total price of products offered by each manufacturer.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total price of products offered by each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "How does the total product price compare among manufacturers?",
      "What insights can be drawn from the total product prices of different manufacturers?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2235@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Revenue FROM Manufacturers",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Revenue FROM Manufacturers"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Revenue",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        120.0,
        100.0,
        50.0
      ],
      "classify": [],
      "describe": "Comparing revenue of different manufacturers",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the revenue of each manufacturer?",
      "Which manufacturer has the highest revenue?",
      "How does the revenue of Creative Labs compare to the others?",
      "Which manufacturer has the lowest revenue?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2236@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer, SUM(p.Price) AS Total_Product_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer, SUM(p.Price) AS Total_Product_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        0,
        0,
        0
      ],
      "classify": [],
      "describe": "Comparing total product prices grouped by manufacturers.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total price of products for each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "What is the average product price for each manufacturer?",
      "How does the average product price compare to each manufacturer's revenue?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2305@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.Name AS Manufacturer, SUM(p.Price) AS Total_Product_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.Name AS Manufacturer, SUM(p.Price) AS Total_Product_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manufacturer",
      "y_name": "Total_Product_Price",
      "x_data": [
        "Sony",
        "Creative Labs",
        "Hewlett-Packard"
      ],
      "y_data": [
        510,
        510,
        510
      ],
      "classify": [],
      "describe": "Total product price per manufacturer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total price of all products offered by each manufacturer?",
      "Which manufacturer has the highest total product price?",
      "How does the total product price compare among manufacturers?",
      "What other insights can we derive by looking at the revenue of these manufacturers?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "894@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT ta.Name AS Attraction_Name, rat.Attraction_Type_Description AS Attraction_Type, COUNT(v.Visit_ID) AS Visit_Count FROM Tourist_Attractions ta INNER JOIN Ref_Attraction_Types rat ON ta.Attraction_Type_Code = rat.Attraction_Type_Code LEFT JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY ta.Name, rat.Attraction_Type_Description",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT ta.Name AS Attraction_Name, rat.Attraction_Type_Description AS Attraction_Type, COUNT(v.Visit_ID) AS Visit_Count FROM Tourist_Attractions ta INNER JOIN Ref_Attraction_Types rat ON ta.Attraction_Type_Code = rat.Attraction_Type_Code LEFT JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY ta.Name, rat.Attraction_Type_Description"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "cre_Theme_park",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Attraction_Name",
      "y_name": "Visit_Count",
      "x_data": [
        "art museum",
        "UK gallery",
        "flying elephant"
      ],
      "y_data": [
        10,
        5,
        15
      ],
      "classify": [
        "Attraction_Type"
      ],
      "describe": "Number of visits to each tourist attraction, categorized by attraction type.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of visits to each tourist attraction, categorized by attraction type?",
      "Which tourist attractions have the highest number of visits?",
      "How do the visit counts compare across different types of attractions?",
      "Which attraction types are most popular based on visit counts?"
    ],
    "irrelevant_tables": [
      "Museums",
      "Ref_Hotel_Star_Ratings",
      "Royal_Family",
      "Photos",
      "Theme_Parks",
      "Staff",
      "Locations",
      "Street_Markets",
      "Tourist_Attraction_Features",
      "Features",
      "Shops",
      "Hotels",
      "Visitors"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2643@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, Seating FROM track ORDER BY Seating DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, Seating FROM track ORDER BY Seating DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Seating",
      "x_data": [
        "Auto Club Speedway",
        "Chicagoland Speedway",
        "Darlington Raceway"
      ],
      "y_data": [
        92000.0,
        75000.0,
        63000.0
      ],
      "classify": [],
      "describe": "Seating capacity of each track",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the seating capacity of each track?",
      "Which track has the highest seating capacity?",
      "What are the seating capacities of tracks in descending order?",
      "How does the seating capacity of Chicagoland Speedway compare to other tracks?"
    ],
    "irrelevant_tables": [
      "race"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2648@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT t.Location, r.Name, COUNT(r.Race_ID) AS Race_Count FROM race r JOIN track t ON r.Track_ID = t.Track_ID GROUP BY t.Location, r.Name ORDER BY t.Location ASC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT t.Location, r.Name, COUNT(r.Race_ID) AS Race_Count FROM race r JOIN track t ON r.Track_ID = t.Track_ID GROUP BY t.Location, r.Name ORDER BY t.Location ASC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Location",
      "y_name": "Race_Count",
      "x_data": [
        "Fontana, CA",
        "Joliet, IL"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [
        "Name"
      ],
      "describe": "This visualization shows the count of races held at different locations, stacked by race names.",
      "sort": "asc"
    },
    "nl_queries": [
      "How many races have been held at each location?",
      "Which races were held at Auto Club Speedway?",
      "How does the number of races at Auto Club Speedway compare to Chicagoland Speedway?",
      "What is the distribution of races by class at each track?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2790@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT cName, COUNT(pID) AS num_players FROM Tryout GROUP BY cName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT cName, COUNT(pID) AS num_players FROM Tryout GROUP BY cName"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "cName",
      "y_name": "num_players",
      "x_data": [
        "LSU",
        "ASU",
        "FSU"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of players trying out per college",
      "sort": null
    },
    "nl_queries": [
      "How many players tried out for each college?",
      "Which positions did the players try out for at each college?",
      "What is the decision outcome of the tryouts for each position at each college?",
      "Which high schools do the players who tried out come from and what are their scores?"
    ],
    "irrelevant_tables": [
      "College",
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2800@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT state, SUM(enr) AS total_enrollment FROM College GROUP BY state",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT state, SUM(enr) AS total_enrollment FROM College GROUP BY state"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state",
      "y_name": "total_enrollment",
      "x_data": [
        "LA",
        "AZ",
        "OK"
      ],
      "y_data": [
        18000,
        12000,
        22000
      ],
      "classify": [],
      "describe": "Total enrollment by state",
      "sort": null
    },
    "nl_queries": [
      "What is the total enrollment for each state?",
      "Which state has the highest total enrollment?",
      "How does the total enrollment compare across states?",
      "Identify states with total enrollment above 15000."
    ],
    "irrelevant_tables": [
      "Tryout",
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "298@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date, mean_temperature_f FROM weather WHERE zip_code = 94107 ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date, mean_temperature_f FROM weather WHERE zip_code = 94107 ORDER BY date"
    },
    "reasoning_level": "L2",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "mean_temperature_f",
      "x_data": [
        "8/29/2013",
        "8/30/2013",
        "8/31/2013"
      ],
      "y_data": [
        68.0,
        69.0,
        64.0
      ],
      "classify": [],
      "describe": "Trend of mean temperature over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the trend of mean temperature over time in the area with zip code 94107?",
      "How does the number of trips correlate with the change in mean temperature?",
      "Are there specific weather events that significantly impact the number of trips?",
      "Which stations have the highest usage during different weather conditions?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "303@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, COUNT(*) AS trip_count FROM trip JOIN station ON trip.start_station_id = station.id GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, COUNT(*) AS trip_count FROM trip JOIN station ON trip.start_station_id = station.id GROUP BY city"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "trip_count",
      "x_data": [
        "San Jose"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of trips per city",
      "sort": null
    },
    "nl_queries": [
      "How many trips originated from each city?",
      "What is the distribution of trips in each city over time?",
      "What is the average trip duration in each city?",
      "How does the weather affect trip count in each city?"
    ],
    "irrelevant_tables": [
      "status",
      "weather"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "317@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date, mean_temperature_f FROM weather WHERE zip_code = 94107 ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date, mean_temperature_f FROM weather WHERE zip_code = 94107 ORDER BY date"
    },
    "reasoning_level": "L3",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "mean_temperature_f",
      "x_data": [
        "8/29/2013",
        "8/30/2013",
        "8/31/2013"
      ],
      "y_data": [
        68.0,
        69.0,
        64.0
      ],
      "classify": [],
      "describe": "Trend of mean temperatures over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the trend of mean temperatures over time in the ZIP code 94107?",
      "How does the number of trips vary with changes in mean temperature?",
      "What is the distribution of trip durations for different mean temperature ranges?",
      "Compare the number of trips and trip durations for different subscription types during varying temperature conditions."
    ],
    "irrelevant_tables": [
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "330@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT station_id, AVG(bikes_available) AS avg_bikes_available FROM status GROUP BY station_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT station_id, AVG(bikes_available) AS avg_bikes_available FROM status GROUP BY station_id"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "station_id",
      "y_name": "avg_bikes_available",
      "x_data": [
        "3"
      ],
      "y_data": [
        "12"
      ],
      "classify": [],
      "describe": "Average number of bikes available at each station",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average number of bikes available at each station?",
      "How does the average number of bikes available compare across different stations?",
      "Which station has the highest average number of bikes available?",
      "What are the trends in average bikes available over time for the station with the highest average?"
    ],
    "irrelevant_tables": [
      "trip",
      "weather",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "339@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, COUNT(id) AS total_stations FROM station GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, COUNT(id) AS total_stations FROM station GROUP BY city"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "total_stations",
      "x_data": [
        "San Jose"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of stations by city",
      "sort": null
    },
    "nl_queries": [
      "How many bike stations are there in each city?",
      "What is the distribution of bike trips by subscription type in San Jose?",
      "How does the number of bike trips correlate with weather conditions in San Jose?",
      "What is the average duration of bike trips in San Jose across different weather events?"
    ],
    "irrelevant_tables": [
      "status",
      "weather",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "349@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date, max_temperature_f FROM weather ORDER BY date",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date, max_temperature_f FROM weather ORDER BY date"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "max_temperature_f",
      "x_data": [
        "8/29/2013",
        "8/30/2013",
        "8/31/2013"
      ],
      "y_data": [
        74.0,
        78.0,
        71.0
      ],
      "classify": [],
      "describe": "This bar chart shows the maximum temperature for each date.",
      "sort": "asc"
    },
    "nl_queries": [
      "What was the maximum temperature on each date?",
      "How does the maximum temperature change over the given dates?",
      "What is the trend of maximum temperatures for the given dates?",
      "Can we identify any patterns in the maximum temperatures over time?"
    ],
    "irrelevant_tables": [
      "trip",
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2585@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT p.Team AS Team, a.Manufacturer AS Manufacturer, COUNT(pr.Record_ID) AS Flight_Count FROM pilot_record pr JOIN pilot p ON pr.Pilot_ID = p.Pilot_ID JOIN aircraft a ON pr.Aircraft_ID = a.Aircraft_ID GROUP BY p.Team, a.Manufacturer",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT p.Team AS Team, a.Manufacturer AS Manufacturer, COUNT(pr.Record_ID) AS Flight_Count FROM pilot_record pr JOIN pilot p ON pr.Pilot_ID = p.Pilot_ID JOIN aircraft a ON pr.Aircraft_ID = a.Aircraft_ID GROUP BY p.Team, a.Manufacturer"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "pilot_record",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Team",
      "y_name": "Flight_Count",
      "x_data": [
        "Bradley",
        "Eau Claire High School"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [
        "Manufacturer"
      ],
      "describe": "Number of flights for each team categorized by aircraft manufacturer",
      "sort": null
    },
    "nl_queries": [
      "How many flights have been recorded for each team?",
      "Which aircraft manufacturers are associated with the flights of each team?",
      "How does the number of flights differ across aircraft manufacturers for each team?",
      "What is the overall distribution of flights across different teams and aircraft manufacturers?"
    ],
    "irrelevant_tables": [
      "aircraft",
      "pilot_record"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2587@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT pilot.Pilot_name, COUNT(pilot_record.Record_ID) AS Flight_Count FROM pilot_record JOIN pilot ON pilot_record.Pilot_ID = pilot.Pilot_ID GROUP BY pilot.Pilot_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT pilot.Pilot_name, COUNT(pilot_record.Record_ID) AS Flight_Count FROM pilot_record JOIN pilot ON pilot_record.Pilot_ID = pilot.Pilot_ID GROUP BY pilot.Pilot_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "pilot_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Pilot_name",
      "y_name": "Flight_Count",
      "x_data": [
        "Patrick O'Bryant",
        "Jermaine O'Neal"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of flights conducted by each pilot",
      "sort": "desc"
    },
    "nl_queries": [
      "How many flights has each pilot conducted?",
      "Which pilot has the most flights?",
      "What is the total number of flights conducted by pilots from the United States?",
      "Compare the number of flights conducted by pilots from different teams."
    ],
    "irrelevant_tables": [
      "aircraft"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2488@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Name AS Event_Name, COUNT(nr.journalist_ID) AS Journalist_Count FROM event e LEFT JOIN news_report nr ON e.Event_ID = nr.Event_ID GROUP BY e.Name ORDER BY Journalist_Count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Name AS Event_Name, COUNT(nr.journalist_ID) AS Journalist_Count FROM event e LEFT JOIN news_report nr ON e.Event_ID = nr.Event_ID GROUP BY e.Name ORDER BY Journalist_Count DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Event_Name",
      "y_name": "Journalist_Count",
      "x_data": [
        "Public Debating",
        "Olympia Games Openning",
        "Government Hearing"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of journalists covering each event",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the count of journalists covering each event?",
      "Which event had the most journalists covering it?",
      "How many events had no journalists covering them?",
      "Which events had journalists covering them and how does their attendance compare?"
    ],
    "irrelevant_tables": [
      "journalist"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2860@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Store_Name, Number_of_product_category FROM store ORDER BY Number_of_product_category DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Store_Name, Number_of_product_category FROM store ORDER BY Number_of_product_category DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "store_product",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Number_of_product_category",
      "x_data": [
        "Miramichi",
        "Neguac",
        "Rogersville"
      ],
      "y_data": [
        17811.0,
        1678.0,
        1170.0
      ],
      "classify": [],
      "describe": "Comparison of Number of Product Categories across Stores",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the number of product categories for each store?",
      "Which store has the highest number of product categories?",
      "How does the number of product categories compare between city malls and village stores?",
      "Does the ranking of the stores correlate with the number of product categories?"
    ],
    "irrelevant_tables": [
      "store_district",
      "product",
      "store_product"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2507@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party_Theme, COUNT(*) AS Number_Of_Parties FROM party GROUP BY Party_Theme",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party_Theme, COUNT(*) AS Number_Of_Parties FROM party GROUP BY Party_Theme"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party_Theme",
      "y_name": "Number_Of_Parties",
      "x_data": [
        "Spring",
        "Club Q-BASE",
        "Hardcore Resurrection"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of parties grouped by theme",
      "sort": null
    },
    "nl_queries": [
      "How many parties were organized for each theme?",
      "What are the total number of hosts for each theme?",
      "Which theme had the most hosts over the years?",
      "Who were the main hosts for the party themes with most hosts?"
    ],
    "irrelevant_tables": [
      "party_host",
      "host"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2735@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name, COUNT(*) AS Count FROM captain GROUP BY Name ORDER BY Count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name, COUNT(*) AS Count FROM captain GROUP BY Name ORDER BY Count DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Count",
      "x_data": [
        "Captain Sir Henry Langford",
        "Captain Beves Conway",
        "Lieutenant Hugh Bolitho"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of captains per name",
      "sort": "desc"
    },
    "nl_queries": [
      "How many captains are there for each name?",
      "Which ships do the captains command?",
      "What are the types and flags of the ships commanded by each captain?",
      "How many captains are there per ship type and flag?"
    ],
    "irrelevant_tables": [
      "ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2737@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Captain_ID, age FROM captain",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Captain_ID, age FROM captain"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Captain_ID",
      "y_name": "age",
      "x_data": [
        1,
        2,
        3
      ],
      "y_data": [
        40,
        54,
        43
      ],
      "classify": [],
      "describe": "Age of each captain",
      "sort": null
    },
    "nl_queries": [
      "What is the age of each captain?",
      "Which captain is the oldest?",
      "Which captain is the youngest?",
      "What is the average age of the captains?"
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2739@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type, COUNT(*) AS Ship_Count FROM ship GROUP BY Type",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type, COUNT(*) AS Ship_Count FROM ship GROUP BY Type"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "Ship_Count",
      "x_data": [
        "Panamax"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of ships by type",
      "sort": null
    },
    "nl_queries": [
      "How many ships are there for each type?",
      "What is the distribution of ship types based on the class?",
      "How many ships are there for each flag?",
      "What is the distribution of ship types based on the flag?"
    ],
    "irrelevant_tables": [
      "captain"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2740@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT captain.Name, ship.Name AS Ship, captain.age FROM captain JOIN ship ON captain.Ship_ID = ship.Ship_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT captain.Name, ship.Name AS Ship, captain.age FROM captain JOIN ship ON captain.Ship_ID = ship.Ship_ID"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "age",
      "x_data": [
        "Captain Sir Henry Langford",
        "Captain Beves Conway",
        "Lieutenant Hugh Bolitho"
      ],
      "y_data": [
        40,
        54,
        43
      ],
      "classify": [],
      "describe": "Comparing the ages of captains and the ships they command",
      "sort": null
    },
    "nl_queries": [
      "What are the ages of the captains and the names of the ships they command?",
      "What is the distribution of ship types for the captains?",
      "What are the average ages of captains by ship type?",
      "How does the average age of captains vary by ship flag?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2747@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT captain.Name, ship.Built_Year, COUNT(*) AS Ship_Count FROM captain JOIN ship ON captain.Ship_ID = ship.Ship_ID GROUP BY captain.Name, ship.Built_Year",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT captain.Name, ship.Built_Year, COUNT(*) AS Ship_Count FROM captain JOIN ship ON captain.Ship_ID = ship.Ship_ID GROUP BY captain.Name, ship.Built_Year"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Ship_Count",
      "x_data": [
        "Captain Sir Henry Langford",
        "Captain Beves Conway",
        "Lieutenant Hugh Bolitho"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [
        "Built_Year"
      ],
      "describe": "Number of ships captained by each captain, categorized by the year the ship was built",
      "sort": null
    },
    "nl_queries": [
      "How many ships has each captain commanded, and in which years were these ships built?",
      "What are the total number of ships each captain commanded, regardless of the year built?",
      "Which captain has commanded the most ships, and how does this compare across different years?",
      "How does the distribution of ships commanded by different captains vary by the built year of the ships?"
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2751@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank, COUNT(*) AS Count FROM captain GROUP BY Rank",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank, COUNT(*) AS Count FROM captain GROUP BY Rank"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "Count",
      "x_data": [
        "Midshipman"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of captains by rank",
      "sort": null
    },
    "nl_queries": [
      "What is the count of captains by rank?",
      "Which ships are commanded by captains with the rank 'Midshipman'?",
      "What is the age distribution of captains with the rank 'Midshipman'?",
      "What are the types of ships commanded by captains with the rank 'Midshipman'?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2753@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS Captain_Name, s.Name AS Ship_Name, c.age FROM captain c JOIN ship s ON c.Ship_ID = s.Ship_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS Captain_Name, s.Name AS Ship_Name, c.age FROM captain c JOIN ship s ON c.Ship_ID = s.Ship_ID"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Captain_Name",
      "y_name": "age",
      "x_data": [
        "Captain Sir Henry Langford",
        "Captain Beves Conway",
        "Lieutenant Hugh Bolitho"
      ],
      "y_data": [
        40,
        54,
        43
      ],
      "classify": [
        "Ship_Name"
      ],
      "describe": "Comparing the ages of captains along with their respective ship names to understand the age distribution of captains across different ships.",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the ages of the captains and the names of their respective ships?",
      "How do the ages of captains compare across different ships?",
      "Which ship has the oldest captain and what is their age?",
      "Is there any correlation between the ship type and the age of the captains?"
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2803@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Product_Name, COUNT(*) AS Event_Count FROM Products_in_Events INNER JOIN Products ON Products_in_Events.Product_ID = Products.Product_ID GROUP BY Product_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Product_Name, COUNT(*) AS Event_Count FROM Products_in_Events INNER JOIN Products ON Products_in_Events.Product_ID = Products.Product_ID GROUP BY Product_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Product_Name",
      "y_name": "Event_Count",
      "x_data": [
        "Business Policy",
        "Special Dinning",
        "Men suits"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of events each product is involved in",
      "sort": null
    },
    "nl_queries": [
      "How many events involve each product?",
      "What is the distribution of products across different events?",
      "Which product is involved in the highest number of events?",
      "Are there any products that are not involved in any events?"
    ],
    "irrelevant_tables": [
      "Assets_in_Events",
      "Agreements",
      "Finances",
      "Parties",
      "Channels",
      "Events",
      "Parties_in_Events",
      "Assets",
      "Locations",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2805@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Event_Type_Code, COUNT(Event_ID) AS Event_Count FROM Events GROUP BY Event_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Event_Type_Code, COUNT(Event_ID) AS Event_Count FROM Events GROUP BY Event_Type_Code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Event_Type_Code",
      "y_name": "Event_Count",
      "x_data": [
        "Trade Show",
        "Press Conferenc"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of events by event type",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of events by type?",
      "How many events are associated with each type?",
      "Which event type has the highest count?",
      "Break down the number of events per event type."
    ],
    "irrelevant_tables": [
      "Products_in_Events",
      "Assets_in_Events",
      "Agreements",
      "Finances",
      "Parties",
      "Channels",
      "Parties_in_Events",
      "Assets",
      "Locations",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2811@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT E.Event_Type_Code, COUNT(*) AS Event_Count FROM Events E GROUP BY E.Event_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT E.Event_Type_Code, COUNT(*) AS Event_Count FROM Events E GROUP BY E.Event_Type_Code"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Event_Type_Code",
      "y_name": "Event_Count",
      "x_data": [
        "Trade Show",
        "Press Conferenc"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of events by type",
      "sort": "desc"
    },
    "nl_queries": [
      "How many events of each type are there?",
      "What are the locations of 'Press Conferenc' events?",
      "Which parties are involved in 'Press Conferenc' events?",
      "What products are associated with 'Press Conferenc' events?"
    ],
    "irrelevant_tables": [
      "Products_in_Events",
      "Assets_in_Events",
      "Agreements",
      "Finances",
      "Parties",
      "Channels",
      "Events",
      "Parties_in_Events",
      "Assets",
      "Locations",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2621@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_category_description, COUNT(product_id) AS product_count FROM Products INNER JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code GROUP BY product_category_description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_category_description, COUNT(product_id) AS product_count FROM Products INNER JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code GROUP BY product_category_description"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "products_gen_characteristics",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_category_description",
      "y_name": "product_count",
      "x_data": [
        "Herbs",
        "Spices"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of products by category",
      "sort": null
    },
    "nl_queries": [
      "What is the count of products in each category?",
      "What are the average buying and selling prices for each product category?",
      "Can you compare the average buying prices against the selling prices for each category?",
      "How does the distribution of product prices (both buying and selling) vary across different product categories?"
    ],
    "irrelevant_tables": [
      "Product_Characteristics",
      "Ref_Colors",
      "Characteristics",
      "Ref_Characteristic_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1163@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "num_dogs",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Number of dogs per breed",
      "sort": "asc"
    },
    "nl_queries": [
      "How many dogs are there per breed?",
      "What is the distribution of dogs by breed size?",
      "What is the average age of dogs per breed?",
      "What are the total treatment costs per breed?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1164@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name AS breed, COUNT(dog_id) AS count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name AS breed, COUNT(dog_id) AS count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed",
      "y_name": "count",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Count of dogs by breed",
      "sort": "asc"
    },
    "nl_queries": [
      "How many dogs belong to each breed?",
      "Which breed has the highest number of dogs?",
      "What is the total number of dogs across all breeds?",
      "What percentage of the total dogs does each breed represent?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Charges",
      "Professionals"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1165@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(*) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(*) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Count of dogs by breed",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of dogs by breed?",
      "Which breed has the most dogs in the kennel?",
      "How does the count of each breed compare to others?",
      "Are there any breeds with significantly fewer dogs compared to others?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1166@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.breed_code, b.breed_name, COUNT(d.dog_id) AS dog_count FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY d.breed_code, b.breed_name ORDER BY dog_count DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.breed_code, b.breed_name, COUNT(d.dog_id) AS dog_count FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY d.breed_code, b.breed_name ORDER BY dog_count DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Bulldog",
        "Eskimo",
        "Husky"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [
        "breed_code"
      ],
      "describe": "Number of dogs by breed",
      "sort": "desc"
    },
    "nl_queries": [
      "How many dogs of each breed are currently in the kennel?",
      "Which breed has the highest number of dogs in the kennel?",
      "What is the distribution of dog breeds in the kennel?",
      "Can we see the number of dogs per breed over a period of time?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1167@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(dog_id) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(dog_id) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [],
      "describe": "Number of dogs by breed",
      "sort": "desc"
    },
    "nl_queries": [
      "How many dogs do we have for each breed?",
      "Which breed has the highest number of dogs?",
      "Show the count of dogs for each breed in descending order.",
      "Are there any breeds with zero dogs?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1169@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(dog_id) AS num_dogs FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(dog_id) AS num_dogs FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "num_dogs",
      "x_data": [
        "Bulldog",
        "Eskimo",
        "Husky"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of dogs for each breed",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of dogs for each breed?",
      "Which breed has the highest number of dogs?",
      "Show the breeds in descending order of the number of dogs.",
      "How does the number of Bulldogs compare to Eskimos?"
    ],
    "irrelevant_tables": [
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges",
      "Owners"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1181@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_code, COUNT(dog_id) AS dog_count FROM Dogs GROUP BY breed_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_code, COUNT(dog_id) AS dog_count FROM Dogs GROUP BY breed_code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_code",
      "y_name": "dog_count",
      "x_data": [
        "ESK",
        "BUL"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of dogs by breed",
      "sort": null
    },
    "nl_queries": [
      "How many dogs are there in each breed?",
      "Which breed has the highest number of dogs?",
      "How does the number of dogs vary across different breeds?",
      "Can you compare the distribution of dogs across breeds?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1184@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT breed_name, COUNT(dog_id) AS count_of_dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY count_of_dogs DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT breed_name, COUNT(dog_id) AS count_of_dogs FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY count_of_dogs DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "breed_name",
      "y_name": "count_of_dogs",
      "x_data": [
        "Bulldog",
        "Eskimo",
        "Husky"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of dogs per breed",
      "sort": "desc"
    },
    "nl_queries": [
      "How many dogs are there of each breed?",
      "Which breed has the highest number of dogs?",
      "What is the distribution of dogs by breed?",
      "Are there any breeds with no dogs?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1185@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.abandoned_yn, b.breed_name, COUNT(d.dog_id) AS dog_count FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY d.abandoned_yn, b.breed_name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.abandoned_yn, b.breed_name, COUNT(d.dog_id) AS dog_count FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY d.abandoned_yn, b.breed_name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "breed_name",
      "y_name": "dog_count",
      "x_data": [
        "Eskimo",
        "Husky",
        "Bulldog"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [
        "abandoned_yn"
      ],
      "describe": "Number of abandoned vs. non-abandoned dogs by breed",
      "sort": null
    },
    "nl_queries": [
      "How many abandoned vs. non-abandoned dogs are there for each breed?",
      "What is the distribution of abandoned dogs across different breeds?",
      "Compare the distribution of non-abandoned dogs across different breeds.",
      "What insights can be drawn about the popularity of breeds based on abandonment status?"
    ],
    "irrelevant_tables": [
      "Owners",
      "Sizes",
      "Treatment_Types",
      "Treatments",
      "Professionals",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2109@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT r.property_id, COUNT(r.resident_id) AS num_residents FROM Residents r GROUP BY r.property_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT r.property_id, COUNT(r.resident_id) AS num_residents FROM Residents r GROUP BY r.property_id"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "local_govt_and_lot",
    "vis_obj": {
      "chart": "bar",
      "x_name": "property_id",
      "y_name": "num_residents",
      "x_data": [
        "605",
        "629",
        "879",
        "954"
      ],
      "y_data": [
        "1",
        "1",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Number of residents per property",
      "sort": "asc"
    },
    "nl_queries": [
      "How many residents live in each property?",
      "Which properties have the highest number of residents?",
      "What services are provided to residents at the property with the most residents?",
      "Which organizations are responsible for the services provided to the residents?"
    ],
    "irrelevant_tables": [
      "Timed_Status_of_Things",
      "Timed_Locations_of_Things",
      "Customers",
      "Customer_Event_Notes",
      "Organizations",
      "Things"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "459@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Name, f.Title, s.Show_times_per_day FROM schedule s JOIN film f ON s.Film_ID = f.Film_ID JOIN cinema c ON s.Cinema_ID = c.Cinema_ID WHERE s.Date = '21 May' ORDER BY c.Name, f.Title",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Name, f.Title, s.Show_times_per_day FROM schedule s JOIN film f ON s.Film_ID = f.Film_ID JOIN cinema c ON s.Cinema_ID = c.Cinema_ID WHERE s.Date = '21 May' ORDER BY c.Name, f.Title"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Name",
      "y_name": "Show_times_per_day",
      "x_data": [
        "Codling"
      ],
      "y_data": [
        5,
        3
      ],
      "classify": [
        "Title"
      ],
      "describe": "Number of show times per day for each film in each cinema on 21 May",
      "sort": "asc"
    },
    "nl_queries": [
      "How many times are films shown per day in each cinema on 21 May?",
      "Which cinema has the highest number of show times per day for each film on 21 May?",
      "Compare the show times per day for different films in Codling cinema on 21 May.",
      "Identify the film with the highest number of show times per day in Codling cinema on 21 May."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "465@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT f.Title, s.Price, s.Show_times_per_day FROM schedule s JOIN film f ON s.Film_ID = f.Film_ID WHERE s.Date = '21 May'",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT f.Title, s.Price, s.Show_times_per_day FROM schedule s JOIN film f ON s.Film_ID = f.Film_ID WHERE s.Date = '21 May'"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Title",
      "y_name": "Show_times_per_day",
      "x_data": [
        "The Case of the Mystery Weekend",
        "The Case of the Smart Dummy"
      ],
      "y_data": [
        5,
        3
      ],
      "classify": [],
      "describe": "Number of show times per day for each film on 21 May",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the number of show times per day for each film on 21 May.",
      "Show the pricing for each film on 21 May.",
      "Compare the number of show times per day and pricing for each film on 21 May.",
      "Analyze the relationship between the number of show times per day and pricing for each film on 21 May."
    ],
    "irrelevant_tables": [
      "cinema"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1437@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT year, COUNT(*) AS race_count FROM races GROUP BY year ORDER BY year",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT year, COUNT(*) AS race_count FROM races GROUP BY year ORDER BY year"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "formula_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "year",
      "y_name": "race_count",
      "x_data": [
        2009
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of races per year",
      "sort": "asc"
    },
    "nl_queries": [
      "How many races were held each year?",
      "What is the total number of races held in 2009?",
      "Which year had the most races?",
      "How has the number of races changed over the years?"
    ],
    "irrelevant_tables": [
      "status",
      "seasons",
      "constructors",
      "drivers",
      "pitStops",
      "constructorResults",
      "qualifying",
      "circuits",
      "lapTimes",
      "driverStandings",
      "constructorStandings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1448@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.forename || ' ' || d.surname AS driver, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY total_points DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.forename || ' ' || d.surname AS driver, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY total_points DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "formula_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "driver",
      "y_name": "total_points",
      "x_data": [
        "Lewis Hamilton",
        "Nick Heidfeld",
        "Nico Rosberg"
      ],
      "y_data": [
        10.0,
        8.0,
        6.0
      ],
      "classify": [],
      "describe": "Total points scored by each driver",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the total points scored by each driver",
      "How many races did each driver win? Display in descending order of wins",
      "Compare the total points scored by drivers who won at least one race",
      "What are the top 3 drivers based on points in the 2009 season?"
    ],
    "irrelevant_tables": [
      "status",
      "seasons",
      "constructors",
      "pitStops",
      "constructorResults",
      "qualifying",
      "circuits",
      "lapTimes",
      "driverStandings",
      "constructorStandings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3220@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT wine.Grape, appellations.State, COUNT(wine.No) AS TotalWines FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation GROUP BY wine.Grape, appellations.State",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT wine.Grape, appellations.State, COUNT(wine.No) AS TotalWines FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation GROUP BY wine.Grape, appellations.State"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Grape",
      "y_name": "TotalWines",
      "x_data": [
        "Zinfandel",
        "Cabernet Sauvingnon",
        "Barbera"
      ],
      "y_data": [
        3,
        2,
        1
      ],
      "classify": [
        "State"
      ],
      "describe": "Shows the total number of wines by grape type and state",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the total number of wines by grape type and state.",
      "What is the distribution of wine prices for each grape type?",
      "For each grape type, how does the average wine price compare across states?",
      "Which states produce the highest scoring wines for each grape type?"
    ],
    "irrelevant_tables": [
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3224@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR CHART",
      "data_part": {
        "sql_part": "SELECT State, COUNT(*) AS WineCount FROM wine GROUP BY State",
        "binning": ""
      },
      "VQL": "Visualize BAR CHART SELECT State, COUNT(*) AS WineCount FROM wine GROUP BY State"
    },
    "reasoning_level": "L1",
    "chart": "BAR CHART",
    "hardness": "Easy",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar chart",
      "x_name": "State",
      "y_name": "WineCount",
      "x_data": [
        "California"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "This bar chart shows the number of wines produced in each state.",
      "sort": null
    },
    "nl_queries": [
      "How many wines are produced in each state?",
      "What is the distribution of wine counts across the different appellations within California?",
      "How does the average price of wines compare across different appellations within California?",
      "What is the average score of wines across different price ranges within California?"
    ],
    "irrelevant_tables": [
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3226@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Grape, COUNT(*) AS Wine_Count FROM wine GROUP BY Grape",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Grape, COUNT(*) AS Wine_Count FROM wine GROUP BY Grape"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Grape",
      "y_name": "Wine_Count",
      "x_data": [
        "Zinfandel"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of wines by grape variety",
      "sort": null
    },
    "nl_queries": [
      "Show the count of wines by grape variety.",
      "What are the average prices of wines for each grape variety?",
      "What are the total cases produced for each grape variety?",
      "Show the average score of wines for each grape variety."
    ],
    "irrelevant_tables": [
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3236@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Appelation, AVG(Price) AS Average_Price FROM wine GROUP BY Appelation",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Appelation, AVG(Price) AS Average_Price FROM wine GROUP BY Appelation"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Appelation",
      "y_name": "Average_Price",
      "x_data": [
        "St. Helena",
        "Napa Valley"
      ],
      "y_data": [
        44.0,
        37.5
      ],
      "classify": [],
      "describe": "Average price of wines by Appelation",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average price of wines across different Appelations?",
      "How does the score of wines compare across different Appelations?",
      "What is the total number of wine cases produced for each Appelation?",
      "What is the relationship between the price and score of wines for each Appelation?"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3238@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Winery, AVG(Score) AS Avg_Score FROM wine GROUP BY Winery ORDER BY Avg_Score DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Winery, AVG(Score) AS Avg_Score FROM wine GROUP BY Winery ORDER BY Avg_Score DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Winery",
      "y_name": "Avg_Score",
      "x_data": [
        "Robert Biale",
        "Chiarello Family"
      ],
      "y_data": [
        92,
        93
      ],
      "classify": [],
      "describe": "Average score of wines by different wineries",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average score of wines from different wineries?",
      "Which wineries produce the highest scoring wines on average?",
      "How do the average scores of wines from Robert Biale and Chiarello Family compare?",
      "What is the distribution of wine scores for the top wineries based on average score?"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3247@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT State, AVG(Price) AS Avg_Price FROM wine GROUP BY State ORDER BY Avg_Price DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT State, AVG(Price) AS Avg_Price FROM wine GROUP BY State ORDER BY Avg_Price DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "State",
      "y_name": "Avg_Price",
      "x_data": [
        "California"
      ],
      "y_data": [
        39.67
      ],
      "classify": [],
      "describe": "Average wine price per state",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average price of wine across different states?",
      "What is the distribution of average wine prices in California?",
      "How does the average price of wine compare across different counties within California?",
      "What are the top 5 wineries in California based on average wine price?"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1510@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Main_Industry, SUM(Sales_billion) AS Total_Sales FROM company GROUP BY Main_Industry",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Main_Industry, SUM(Sales_billion) AS Total_Sales FROM company GROUP BY Main_Industry"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Main_Industry",
      "y_name": "Total_Sales",
      "x_data": [
        "Oil and gas",
        "Conglomerate"
      ],
      "y_data": [
        903.7,
        147.3
      ],
      "classify": [],
      "describe": "Comparing total sales across different industries",
      "sort": null
    },
    "nl_queries": [
      "What are the total sales for each main industry?",
      "How do the profits compare across main industries?",
      "What is the relationship between assets and profits in the oil and gas industry?",
      "What is the market value distribution among companies in the oil and gas industry?"
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1511@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Company, Profits_billion FROM company ORDER BY Profits_billion DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Company, Profits_billion FROM company ORDER BY Profits_billion DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company",
      "y_name": "Profits_billion",
      "x_data": [
        "ExxonMobil",
        "Royal Dutch Shell",
        "General Electric"
      ],
      "y_data": [
        41.1,
        30.9,
        14.2
      ],
      "classify": [],
      "describe": "Profits of companies in billion dollars",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the profits of the top companies by profit?",
      "How do the profits of ExxonMobil, Royal Dutch Shell, and General Electric compare?",
      "Which company has the highest profit among the listed companies?",
      "What is the profit difference between ExxonMobil and Royal Dutch Shell?"
    ],
    "irrelevant_tables": [
      "station_company",
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1516@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Main_Industry, SUM(Sales_billion) AS Total_Sales FROM company GROUP BY Main_Industry",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Main_Industry, SUM(Sales_billion) AS Total_Sales FROM company GROUP BY Main_Industry"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Main_Industry",
      "y_name": "Total_Sales",
      "x_data": [
        "Oil and gas",
        "Conglomerate"
      ],
      "y_data": [
        903.7,
        147.3
      ],
      "classify": [],
      "describe": "Total sales by main industry",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total sales for each main industry?",
      "Which companies contribute the most to the oil and gas industry's total sales?",
      "How do the profits of the top oil and gas companies compare to their sales?",
      "What is the market value of the top oil and gas companies compared to their sales and profits?"
    ],
    "irrelevant_tables": [
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1518@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarters, SUM(Sales_billion) AS Total_Sales FROM company GROUP BY Headquarters ORDER BY Total_Sales DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarters, SUM(Sales_billion) AS Total_Sales FROM company GROUP BY Headquarters ORDER BY Total_Sales DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarters",
      "y_name": "Total_Sales",
      "x_data": [
        "USA",
        "Netherlands"
      ],
      "y_data": [
        580.8,
        470.2
      ],
      "classify": [],
      "describe": "Summing up total sales for each headquarters location.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total sales distribution by headquarters location?",
      "How do the profits compare among companies headquartered in the USA?",
      "What is the relationship between total assets and market value for companies in the oil and gas industry?",
      "Which company has the highest market value and how does it compare to its profits and assets?"
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2459@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender, COUNT(*) AS count FROM Person GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender, COUNT(*) AS count FROM Person GROUP BY gender"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "count",
      "x_data": [
        "female",
        "male"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Distribution of genders in the Person table",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of genders in the Person table?",
      "How many people are there in each age group?",
      "What is the distribution of jobs among people in each city?",
      "How does the age distribution vary by job?"
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2461@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, COUNT(*) AS person_count FROM Person GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, COUNT(*) AS person_count FROM Person GROUP BY city"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "person_count",
      "x_data": [
        "new york city",
        "salt lake city",
        "austin"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of people in each city",
      "sort": null
    },
    "nl_queries": [
      "Show the number of people in each city.",
      "Which city has the highest number of people?",
      "Compare the number of people in New York City and Austin.",
      "What is the proportion of people in Salt Lake City compared to the total?"
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2465@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city, COUNT(*) AS num_people FROM Person GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city, COUNT(*) AS num_people FROM Person GROUP BY city"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "num_people",
      "x_data": [
        "new york city",
        "salt lake city",
        "austin"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of people per city",
      "sort": "asc"
    },
    "nl_queries": [
      "How many people are there in each city?",
      "What is the gender distribution in each city?",
      "What is the average age of people in each city?",
      "What is the job distribution across different cities?"
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2317@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Season, COUNT(Player) AS Player_Count FROM match_season GROUP BY Season ORDER BY Season",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Season, COUNT(Player) AS Player_Count FROM match_season GROUP BY Season ORDER BY Season"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "match_season",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Season",
      "y_name": "Player_Count",
      "x_data": [
        "1996.0",
        "1997.0",
        "1998.0"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of players drafted each season",
      "sort": "asc"
    },
    "nl_queries": [
      "How many players were drafted each season?",
      "Which season had the highest number of players drafted?",
      "What is the trend in the number of players drafted over the seasons?",
      "Are there any specific seasons with significantly higher or lower player drafts?"
    ],
    "irrelevant_tables": [
      "team",
      "player",
      "country"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2321@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT Season, Country, COUNT(Player) AS Player_Count FROM match_season GROUP BY Season, Country",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT Season, Country, COUNT(Player) AS Player_Count FROM match_season GROUP BY Season, Country"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "match_season",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Season",
      "y_name": "Player_Count",
      "x_data": [
        "1996.0",
        "1997.0",
        "1998.0"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [
        "Country"
      ],
      "describe": "Number of players per season grouped by country",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the number of players per season grouped by country?",
      "How does the number of players per season differ among countries?",
      "Which country had the highest number of players in a single season?",
      "What trend can be observed in the number of players per season for each country?"
    ],
    "irrelevant_tables": [
      "team",
      "player",
      "country"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2565@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Company_name, COUNT(Hardware_Model_name) AS Number_of_Models FROM phone GROUP BY Company_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Company_name, COUNT(Hardware_Model_name) AS Number_of_Models FROM phone GROUP BY Company_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "phone_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company_name",
      "y_name": "Number_of_Models",
      "x_data": [
        "Sony Mobile Communications",
        "LG Electronics",
        "Nokia Corporation"
      ],
      "y_data": [
        2,
        1,
        3
      ],
      "classify": [],
      "describe": "Number of different hardware models per company",
      "sort": "asc"
    },
    "nl_queries": [
      "How many hardware models does each company have?",
      "Which company has the highest number of hardware models?",
      "What are the accreditation levels for each company's models?",
      "Which chip models are used by each company's hardware models?"
    ],
    "irrelevant_tables": [
      "chip_model"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2566@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Company_name, COUNT(Hardware_Model_name) AS Number_of_Models FROM phone GROUP BY Company_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Company_name, COUNT(Hardware_Model_name) AS Number_of_Models FROM phone GROUP BY Company_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "phone_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company_name",
      "y_name": "Number_of_Models",
      "x_data": [
        "Sony Mobile Communications",
        "LG Electronics",
        "Nokia Corporation"
      ],
      "y_data": [
        2,
        1,
        3
      ],
      "classify": [],
      "describe": "Number of hardware models per company",
      "sort": "desc"
    },
    "nl_queries": [
      "How many hardware models does each company have?",
      "What is the breakdown of chip models used by each company's hardware models?",
      "Which company has the highest number of hardware models with the 'joyn Hot Fixes' accreditation?",
      "What are the average RAM and ROM specifications for each company's hardware models?"
    ],
    "irrelevant_tables": [
      "screen_mode"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2551@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetType, COUNT(*) AS PetCount FROM Pets GROUP BY PetType",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetType, COUNT(*) AS PetCount FROM Pets GROUP BY PetType"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetType",
      "y_name": "PetCount",
      "x_data": [
        "cat",
        "dog"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of each type of pet",
      "sort": "asc"
    },
    "nl_queries": [
      "How many pets are there of each type?",
      "What is the average weight of each type of pet?",
      "What is the average age of each type of pet?",
      "Which students have pets, and what are the types of their pets?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2558@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.city_code, COUNT(DISTINCT p.PetID) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID GROUP BY s.city_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.city_code, COUNT(DISTINCT p.PetID) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID GROUP BY s.city_code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "num_pets",
      "x_data": [
        "BAL",
        "HKG"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of pets owned by students in different cities",
      "sort": "asc"
    },
    "nl_queries": [
      "How many pets are owned by students in different cities?",
      "Which city has the highest number of pets owned by students?",
      "What is the distribution of different types of pets across the cities?",
      "What is the average age of pets in each city?"
    ],
    "irrelevant_tables": [
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2560@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetType, COUNT(*) AS PetCount FROM Pets GROUP BY PetType",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetType, COUNT(*) AS PetCount FROM Pets GROUP BY PetType"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetType",
      "y_name": "PetCount",
      "x_data": [
        "cat",
        "dog"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Count of pets by type",
      "sort": null
    },
    "nl_queries": [
      "How many pets are there of each type?",
      "What is the distribution of pet types among students?",
      "How does the average pet age compare across different pet types?",
      "Is there a correlation between the pet type and the student’s major?"
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2959@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT o.organisation_type, SUM(g.grant_amount) AS total_grant_amount FROM Grants g JOIN Organisations o ON g.organisation_id = o.organisation_id GROUP BY o.organisation_type",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT o.organisation_type, SUM(g.grant_amount) AS total_grant_amount FROM Grants g JOIN Organisations o ON g.organisation_id = o.organisation_id GROUP BY o.organisation_type"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "organisation_type",
      "y_name": "total_grant_amount",
      "x_data": [
        "RES",
        "SPON"
      ],
      "y_data": [
        4500000,
        281244.6
      ],
      "classify": [],
      "describe": "Total grant amount received by each type of organisation",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total grant amount received by each type of organisation?",
      "How does the total grant amount compare between Research and Sponsor organisations?",
      "What is the trend in grant amounts received by Research organisations over the years?",
      "How many grants were awarded to each type of organisation per year?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Documents",
      "Staff_Roles",
      "Tasks",
      "Document_Types",
      "Organisation_Types",
      "Research_Staff",
      "Project_Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1622@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT r.REGION_NAME, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY r.REGION_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT r.REGION_NAME, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY r.REGION_NAME"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "REGION_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Europe",
        "Americas",
        "Asia"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of employees by region",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of employees across different regions?",
      "Within the Europe region, how many employees work in each country?",
      "For the country with the most employees in Europe, how many employees does each department have?",
      "In the department with the most employees in that country, what are the different job titles and their corresponding employee counts?"
    ],
    "irrelevant_tables": [
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1626@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT JOB_TITLE, AVG(SALARY) AS AVG_SALARY FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID GROUP BY JOB_TITLE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT JOB_TITLE, AVG(SALARY) AS AVG_SALARY FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID GROUP BY JOB_TITLE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_TITLE",
      "y_name": "AVG_SALARY",
      "x_data": [
        "President",
        "Administration Vice President"
      ],
      "y_data": [
        24000,
        17000
      ],
      "classify": [],
      "describe": "Average salary by job title",
      "sort": null
    },
    "nl_queries": [
      "What is the average salary for each job title?",
      "Which job title has the highest average salary?",
      "What is the salary range for each job title?",
      "How does the average salary compare between job titles?"
    ],
    "irrelevant_tables": [
      "locations",
      "departments",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1627@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT REGION_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT REGION_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "REGION_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Europe",
        "Americas",
        "Asia"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of employees in each region",
      "sort": null
    },
    "nl_queries": [
      "How many employees are there in each region?",
      "What is the average salary of employees in each region?",
      "What is the total salary expenditure in each region?",
      "How many employees are there in each job title within each region?"
    ],
    "irrelevant_tables": [
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1632@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.DEPARTMENT_NAME, e.JOB_ID, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME, e.JOB_ID ORDER BY TOTAL_SALARY DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.DEPARTMENT_NAME, e.JOB_ID, SUM(e.SALARY) AS TOTAL_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME, e.JOB_ID ORDER BY TOTAL_SALARY DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "DEPARTMENT_NAME",
      "y_name": "TOTAL_SALARY",
      "x_data": [
        "Administration",
        "Marketing",
        "Purchasing"
      ],
      "y_data": [
        70000,
        35000,
        30000
      ],
      "classify": [
        "JOB_ID"
      ],
      "describe": "Total salary distribution across departments classified by job roles",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total salary distribution across different departments?",
      "How does the salary distribution vary by job roles within each department?",
      "Which department has the highest total salary and what are the job roles contributing to it?",
      "What is the comparison of total salaries for job roles across departments?"
    ],
    "irrelevant_tables": [
      "locations",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1671@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT E.JOB_ID, J.JOB_TITLE, AVG(E.SALARY) AS AVG_SALARY FROM employees E JOIN jobs J ON E.JOB_ID = J.JOB_ID GROUP BY E.JOB_ID, J.JOB_TITLE ORDER BY AVG_SALARY DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT E.JOB_ID, J.JOB_TITLE, AVG(E.SALARY) AS AVG_SALARY FROM employees E JOIN jobs J ON E.JOB_ID = J.JOB_ID GROUP BY E.JOB_ID, J.JOB_TITLE ORDER BY AVG_SALARY DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_TITLE",
      "y_name": "AVG_SALARY",
      "x_data": [
        "President",
        "Administration Vice President"
      ],
      "y_data": [
        24000,
        17000
      ],
      "classify": [],
      "describe": "Average Salary by Job Title",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each job title?",
      "Which job title has the highest average salary?",
      "What are the top 3 job titles by average salary?",
      "Compare the average salaries of the top 3 job titles."
    ],
    "irrelevant_tables": [
      "locations",
      "departments",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1696@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT REGION_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT REGION_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "REGION_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Europe",
        "Americas",
        "Asia"
      ],
      "y_data": [
        3,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of employees in each region",
      "sort": "asc"
    },
    "nl_queries": [
      "How many employees are there in each region?",
      "Which region has the highest number of employees?",
      "How does the number of employees compare between Europe and Asia?",
      "Are there any regions with less than two employees?"
    ],
    "irrelevant_tables": [
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1702@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT JOB_TITLE, AVG(SALARY) AS AVERAGE_SALARY FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID GROUP BY JOB_TITLE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT JOB_TITLE, AVG(SALARY) AS AVERAGE_SALARY FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID GROUP BY JOB_TITLE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_TITLE",
      "y_name": "AVERAGE_SALARY",
      "x_data": [
        "President",
        "Administration Vice President",
        "Administration Assistant"
      ],
      "y_data": [
        24000,
        17000,
        3000
      ],
      "classify": [],
      "describe": "Average salary by job title",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each job title?",
      "How does the average salary of Administration Vice President compare to President?",
      "Which job title has the highest average salary?",
      "Which job title has the lowest average salary?"
    ],
    "irrelevant_tables": [
      "locations",
      "departments",
      "regions",
      "countries",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1703@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT REGION_NAME, COUNT(*) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT REGION_NAME, COUNT(*) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "REGION_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Europe",
        "Americas",
        "Asia"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of employees by region",
      "sort": "asc"
    },
    "nl_queries": [
      "How many employees are there in each region?",
      "Which region has the highest number of employees?",
      "Compare the number of employees between Europe and Asia.",
      "Analyze the distribution of employees across all regions."
    ],
    "irrelevant_tables": [
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1746@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.COUNTRY_NAME, j.JOB_TITLE, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY c.COUNTRY_NAME, j.JOB_TITLE",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.COUNTRY_NAME, j.JOB_TITLE, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID GROUP BY c.COUNTRY_NAME, j.JOB_TITLE"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "COUNTRY_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Argentina",
        "Australia",
        "Belgium"
      ],
      "y_data": [
        2,
        1,
        1
      ],
      "classify": [
        "JOB_TITLE"
      ],
      "describe": "Distribution of employees by job title across countries",
      "sort": null
    },
    "nl_queries": [
      "Show the number of employees in each country.",
      "Show the number of employees in each country, broken down by job title.",
      "Show the distribution of employees in each department, categorized by country.",
      "Show the salary range of employees in each country, categorized by job title."
    ],
    "irrelevant_tables": [
      "regions",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1795@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT REGION_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT REGION_NAME, COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID JOIN regions r ON c.REGION_ID = r.REGION_ID GROUP BY REGION_NAME"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "REGION_NAME",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "Europe",
        "Americas",
        "Asia"
      ],
      "y_data": [
        2,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of employees per region",
      "sort": "desc"
    },
    "nl_queries": [
      "How many employees are there in each region?",
      "Which region has the highest number of employees?",
      "What is the distribution of employees across different regions?",
      "Can you compare the number of employees in Europe versus the Americas?"
    ],
    "irrelevant_tables": [
      "locations",
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1802@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.DEPARTMENT_ID, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e GROUP BY e.DEPARTMENT_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.DEPARTMENT_ID, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM employees e GROUP BY e.DEPARTMENT_ID"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPARTMENT_ID",
      "y_name": "EMPLOYEE_COUNT",
      "x_data": [
        "90",
        "60",
        "110"
      ],
      "y_data": [
        "3",
        "1",
        "2"
      ],
      "classify": [],
      "describe": "Number of employees in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many employees are there in each department?",
      "Which department has the highest number of employees?",
      "What is the total number of employees across all departments?",
      "How does the number of employees in each department compare?"
    ],
    "irrelevant_tables": [
      "locations",
      "regions",
      "countries",
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2733@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Projects.Name AS Project_Name, SUM(Projects.Hours) AS Total_Hours FROM AssignedTo INNER JOIN Projects ON AssignedTo.Project = Projects.Code GROUP BY Projects.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Projects.Name AS Project_Name, SUM(Projects.Hours) AS Total_Hours FROM AssignedTo INNER JOIN Projects ON AssignedTo.Project = Projects.Code GROUP BY Projects.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "scientist_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Project_Name",
      "y_name": "Total_Hours",
      "x_data": [
        "Winds: Studying Bernoullis Principle",
        "Aerodynamics and Gas Mileage",
        "Ast3"
      ],
      "y_data": [
        156,
        256,
        0
      ],
      "classify": [],
      "describe": "This visualization shows the total hours assigned to each project based on the assigned scientists.",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the total number of hours assigned to each project.",
      "Which project has the highest number of assigned hours?",
      "How many hours are assigned to the project 'Aerodynamics and Gas Mileage'?",
      "List all projects with their corresponding total assigned hours."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "733@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Template_Type_Description, COUNT(Document_ID) AS Document_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Template_Type_Description, COUNT(Document_ID) AS Document_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Description"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Template_Type_Description",
      "y_name": "Document_Count",
      "x_data": [
        "Presentation",
        "CV",
        "Advertisement"
      ],
      "y_data": [
        2,
        5,
        3
      ],
      "classify": [],
      "describe": "Count of documents by template type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the count of documents for each template type?",
      "Which template type has the highest number of documents?",
      "How does the count of documents for each template type compare?",
      "What is the distribution of document counts across template types?"
    ],
    "irrelevant_tables": [
      "Paragraphs"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "748@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Name",
      "y_name": "Paragraph_Count",
      "x_data": [
        "Introduction of OS",
        "Understanding DB",
        "Summer Show"
      ],
      "y_data": [
        1,
        0,
        1
      ],
      "classify": [],
      "describe": "Count of paragraphs for each document",
      "sort": null
    },
    "nl_queries": [
      "How many paragraphs does each document contain?",
      "Which document contains the highest number of paragraphs?",
      "What is the average number of paragraphs per document?",
      "Are there any documents with no paragraphs?"
    ],
    "irrelevant_tables": [
      "Templates",
      "Ref_Template_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "620@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        "94333.99",
        "59303.62",
        "119921.41"
      ],
      "classify": [],
      "describe": "Display the average salary for instructors in each department.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average salary for instructors in each department?",
      "How does the average salary of instructors in the Marketing department compare to other departments?",
      "Which department has the highest average instructor salary?",
      "Analyze the budget allocation in relation to instructor salaries across departments."
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "section",
      "course",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "621@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Marketing",
        "Cybernetics",
        "Statistics"
      ],
      "y_data": [
        119921.41,
        94333.99,
        59303.62
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each department?",
      "Which department has the highest average salary?",
      "What is the difference in average salary between the highest and lowest paying departments?",
      "How does the average salary compare across all departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "section",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "624@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.dept_name, c.title, COUNT(t.ID) AS student_count FROM department d JOIN course c ON d.dept_name = c.dept_name JOIN takes t ON c.course_id = t.course_id GROUP BY d.dept_name, c.title ORDER BY d.dept_name, student_count DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.dept_name, c.title, COUNT(t.ID) AS student_count FROM department d JOIN course c ON d.dept_name = c.dept_name JOIN takes t ON c.course_id = t.course_id GROUP BY d.dept_name, c.title ORDER BY d.dept_name, student_count DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "dept_name",
      "y_name": "student_count",
      "x_data": [
        "History",
        "Mech. Eng.",
        "Mech. Eng."
      ],
      "y_data": [
        1,
        3,
        1
      ],
      "classify": [
        "title"
      ],
      "describe": "Visualize the number of students enrolled in each course, grouped by departments.",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are enrolled in each course across different departments?",
      "Which department has the highest number of enrolled students in a specific course?",
      "How does student enrollment in courses vary across different departments?",
      "Identify the courses with the highest student enrollments within each department."
    ],
    "irrelevant_tables": [
      "prereq",
      "instructor",
      "teaches",
      "student",
      "section",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "627@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": null
    },
    "nl_queries": [
      "What is the average salary of instructors in each department?",
      "How does the average salary of instructors compare across different departments?",
      "Which department has the highest average salary for instructors?",
      "Are there any significant disparities in average instructor salaries across departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "section",
      "course",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "630@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Marketing",
        "Statistics"
      ],
      "y_data": [
        94333.99,
        119921.41,
        59303.62
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each department?",
      "Which department has the highest average salary?",
      "How does the average salary in Cybernetics compare to other departments?",
      "What is the ranking of departments based on average salary?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "classroom",
      "section",
      "course",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "636@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "course_count",
      "x_data": [
        "Mech. Eng.",
        "Mech. Eng."
      ],
      "y_data": [
        3,
        3
      ],
      "classify": [],
      "describe": "Number of courses offered by each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many courses are offered by each department?",
      "Which department offers the most courses?",
      "What is the average number of courses offered per department?",
      "Are there any departments with fewer than 3 courses?"
    ],
    "irrelevant_tables": [
      "instructor",
      "teaches",
      "student",
      "classroom",
      "section",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "640@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, COUNT(*) AS num_courses FROM course GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, COUNT(*) AS num_courses FROM course GROUP BY dept_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "num_courses",
      "x_data": [
        "Mech. Eng."
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of courses per department",
      "sort": null
    },
    "nl_queries": [
      "What is the number of courses offered by each department?",
      "Which department offers the most courses?",
      "How many courses does the Mechanical Engineering department offer?",
      "Which departments offer fewer than 3 courses?"
    ],
    "irrelevant_tables": [
      "prereq",
      "instructor",
      "teaches",
      "student",
      "classroom",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "642@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, SUM(salary) AS total_salary FROM instructor GROUP BY dept_name ORDER BY total_salary DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, SUM(salary) AS total_salary FROM instructor GROUP BY dept_name ORDER BY total_salary DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "total_salary",
      "x_data": [
        "Cybernetics",
        "Marketing",
        "Statistics"
      ],
      "y_data": [
        94333.99,
        119921.41,
        59303.62
      ],
      "classify": [],
      "describe": "Total salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total salary expenditure for each department?",
      "Which department has the highest total salary expenditure?",
      "How does the salary expenditure of the Marketing department compare to other departments?",
      "What are the total salary expenditures of departments with salaries above $90,000?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "course",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "647@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Marketing",
        "Cybernetics",
        "Statistics"
      ],
      "y_data": [
        119921.41,
        94333.99,
        59303.62
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary by department?",
      "Which departments have the highest average salary?",
      "How does the average salary in Marketing compare to other departments?",
      "What are the trends in average salary across different departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "course",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "648@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name ORDER BY course_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name ORDER BY course_count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "course_count",
      "x_data": [
        "Mech. Eng.",
        "Statistics",
        "History"
      ],
      "y_data": [
        3,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of courses offered by each department",
      "sort": "desc"
    },
    "nl_queries": [
      "Which department offers the most courses?",
      "How many courses are offered by each department?",
      "Which departments have the least number of courses?",
      "What is the total number of courses offered by all departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "instructor",
      "teaches",
      "student",
      "classroom",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "652@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Marketing",
        "Cybernetics",
        "Statistics"
      ],
      "y_data": [
        119921.41,
        94333.99,
        59303.62
      ],
      "classify": [],
      "describe": "Comparing average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary for each department?",
      "Which department has the highest average salary?",
      "How does the average salary of the Marketing department compare to other departments?",
      "What are the average salaries for the departments in descending order?"
    ],
    "irrelevant_tables": [
      "prereq",
      "student",
      "classroom",
      "section",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "653@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary of instructors in each department?",
      "Which department has the highest average salary for instructors?",
      "How does the average salary of instructors in the Statistics department compare to other departments?",
      "What is the trend of average instructor salaries across different departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "student",
      "classroom",
      "section",
      "takes",
      "time_slot",
      "department",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "654@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT d.dept_name AS department, s.semester, COUNT(*) AS num_courses FROM department d JOIN course c ON d.dept_name = c.dept_name JOIN section s ON c.course_id = s.course_id GROUP BY d.dept_name, s.semester",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT d.dept_name AS department, s.semester, COUNT(*) AS num_courses FROM department d JOIN course c ON d.dept_name = c.dept_name JOIN section s ON c.course_id = s.course_id GROUP BY d.dept_name, s.semester"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "department",
      "y_name": "num_courses",
      "x_data": [
        "Civil Eng.",
        "Biology",
        "History",
        "Mech. Eng."
      ],
      "y_data": [
        5,
        10,
        8,
        12
      ],
      "classify": [
        "semester"
      ],
      "describe": "Number of courses offered by each department, broken down by semester",
      "sort": null
    },
    "nl_queries": [
      "How many courses are offered by each department?",
      "How does the number of courses offered by each department vary by semester?",
      "Which department offers the most courses overall?",
      "Which semester has the highest number of courses offered across all departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "instructor",
      "teaches",
      "classroom",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "655@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR CHART",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR CHART SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR CHART",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": null
    },
    "nl_queries": [
      "What is the average salary by department?",
      "How does the budget of each department compare to the average salary within that department?",
      "Are there any departments with high budgets but low average salaries or vice versa?",
      "How do the department budgets and average salaries compare across different buildings?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "section",
      "course",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "657@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Marketing",
        "Cybernetics",
        "Statistics"
      ],
      "y_data": [
        119921.41,
        94333.99,
        59303.62
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average salary of instructors in each department?",
      "Which department has the highest average salary?",
      "What are the average salaries of the top three departments?",
      "How does the average salary in the Statistics department compare to other departments?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "section",
      "course",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "713@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT course.Course, course_arrange.Grade, teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT course.Course, course_arrange.Grade, teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "course_teach",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Course",
      "y_name": "Grade",
      "x_data": [
        "Math",
        "Math",
        "Science"
      ],
      "y_data": [
        1,
        3,
        5
      ],
      "classify": [],
      "describe": "Distribution of Grades across Courses",
      "sort": null
    },
    "nl_queries": [
      "What are the grades for each course?",
      "How did different teachers perform in each course?",
      "Which teacher had the highest grade in each course?",
      "How do grades compare across different courses?"
    ],
    "irrelevant_tables": [
      "course"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "715@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Course, t.Name, ca.Grade FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Course, t.Name, ca.Grade FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "course_teach",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Course",
      "y_name": "Grade",
      "x_data": [
        "Math",
        "Math",
        "Science"
      ],
      "y_data": [
        1,
        3,
        5
      ],
      "classify": [
        "Name"
      ],
      "describe": "Grades of teachers by course and teacher name",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the grades for each course.",
      "Show the grades for each course broken down by teacher name.",
      "Compare the grades of different teachers within the same course.",
      "Identify which teacher has the highest grade in each course."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "406@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT p.Sex, c.Poll_Source, SUM(c.Support_rate) as Total_Support_rate FROM people p JOIN candidate c ON p.People_ID = c.People_ID GROUP BY p.Sex, c.Poll_Source",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT p.Sex, c.Poll_Source, SUM(c.Support_rate) as Total_Support_rate FROM people p JOIN candidate c ON p.People_ID = c.People_ID GROUP BY p.Sex, c.Poll_Source"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Sex",
      "y_name": "Total_Support_rate",
      "x_data": [
        "M",
        "M",
        "F"
      ],
      "y_data": [
        0.25,
        0.18,
        0.17
      ],
      "classify": [
        "Poll_Source"
      ],
      "describe": "Total Support Rate by Sex and Poll Source",
      "sort": "null"
    },
    "nl_queries": [
      "What is the total support rate for candidates grouped by sex and poll source?",
      "How does the total support rate differ between male and female candidates?",
      "Which poll source shows the highest total support rate for male candidates?",
      "Are there significant differences in support rates across different poll sources for female candidates?"
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3216@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country, COUNT(*) AS Number_of_People FROM people GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country, COUNT(*) AS Number_of_People FROM people GROUP BY Country"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Number_of_People",
      "x_data": [
        "Canada",
        "Sweden",
        "United States"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of people from each country",
      "sort": null
    },
    "nl_queries": [
      "How many people are there from each country?",
      "Which country has the highest number of people?",
      "What is the age distribution of people from different countries?",
      "How many males and females are there from each country?"
    ],
    "irrelevant_tables": [
      "wedding",
      "church"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2691@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.name AS category_name, a.first_name || ' ' || a.last_name AS actor_name, COUNT(fa.film_id) AS film_count FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film_category fc ON fa.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name, a.first_name, a.last_name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.name AS category_name, a.first_name || ' ' || a.last_name AS actor_name, COUNT(fa.film_id) AS film_count FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film_category fc ON fa.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id GROUP BY c.name, a.first_name, a.last_name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "sakila_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "category_name",
      "y_name": "film_count",
      "x_data": [
        "Action",
        "Animation",
        "Children"
      ],
      "y_data": [
        3,
        1,
        2
      ],
      "classify": [
        "actor_name"
      ],
      "describe": "Number of films each actor played in different categories",
      "sort": "desc"
    },
    "nl_queries": [
      "How many films did each actor play in each category?",
      "Which actor has the highest number of films in the 'Action' category?",
      "What is the distribution of films among actors in the 'Animation' category?",
      "Compare the total number of films across different categories for the top three actors."
    ],
    "irrelevant_tables": [
      "payment",
      "film_text",
      "language",
      "film",
      "city",
      "address",
      "inventory",
      "rental",
      "store",
      "customer",
      "country",
      "staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2360@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.title, AVG(r.stars) AS avg_stars FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.title",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.title, AVG(r.stars) AS avg_stars FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.title"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "title",
      "y_name": "avg_stars",
      "x_data": [
        "Gone with the Wind",
        "Star Wars",
        "The Sound of Music"
      ],
      "y_data": [
        3.0,
        null,
        null
      ],
      "classify": [],
      "describe": "Average stars rating for each movie",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average star rating for each movie?",
      "Which movie has the highest average star rating?",
      "How do the average star ratings for movies directed by Victor Fleming compare to those directed by George Lucas?",
      "What are the average star ratings for movies released before 1970?"
    ],
    "irrelevant_tables": [
      "Reviewer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2369@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT R.name, M.title, AVG(RT.stars) as avg_stars FROM Rating RT JOIN Reviewer R ON RT.rID = R.rID JOIN Movie M ON RT.mID = M.mID GROUP BY R.name, M.title",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT R.name, M.title, AVG(RT.stars) as avg_stars FROM Rating RT JOIN Reviewer R ON RT.rID = R.rID JOIN Movie M ON RT.mID = M.mID GROUP BY R.name, M.title"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "name",
      "y_name": "avg_stars",
      "x_data": [
        "Sarah Martinez",
        "Sarah Martinez",
        "Daniel Lewis"
      ],
      "y_data": [
        3.0,
        2.0,
        4.0
      ],
      "classify": [
        "title"
      ],
      "describe": "Average star ratings given by each reviewer to different movies",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the average star ratings given by each reviewer to different movies?",
      "Which movies received the highest average star ratings from each reviewer?",
      "How do the average star ratings given by different reviewers compare across all movies?",
      "Are there any reviewers who consistently give higher or lower ratings across all movies?"
    ],
    "irrelevant_tables": [
      "Reviewer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2383@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.title, AVG(r.stars) AS average_stars FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.title",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.title, AVG(r.stars) AS average_stars FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.title"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "title",
      "y_name": "average_stars",
      "x_data": [
        "Gone with the Wind",
        "Star Wars",
        "The Sound of Music"
      ],
      "y_data": [
        3.0,
        null,
        null
      ],
      "classify": [],
      "describe": "Average rating stars for each movie",
      "sort": "asc"
    },
    "nl_queries": [
      "What are the average ratings for each movie?",
      "Which movie has the highest average rating?",
      "How do the average ratings for 'Gone with the Wind' and 'Star Wars' compare?",
      "What is the trend in average ratings over the years for movies directed by Victor Fleming?"
    ],
    "irrelevant_tables": [
      "Reviewer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2398@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.title AS title, AVG(r.stars) AS average_rating FROM Rating r JOIN Movie m ON r.mID = m.mID GROUP BY m.title ORDER BY average_rating DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.title AS title, AVG(r.stars) AS average_rating FROM Rating r JOIN Movie m ON r.mID = m.mID GROUP BY m.title ORDER BY average_rating DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "title",
      "y_name": "average_rating",
      "x_data": [
        "Gone with the Wind",
        "Star Wars",
        "The Sound of Music"
      ],
      "y_data": [
        3.0,
        4.0,
        4.0
      ],
      "classify": [],
      "describe": "Average rating of movies",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average rating of each movie?",
      "Which movie has the highest average rating?",
      "How do the average ratings of 'Gone with the Wind' and 'Star Wars' compare?",
      "What is the trend in average ratings across all movies?"
    ],
    "irrelevant_tables": [
      "Reviewer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2402@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT r.name, AVG(rt.stars) AS avg_rating FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID GROUP BY r.name ORDER BY avg_rating DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT r.name, AVG(rt.stars) AS avg_rating FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID GROUP BY r.name ORDER BY avg_rating DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "avg_rating",
      "x_data": [
        "Sarah Martinez",
        "Daniel Lewis"
      ],
      "y_data": [
        3.0,
        4.0
      ],
      "classify": [],
      "describe": "This bar chart shows the average rating given by each reviewer.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average rating given by each reviewer?",
      "How do the average ratings given by reviewers vary over time?",
      "Which movies received the highest average ratings from reviewers?",
      "How did the ratings for 'Gone with the Wind' change over time?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2405@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT title, AVG(stars) AS avg_rating FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID GROUP BY title",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT title, AVG(stars) AS avg_rating FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID GROUP BY title"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "movie_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "title",
      "y_name": "avg_rating",
      "x_data": [
        "Gone with the Wind",
        "Star Wars",
        "The Sound of Music"
      ],
      "y_data": [
        3.0,
        null,
        null
      ],
      "classify": [],
      "describe": "Average ratings of movies",
      "sort": null
    },
    "nl_queries": [
      "What are the average ratings for each movie?",
      "Which movie has the highest average rating?",
      "What is the difference in average ratings between the highest and lowest rated movies?",
      "How do the average ratings trend over the years for movies directed by Victor Fleming?"
    ],
    "irrelevant_tables": [
      "Reviewer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1432@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name AS Company_Name, COUNT(*) AS Number_of_Flights FROM operate_company oc JOIN flight f ON oc.id = f.company_id GROUP BY Company_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name AS Company_Name, COUNT(*) AS Number_of_Flights FROM operate_company oc JOIN flight f ON oc.id = f.company_id GROUP BY Company_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "flight_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company_Name",
      "y_name": "Number_of_Flights",
      "x_data": [
        "Air China",
        "Air China Cargo",
        "Air Hong Kong"
      ],
      "y_data": [
        0,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of flights operated by each company",
      "sort": null
    },
    "nl_queries": [
      "How many flights does each company operate?",
      "Which company operates the most flights?",
      "What is the total number of flights operated by companies incorporated in China?",
      "How does the number of flights compare between corporate and joint venture companies?"
    ],
    "irrelevant_tables": [
      "airport"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "679@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT company.Name AS Company_Name, company.Industry, SUM(company.Sales_in_Billion) AS Total_Sales FROM company GROUP BY company.Name, company.Industry ORDER BY Total_Sales DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT company.Name AS Company_Name, company.Industry, SUM(company.Sales_in_Billion) AS Total_Sales FROM company GROUP BY company.Name, company.Industry ORDER BY Total_Sales DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "company_employee",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Company_Name",
      "y_name": "Total_Sales",
      "x_data": [
        "ExxonMobil",
        "General Electric",
        "JPMorgan Chase"
      ],
      "y_data": [
        433.5,
        147.3,
        110.8
      ],
      "classify": [
        "Industry"
      ],
      "describe": "Total sales of companies grouped by industry",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total sales of each company, and how do they vary across different industries?",
      "Within the industries, which companies have the highest sales, and how do they compare?",
      "How do the sales figures relate to the profits of these companies across different industries?",
      "What is the distribution of market value among the top-performing companies by sales in each industry?"
    ],
    "irrelevant_tables": [
      "employment",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "680@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Industry, SUM(c.Sales_in_Billion) AS Total_Sales, c.Headquarters FROM company c GROUP BY c.Industry, c.Headquarters",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Industry, SUM(c.Sales_in_Billion) AS Total_Sales, c.Headquarters FROM company c GROUP BY c.Industry, c.Headquarters"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "company_employee",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Industry",
      "y_name": "Total_Sales",
      "x_data": [
        "Oil and gas",
        "Banking",
        "Conglomerate"
      ],
      "y_data": [
        433.5,
        110.8,
        147.3
      ],
      "classify": [
        "Headquarters"
      ],
      "describe": "Total Sales in Billion by Industry and Headquarters",
      "sort": "null"
    },
    "nl_queries": [
      "What are the total sales in billion for each industry?",
      "How do the total sales in billion vary by headquarters for each industry?",
      "Which industry has the highest total sales in billion across different headquarters?",
      "Compare the total sales in billion among industries based on their headquarters."
    ],
    "irrelevant_tables": [
      "employment",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "682@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Industry, SUM(Sales_in_Billion) AS Total_Sales FROM company GROUP BY Industry",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Industry, SUM(Sales_in_Billion) AS Total_Sales FROM company GROUP BY Industry"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "company_employee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Industry",
      "y_name": "Total_Sales",
      "x_data": [
        "Oil and gas",
        "Banking",
        "Conglomerate"
      ],
      "y_data": [
        433.5,
        110.8,
        147.3
      ],
      "classify": [],
      "describe": "Total sales in billion dollars for each industry",
      "sort": null
    },
    "nl_queries": [
      "What are the total sales in billion dollars for each industry?",
      "Which industry has the highest total sales?",
      "How do the sales of the Oil and gas industry compare to the Banking industry?",
      "What is the total sales value of the Conglomerate industry?"
    ],
    "irrelevant_tables": [
      "employment",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2494@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Orchestra, SUM(Attendance) AS Total_Attendance FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID INNER JOIN show ON performance.Performance_ID = show.Performance_ID GROUP BY Orchestra",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Orchestra, SUM(Attendance) AS Total_Attendance FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID INNER JOIN show ON performance.Performance_ID = show.Performance_ID GROUP BY Orchestra"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "orchestra",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Orchestra",
      "y_name": "Total_Attendance",
      "x_data": [
        "London Symphony Orchestra",
        "Columbia Symphony Orchestra",
        "Royal Concertgebouw Orchestra"
      ],
      "y_data": [
        1026.0,
        695.0,
        555.0
      ],
      "classify": [],
      "describe": "Total attendance for each orchestra",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total attendance for each orchestra?",
      "Which orchestra has the highest total attendance?",
      "How does the attendance for the London Symphony Orchestra compare to the others?",
      "Analyze the total attendance for orchestras to identify trends or patterns."
    ],
    "irrelevant_tables": [
      "conductor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "415@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year, AVG(Horsepower) AS AvgHorsepower FROM cars_data GROUP BY Year ORDER BY Year",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year, AVG(Horsepower) AS AvgHorsepower FROM cars_data GROUP BY Year ORDER BY Year"
    },
    "reasoning_level": "L3",
    "chart": "LINE",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "AvgHorsepower",
      "x_data": [
        "1970"
      ],
      "y_data": [
        "148.33"
      ],
      "classify": [],
      "describe": "Average Horsepower over the years",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average horsepower of cars over the years?",
      "How does the average horsepower compare with the average weight over the years?",
      "Can we see a relationship between the average horsepower and the number of cylinders over the years?",
      "How do the trends in average horsepower and average weight differ across different continents?"
    ],
    "irrelevant_tables": [
      "model_list",
      "car_names"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "420@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.CountryName, AVG(cd.MPG) AS AvgMPG FROM cars_data cd JOIN car_makers cm ON cd.Id = cm.Id JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.CountryName, AVG(cd.MPG) AS AvgMPG FROM cars_data cd JOIN car_makers cm ON cd.Id = cm.Id JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "CountryName",
      "y_name": "AvgMPG",
      "x_data": [
        "usa",
        "germany"
      ],
      "y_data": [
        17.0,
        18.0
      ],
      "classify": [],
      "describe": "Average MPG by country",
      "sort": null
    },
    "nl_queries": [
      "What is the average MPG for cars from different countries?",
      "How does the average MPG compare between cars from the USA and Germany?",
      "What is the distribution of MPG values for cars from different countries?",
      "How does car weight influence MPG across different countries?"
    ],
    "irrelevant_tables": [
      "model_list",
      "car_names"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "434@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.CountryName AS Country, AVG(cd.MPG) AS Average_MPG FROM cars_data cd INNER JOIN car_makers cm ON cd.Id = cm.Id INNER JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.CountryName AS Country, AVG(cd.MPG) AS Average_MPG FROM cars_data cd INNER JOIN car_makers cm ON cd.Id = cm.Id INNER JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Average_MPG",
      "x_data": [
        "usa",
        "germany"
      ],
      "y_data": [
        17,
        18
      ],
      "classify": [],
      "describe": "Average MPG of cars by country",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average MPG of cars from each country?",
      "How does the average MPG compare between American and European car makers?",
      "What is the distribution of car weights by country?",
      "How does horsepower vary across car models from different countries?"
    ],
    "irrelevant_tables": [
      "model_list",
      "car_names"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1032@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT C.customer_first_name || ' ' || C.customer_last_name AS customer_name, SUM(F.transaction_amount) AS total_transaction_amount FROM Financial_Transactions F JOIN Customers_Cards CC ON F.card_id = CC.card_id JOIN Customers C ON CC.customer_id = C.customer_id GROUP BY C.customer_first_name, C.customer_last_name ORDER BY total_transaction_amount DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT C.customer_first_name || ' ' || C.customer_last_name AS customer_name, SUM(F.transaction_amount) AS total_transaction_amount FROM Financial_Transactions F JOIN Customers_Cards CC ON F.card_id = CC.card_id JOIN Customers C ON CC.customer_id = C.customer_id GROUP BY C.customer_first_name, C.customer_last_name ORDER BY total_transaction_amount DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "total_transaction_amount",
      "x_data": [
        "Customer 1",
        "Customer 2",
        "Customer 3"
      ],
      "y_data": [
        3647.55,
        3418.32,
        486.56
      ],
      "classify": [],
      "describe": "This bar chart shows the total transaction amounts by customer.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total transaction amount for each customer?",
      "Which customer has the highest total transaction amount?",
      "How does the total transaction amount vary among customers?",
      "Identify trends or patterns in the transaction amounts by customer."
    ],
    "irrelevant_tables": [
      "Accounts"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1043@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_first_name, c.customer_last_name, cc.card_type_code, SUM(ft.transaction_amount) AS total_amount FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id JOIN Financial_Transactions ft ON cc.card_id = ft.card_id GROUP BY c.customer_first_name, c.customer_last_name, cc.card_type_code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.customer_first_name, c.customer_last_name, cc.card_type_code, SUM(ft.transaction_amount) AS total_amount FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id JOIN Financial_Transactions ft ON cc.card_id = ft.card_id GROUP BY c.customer_first_name, c.customer_last_name, cc.card_type_code"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "stacked_bar",
      "x_name": "customer_first_name",
      "y_name": "total_amount",
      "x_data": [
        "Aniyah",
        "Susie",
        "Marcel"
      ],
      "y_data": [
        1701.23,
        1931.76,
        486.56
      ],
      "classify": [
        "card_type_code"
      ],
      "describe": "Total transaction amount by customer and card type",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the total transaction amount for each customer.",
      "Show the total transaction amount for each customer, broken down by card type.",
      "Which customer has the highest total transaction amount for Credit cards?",
      "Compare the total transaction amount for each customer across different card types."
    ],
    "irrelevant_tables": [
      "Accounts"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1060@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT A.account_name, SUM(F.transaction_amount) AS total_transaction_amount FROM Financial_Transactions F JOIN Accounts A ON F.account_id = A.account_id GROUP BY A.account_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT A.account_name, SUM(F.transaction_amount) AS total_transaction_amount FROM Financial_Transactions F JOIN Accounts A ON F.account_id = A.account_id GROUP BY A.account_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "account_name",
      "y_name": "total_transaction_amount",
      "x_data": [
        "338",
        "562",
        "162"
      ],
      "y_data": [
        486.56,
        1701.23,
        1931.76
      ],
      "classify": [],
      "describe": "Total transaction amount per account",
      "sort": null
    },
    "nl_queries": [
      "What is the total transaction amount for each account?",
      "Which account type has the highest total transaction amount?",
      "Compare the transaction amounts of VIP accounts versus Regular accounts.",
      "How do the transaction amounts vary between different account types over time?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Customers_Cards"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2162@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT technician.Name AS Technician, COUNT(repair_assignment.repair_ID) AS Repair_Count FROM repair_assignment JOIN technician ON repair_assignment.technician_id = technician.technician_id GROUP BY technician.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT technician.Name AS Technician, COUNT(repair_assignment.repair_ID) AS Repair_Count FROM repair_assignment JOIN technician ON repair_assignment.technician_id = technician.technician_id GROUP BY technician.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Technician",
      "y_name": "Repair_Count",
      "x_data": [
        "Joe Sewell",
        "John Brown",
        "Tony Sewell"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of repairs assigned to each technician",
      "sort": null
    },
    "nl_queries": [
      "How many repairs have been assigned to each technician?",
      "Which technician has the highest number of assigned repairs?",
      "What is the total number of repairs assigned to all technicians?",
      "What percentage of total repairs has each technician handled?"
    ],
    "irrelevant_tables": [
      "repair"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2164@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Team, AVG(Age) AS Average_Age FROM technician GROUP BY Team",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Team, AVG(Age) AS Average_Age FROM technician GROUP BY Team"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team",
      "y_name": "Average_Age",
      "x_data": [
        "NYY",
        "CLE"
      ],
      "y_data": [
        36.5,
        43
      ],
      "classify": [],
      "describe": "Average age of technicians by team",
      "sort": null
    },
    "nl_queries": [
      "What is the average age of technicians in each team?",
      "How many repairs have been assigned to each team?",
      "What is the failure rate of repairs for each team?",
      "How does the quality rank of machines correlate with the failure rate of repairs for each team?"
    ],
    "irrelevant_tables": [
      "repair"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2165@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT t.Team, COUNT(ra.repair_ID) AS repair_count FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id GROUP BY t.Team",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT t.Team, COUNT(ra.repair_ID) AS repair_count FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id GROUP BY t.Team"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team",
      "y_name": "repair_count",
      "x_data": [
        "NYY",
        "CLE"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of repairs assigned to each team",
      "sort": null
    },
    "nl_queries": [
      "What is the number of repairs assigned to each team?",
      "Which technicians have the highest number of repairs assigned within their team?",
      "What is the total value points of the machines repaired by each team?",
      "How does the quality rank of machines repaired correlate with the number of repairs assigned per team?"
    ],
    "irrelevant_tables": [
      "repair",
      "machine"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2169@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Team, COUNT(repair_ID) AS repair_count FROM technician INNER JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY Team",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Team, COUNT(repair_ID) AS repair_count FROM technician INNER JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY Team"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team",
      "y_name": "repair_count",
      "x_data": [
        "NYY",
        "CLE"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of repairs assigned to each team",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the count of repairs assigned to each team?",
      "What is the average age of technicians in each team?",
      "What is the distribution of machine classes among teams?",
      "How does the value_points of machines correlate with the team's repair count?"
    ],
    "irrelevant_tables": [
      "repair",
      "machine"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2766@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Branch_ID, SUM(Total_pounds) AS Total_Purchases FROM purchase GROUP BY Branch_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Branch_ID, SUM(Total_pounds) AS Total_Purchases FROM purchase GROUP BY Branch_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "shop_membership",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Branch_ID",
      "y_name": "Total_Purchases",
      "x_data": [
        1,
        3,
        5
      ],
      "y_data": [
        988.09,
        2013.32,
        321.13
      ],
      "classify": [],
      "describe": "Total purchases per branch",
      "sort": null
    },
    "nl_queries": [
      "What is the total amount of purchases made at each branch?",
      "Which branch had the highest total purchases?",
      "How does the total purchase amount compare across different branches?",
      "Can we see a breakdown of total purchases made by each member at the highest earning branch?"
    ],
    "irrelevant_tables": [
      "member",
      "membership_register_branch"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3279@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT w.Name, SUM(e.Time) AS Total_Elimination_Time FROM wrestler w INNER JOIN elimination e ON w.Wrestler_ID = e.Wrestler_ID GROUP BY w.Name ORDER BY Total_Elimination_Time DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT w.Name, SUM(e.Time) AS Total_Elimination_Time FROM wrestler w INNER JOIN elimination e ON w.Wrestler_ID = e.Wrestler_ID GROUP BY w.Name ORDER BY Total_Elimination_Time DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "wrestler",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Total_Elimination_Time",
      "x_data": [
        "Rey Misterio Sr.",
        "Fishman"
      ],
      "y_data": [
        11.0,
        7.38
      ],
      "classify": [],
      "describe": "Total elimination time by wrestler",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total elimination time for each wrestler?",
      "Which wrestler has the highest total elimination time?",
      "How does the total elimination time compare between wrestlers?",
      "What is the distribution of elimination moves used by the top wrestler?"
    ],
    "irrelevant_tables": [
      "wrestler"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3283@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT w.Name, e.Team, COUNT(e.Elimination_ID) AS Eliminations FROM wrestler w JOIN elimination e ON w.Wrestler_ID = e.Wrestler_ID GROUP BY w.Name, e.Team ORDER BY Eliminations DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT w.Name, e.Team, COUNT(e.Elimination_ID) AS Eliminations FROM wrestler w JOIN elimination e ON w.Wrestler_ID = e.Wrestler_ID GROUP BY w.Name, e.Team ORDER BY Eliminations DESC"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "wrestler",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Name",
      "y_name": "Eliminations",
      "x_data": [
        "Rey Misterio Sr.",
        "Fishman"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [
        "Team"
      ],
      "describe": "The number of eliminations by each wrestler, classified by team.",
      "sort": "desc"
    },
    "nl_queries": [
      "How many eliminations did each wrestler achieve?",
      "Which teams did the wrestlers belong to and how did their eliminations break down by team?",
      "How does the elimination count vary among wrestlers across different teams?",
      "Which team has the highest number of eliminations and who are the top contributors?"
    ],
    "irrelevant_tables": [
      "wrestler"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1077@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue, SUM(Num_of_Audience) AS Total_Audience FROM debate GROUP BY Venue"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "Total_Audience",
      "x_data": [
        "Manama , Bahrain",
        "Doha , Qatar"
      ],
      "y_data": [
        432,
        134
      ],
      "classify": [],
      "describe": "Total number of audience in each venue",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of audience in each venue?",
      "How does the total number of audience in each venue compare over time?",
      "What is the distribution of debates that took place in each venue?",
      "Who were the participants in the debates at each venue and did the affirmative side win?"
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1273@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.course_name, COUNT(sce.student_id) AS student_count FROM Student_Course_Enrolment sce JOIN Courses c ON sce.course_id = c.course_id GROUP BY c.course_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.course_name, COUNT(sce.student_id) AS student_count FROM Student_Course_Enrolment sce JOIN Courses c ON sce.course_id = c.course_id GROUP BY c.course_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "course_name",
      "y_name": "student_count",
      "x_data": [
        "database",
        "advanced database",
        "operating system"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students enrolled in each course",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the number of students enrolled in each course.",
      "Which course has the highest number of enrolled students?",
      "How many students are enrolled in Computer Science courses?",
      "Compare the student enrollment between 'database' and 'operating system' courses."
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Subjects",
      "Student_Tests_Taken",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "769@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT rd.Location_Name, COUNT(dd.Document_ID) AS Document_Count FROM Document_Locations dl JOIN Ref_Locations rd ON dl.Location_Code = rd.Location_Code JOIN Documents_to_be_Destroyed dd ON dl.Document_ID = dd.Document_ID GROUP BY rd.Location_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT rd.Location_Name, COUNT(dd.Document_ID) AS Document_Count FROM Document_Locations dl JOIN Ref_Locations rd ON dl.Location_Code = rd.Location_Code JOIN Documents_to_be_Destroyed dd ON dl.Document_ID = dd.Document_ID GROUP BY rd.Location_Name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location_Name",
      "y_name": "Document_Count",
      "x_data": [
        "Edinburgh",
        "Canada"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Distribution of documents to be destroyed by location",
      "sort": "asc"
    },
    "nl_queries": [
      "How many documents are planned for destruction in each location?",
      "Which employee authorized the destruction of documents and in which locations do these documents reside?",
      "What is the role of the employees who authorized the destruction of documents in each location?",
      "Are there any patterns in the planned and actual destruction dates for documents across different locations?"
    ],
    "irrelevant_tables": [
      "All_Documents",
      "Roles",
      "Ref_Document_Types",
      "Employees",
      "Ref_Calendar"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "772@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Employee_Name AS Employee, COUNT(d.Document_ID) AS Documents_Destroyed FROM Documents_to_be_Destroyed d JOIN Employees e ON d.Destroyed_by_Employee_ID = e.Employee_ID GROUP BY e.Employee_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Employee_Name AS Employee, COUNT(d.Document_ID) AS Documents_Destroyed FROM Documents_to_be_Destroyed d JOIN Employees e ON d.Destroyed_by_Employee_ID = e.Employee_ID GROUP BY e.Employee_Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Employee",
      "y_name": "Documents_Destroyed",
      "x_data": [
        "Employee1",
        "Employee2",
        "Employee3"
      ],
      "y_data": [
        5,
        3,
        8
      ],
      "classify": [],
      "describe": "Number of documents destroyed by each employee",
      "sort": "desc"
    },
    "nl_queries": [
      "Which employee has destroyed the most documents?",
      "How does the number of documents destroyed by each employee compare?",
      "What is the distribution of document destruction by employees over time?",
      "Are there any patterns in document destruction when considering the roles of employees?"
    ],
    "irrelevant_tables": [
      "All_Documents",
      "Roles",
      "Ref_Document_Types",
      "Ref_Locations",
      "Ref_Calendar"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1122@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_name, SUM(oi.product_id) AS total_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_name ORDER BY total_orders DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_name, SUM(oi.product_id) AS total_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_name ORDER BY total_orders DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "total_orders",
      "x_data": [
        "Ahmed",
        "Chauncey",
        "Lukas"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Total number of orders made by each customer, sorted in descending order.",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of orders made by each customer?",
      "Which customer has made the highest number of orders?",
      "What is the product distribution in the orders made by the top customer?",
      "What is the average order value for the top customer?"
    ],
    "irrelevant_tables": [
      "Product_Suppliers",
      "Suppliers",
      "Staff",
      "Department_Stores",
      "Customer_Addresses",
      "Supplier_Addresses",
      "Products",
      "Department_Store_Chain",
      "Staff_Department_Assignments",
      "Addresses",
      "Departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1137@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_store_chain_name AS chain_name, SUM(total_value_purchased) AS total_value FROM Department_Store_Chain dsc JOIN Department_Stores ds ON dsc.dept_store_chain_id = ds.dept_store_chain_id JOIN Departments dep ON ds.dept_store_id = dep.dept_store_id JOIN Product_Suppliers ps ON dep.department_id = ps.product_id GROUP BY dept_store_chain_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_store_chain_name AS chain_name, SUM(total_value_purchased) AS total_value FROM Department_Store_Chain dsc JOIN Department_Stores ds ON dsc.dept_store_chain_id = ds.dept_store_chain_id JOIN Departments dep ON ds.dept_store_id = dep.dept_store_id JOIN Product_Suppliers ps ON dep.department_id = ps.product_id GROUP BY dept_store_chain_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "chain_name",
      "y_name": "total_value",
      "x_data": [
        "South",
        "East",
        "West"
      ],
      "y_data": [
        72289.16,
        36274.56,
        0
      ],
      "classify": [],
      "describe": "Total value purchased from suppliers by department store chains",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total value of products purchased from suppliers by each department store chain?",
      "Which department store chain has the highest total value of products purchased from suppliers?",
      "How does the total value of products purchased vary across different department store chains?",
      "Can we compare the total value of products purchased from suppliers between the top two department store chains?"
    ],
    "irrelevant_tables": [
      "Suppliers",
      "Customer_Orders",
      "Customers",
      "Staff",
      "Customer_Addresses",
      "Supplier_Addresses",
      "Order_Items",
      "Staff_Department_Assignments",
      "Addresses",
      "Departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1138@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_name, SUM(total_amount_purchased) AS total_quantity FROM Products JOIN Product_Suppliers ON Products.product_id = Product_Suppliers.product_id GROUP BY product_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_name, SUM(total_amount_purchased) AS total_quantity FROM Products JOIN Product_Suppliers ON Products.product_id = Product_Suppliers.product_id GROUP BY product_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "red jeans",
        "yellow jeans",
        "black jeans"
      ],
      "y_data": [
        0,
        0,
        105118.5
      ],
      "classify": [],
      "describe": "Total quantity of products purchased from suppliers",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total quantity purchased for each product type?",
      "Which product had the highest quantity purchased from suppliers?",
      "How does the total quantity purchased vary across different product types?",
      "What percentage of the total purchased quantity does each product type represent?"
    ],
    "irrelevant_tables": [
      "Suppliers",
      "Customer_Orders",
      "Customers",
      "Staff",
      "Department_Stores",
      "Customer_Addresses",
      "Supplier_Addresses",
      "Order_Items",
      "Department_Store_Chain",
      "Staff_Department_Assignments",
      "Addresses",
      "Departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1139@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT supplier_name, SUM(total_value_purchased) AS total_value FROM Product_Suppliers PS JOIN Suppliers S ON PS.supplier_id = S.supplier_id GROUP BY supplier_name ORDER BY total_value DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT supplier_name, SUM(total_value_purchased) AS total_value FROM Product_Suppliers PS JOIN Suppliers S ON PS.supplier_id = S.supplier_id GROUP BY supplier_name ORDER BY total_value DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "supplier_name",
      "y_name": "total_value",
      "x_data": [
        "Tesco"
      ],
      "y_data": [
        43288.34
      ],
      "classify": [],
      "describe": "Total value of products purchased from each supplier",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total value of products purchased from each supplier?",
      "Which supplier has the highest total value of products purchased?",
      "How does the total value of products purchased compare across suppliers?",
      "Is there a significant difference in the total value of products purchased from the top two suppliers?"
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Customers",
      "Staff",
      "Department_Stores",
      "Customer_Addresses",
      "Supplier_Addresses",
      "Order_Items",
      "Department_Store_Chain",
      "Staff_Department_Assignments",
      "Addresses",
      "Departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1142@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.product_name, SUM(ps.total_amount_purchased) AS total_amount_purchased FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id GROUP BY p.product_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.product_name, SUM(ps.total_amount_purchased) AS total_amount_purchased FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id GROUP BY p.product_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_amount_purchased",
      "x_data": [
        "red jeans",
        "yellow jeans",
        "black jeans"
      ],
      "y_data": [
        0,
        0,
        105118.5
      ],
      "classify": [],
      "describe": "Total amount purchased for each product",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount purchased for each product?",
      "Which product has the highest total amount purchased?",
      "Compare the total amount purchased between 'red jeans' and 'black jeans'.",
      "Identify any trends in the total amount purchased across different products."
    ],
    "irrelevant_tables": [
      "Suppliers",
      "Customer_Orders",
      "Customers",
      "Staff",
      "Department_Stores",
      "Customer_Addresses",
      "Supplier_Addresses",
      "Order_Items",
      "Department_Store_Chain",
      "Staff_Department_Assignments",
      "Addresses",
      "Departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "997@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ca.city, COUNT(co.customer_id) AS customer_count FROM Customer_Address_History cah JOIN Addresses ca ON cah.address_id = ca.address_id JOIN Customers co ON cah.customer_id = co.customer_id GROUP BY ca.city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ca.city, COUNT(co.customer_id) AS customer_count FROM Customer_Address_History cah JOIN Addresses ca ON cah.address_id = ca.address_id JOIN Customers co ON cah.customer_id = co.customer_id GROUP BY ca.city"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "customer_count",
      "x_data": [
        "Hertafurt",
        "Edgardoberg",
        "Gilbertmouth"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Distribution of customers across different cities",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of customers across different cities?",
      "How many customers are there in each city?",
      "Which city has the highest number of customers?",
      "What are the top 3 cities with the most customers?"
    ],
    "irrelevant_tables": [
      "Contacts",
      "Products",
      "Order_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1000@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "Apple",
        "jcrew"
      ],
      "y_data": [
        3,
        7
      ],
      "classify": [],
      "describe": "Total quantity of each product sold",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total quantity of each product sold?",
      "Which product has the highest sales quantity?",
      "What is the distribution of total quantity sold among different products?",
      "How does the quantity sold of each product compare to others?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Customer_Orders",
      "Customers",
      "Contacts",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1006@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name ORDER BY total_quantity DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT p.product_name, SUM(oi.order_quantity) AS total_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name ORDER BY total_quantity DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "total_quantity",
      "x_data": [
        "Apple",
        "jcrew",
        "Apple"
      ],
      "y_data": [
        19,
        7,
        3
      ],
      "classify": [],
      "describe": "Total quantity of each product ordered",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total quantity of each product ordered?",
      "Which product has the highest total quantity ordered?",
      "How do the quantities of different products compare?",
      "Are there any products with significantly lower order quantities?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Customer_Orders",
      "Customers",
      "Contacts",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1010@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.customer_name, COUNT(o.order_id) AS order_count FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.customer_name, COUNT(o.order_id) AS order_count FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_name",
      "y_name": "order_count",
      "x_data": [
        "Kayley",
        "Sterling",
        "Buford"
      ],
      "y_data": [
        0,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of orders per customer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of orders among customers?",
      "Which customer has the highest number of orders?",
      "What is the total number of orders placed by each customer?",
      "How does the order frequency vary among customers?"
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Contacts",
      "Products",
      "Order_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1242@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT customer_status_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY customer_status_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT customer_status_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY customer_status_code"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "driving_school",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_status_code",
      "y_name": "customer_count",
      "x_data": [
        "Bad Customer",
        "Good Customer"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of customers by their status",
      "sort": null
    },
    "nl_queries": [
      "How many customers are classified as 'Good Customer' versus 'Bad Customer'?",
      "What is the total outstanding amount for 'Good Customers' and 'Bad Customers'?",
      "What are the payment methods used by 'Good Customers' and 'Bad Customers' to make payments?",
      "How does the lesson cancellation rate differ between 'Good Customers' and 'Bad Customers'?"
    ],
    "irrelevant_tables": [
      "Lessons",
      "Staff",
      "Vehicles",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1245@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.city, SUM(cp.amount_payment) AS total_payment FROM Customer_Payments cp JOIN Customers cu ON cp.customer_id = cu.customer_id JOIN Addresses a ON cu.customer_address_id = a.address_id GROUP BY c.city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.city, SUM(cp.amount_payment) AS total_payment FROM Customer_Payments cp JOIN Customers cu ON cp.customer_id = cu.customer_id JOIN Addresses a ON cu.customer_address_id = a.address_id GROUP BY c.city"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "driving_school",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "total_payment",
      "x_data": [
        "Port Melyssa",
        "Hagenesfurt",
        "Lake Elaina"
      ],
      "y_data": [
        9570.93,
        8180.26,
        4610.26
      ],
      "classify": [],
      "describe": "Total payments by city",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total payment received from customers in each city?",
      "How do the total payments compare between cities?",
      "Which city has the highest total payment?",
      "What is the total payment distribution across different cities?"
    ],
    "irrelevant_tables": [
      "Lessons",
      "Staff",
      "Vehicles"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1247@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.city, COUNT(p.customer_id) AS total_customers, SUM(p.amount_payment) AS total_payment FROM Customer_Payments p JOIN Customers c ON p.customer_id = c.customer_id JOIN Addresses a ON c.customer_address_id = a.address_id GROUP BY c.city ORDER BY total_payment DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.city, COUNT(p.customer_id) AS total_customers, SUM(p.amount_payment) AS total_payment FROM Customer_Payments p JOIN Customers c ON p.customer_id = c.customer_id JOIN Addresses a ON c.customer_address_id = a.address_id GROUP BY c.city ORDER BY total_payment DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "driving_school",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "total_payment",
      "x_data": [
        "Port Melyssa",
        "Hagenesfurt",
        "Lake Elaina"
      ],
      "y_data": [
        9570.93,
        8180.26,
        4610.26
      ],
      "classify": [],
      "describe": "Total payment amount per city",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total payment amount received from each city?",
      "Which city has the highest number of customers?",
      "What is the average payment amount per customer in each city?",
      "Compare the total payment amount and the average payment amount per customer across cities."
    ],
    "irrelevant_tables": [
      "Lessons",
      "Staff",
      "Vehicles"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2704@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location, SUM(Enrollment) AS Total_Enrollment FROM School GROUP BY Location",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location, SUM(Enrollment) AS Total_Enrollment FROM School GROUP BY Location"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "Total_Enrollment",
      "x_data": [
        "Bremen",
        "Culver",
        "Walkerton"
      ],
      "y_data": [
        495,
        287,
        605
      ],
      "classify": [],
      "describe": "Total enrollment by location",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total enrollment for each location?",
      "How does the total enrollment for each IHSAA_Class compare across locations?",
      "What is the trend in budgeted amounts over the years for a specific school?",
      "Compare the total investment to total budgeted amounts over the years for schools in Marshall County."
    ],
    "irrelevant_tables": [
      "endowment",
      "budget"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2706@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.School_name, AVG(b.Budget_invested_percent) AS Avg_Budget_Invested_Percent FROM school s JOIN budget b ON s.School_id = b.School_id GROUP BY s.School_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.School_name, AVG(b.Budget_invested_percent) AS Avg_Budget_Invested_Percent FROM school s JOIN budget b ON s.School_id = b.School_id GROUP BY s.School_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School_name",
      "y_name": "Avg_Budget_Invested_Percent",
      "x_data": [
        "Bremen",
        "Culver Community",
        "Glenn"
      ],
      "y_data": [
        42.9,
        108.2,
        0
      ],
      "classify": [],
      "describe": "Average budget invested percent for each school",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average budget invested percent for each school?",
      "Which school has the highest average budget invested percent?",
      "What are the differences in average budget invested percent between schools?",
      "How does the average budget invested percent correlate with school enrollment?"
    ],
    "irrelevant_tables": [
      "endowment"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2683@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS Country, COUNT(r.Roller_Coaster_ID) AS Roller_Coaster_Count FROM country c JOIN roller_coaster r ON c.Country_ID = r.Country_ID GROUP BY c.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS Country, COUNT(r.Roller_Coaster_ID) AS Roller_Coaster_Count FROM country c JOIN roller_coaster r ON c.Country_ID = r.Country_ID GROUP BY c.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "roller_coaster",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Roller_Coaster_Count",
      "x_data": [
        "Austria",
        "Finland",
        "Sweden"
      ],
      "y_data": [
        3,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of roller coasters in each country",
      "sort": "asc"
    },
    "nl_queries": [
      "How many roller coasters are there in each country?",
      "Which country has the highest number of roller coasters?",
      "What is the average number of roller coasters per country?",
      "What is the distribution of roller coaster statuses (Operating, Closed, etc.) in the country with the most roller coasters?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2051@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT j.Theme, SUM(j.Sales) AS Total_Sales FROM journal j GROUP BY j.Theme",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT j.Theme, SUM(j.Sales) AS Total_Sales FROM journal j GROUP BY j.Theme"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "journal_committee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Theme",
      "y_name": "Total_Sales",
      "x_data": [
        "Miami Dolphins",
        "at Jacksonville Jaguars",
        "at Baltimore Ravens"
      ],
      "y_data": [
        798,
        994,
        7494
      ],
      "classify": [],
      "describe": "Total sales across different journal themes",
      "sort": null
    },
    "nl_queries": [
      "What are the total sales for each journal theme?",
      "How do the total sales compare across different journal themes?",
      "Which journal themes have the highest and lowest sales?",
      "What is the distribution of sales across different themes and what does it suggest about reader preferences?"
    ],
    "irrelevant_tables": [
      "editor",
      "journal_committee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2052@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Name AS Editor_Name, COUNT(jc.Journal_ID) AS Journal_Count FROM journal_committee jc JOIN editor e ON jc.Editor_ID = e.Editor_ID GROUP BY e.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Name AS Editor_Name, COUNT(jc.Journal_ID) AS Journal_Count FROM journal_committee jc JOIN editor e ON jc.Editor_ID = e.Editor_ID GROUP BY e.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "journal_committee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Editor_Name",
      "y_name": "Journal_Count",
      "x_data": [
        "Kamila Porczyk",
        "Anna Powierza",
        "Marek Siudym"
      ],
      "y_data": [
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Count of Journals handled by each Editor",
      "sort": "asc"
    },
    "nl_queries": [
      "How many journals does each editor handle?",
      "Which editor handles the most journals?",
      "How does the journal count compare among different editors?",
      "Can we see a bar chart of the journal counts for each editor?"
    ],
    "irrelevant_tables": [
      "journal"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2053@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT editor.Name, COUNT(journal_committee.Journal_ID) AS Num_Journals FROM journal_committee JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID GROUP BY editor.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT editor.Name, COUNT(journal_committee.Journal_ID) AS Num_Journals FROM journal_committee JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID GROUP BY editor.Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "journal_committee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Num_Journals",
      "x_data": [
        "Kamila Porczyk",
        "Anna Powierza",
        "Marek Siudym"
      ],
      "y_data": [
        1,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of journals managed by each editor",
      "sort": "desc"
    },
    "nl_queries": [
      "How many journals has each editor managed?",
      "Which editor has managed the most journals?",
      "What types of work are managed by each editor?",
      "Which editor manages the most articles versus photos?"
    ],
    "irrelevant_tables": [
      "journal",
      "journal_committee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2060@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT editor.Name AS Editor_Name, COUNT(journal_committee.Journal_ID) AS Journal_Count FROM journal_committee INNER JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID GROUP BY editor.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT editor.Name AS Editor_Name, COUNT(journal_committee.Journal_ID) AS Journal_Count FROM journal_committee INNER JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID GROUP BY editor.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "journal_committee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Editor_Name",
      "y_name": "Journal_Count",
      "x_data": [
        "Kamila Porczyk"
      ],
      "y_data": [
        1
      ],
      "classify": [],
      "describe": "Number of journals managed by each editor",
      "sort": null
    },
    "nl_queries": [
      "How many journals does each editor manage?",
      "Which editor manages the most journals?",
      "What is the distribution of work types among the journals managed by each editor?",
      "How do the sales figures compare across journals managed by different editors?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1419@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT country, COUNT(*) AS airline_count FROM airlines GROUP BY country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT country, COUNT(*) AS airline_count FROM airlines GROUP BY country"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "flight_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "country",
      "y_name": "airline_count",
      "x_data": [
        "United States",
        "Papua New Guinea"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Number of airlines per country",
      "sort": "asc"
    },
    "nl_queries": [
      "How many airlines are there in each country?",
      "Which countries have the highest number of airlines?",
      "What is the distribution of active and inactive airlines in each country?",
      "How many active airlines are there in each country?"
    ],
    "irrelevant_tables": [
      "airports",
      "routes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1380@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT u.name AS name, COUNT(r.a_id) AS num_reviews FROM useracct u JOIN review r ON u.u_id = r.u_id GROUP BY u.name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT u.name AS name, COUNT(r.a_id) AS num_reviews FROM useracct u JOIN review r ON u.u_id = r.u_id GROUP BY u.name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "epinions_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "num_reviews",
      "x_data": [
        "Helen",
        "Mark"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of reviews per user",
      "sort": "desc"
    },
    "nl_queries": [
      "How many reviews did each user write?",
      "Which user wrote the most reviews?",
      "How does the review count compare between users?",
      "What is the average number of reviews per user?"
    ],
    "irrelevant_tables": [
      "item",
      "trust"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1085@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Name AS College_Name, COUNT(m.Member_ID) AS Member_Count FROM member m JOIN college c ON m.College_ID = c.College_ID GROUP BY c.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Name AS College_Name, COUNT(m.Member_ID) AS Member_Count FROM member m JOIN college c ON m.College_ID = c.College_ID GROUP BY c.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "decoration_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "College_Name",
      "y_name": "Member_Count",
      "x_data": [
        "Saskatchewan School",
        "B.C. School",
        "Calgary School"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Count of members in each college",
      "sort": "asc"
    },
    "nl_queries": [
      "How many members are there in each college?",
      "Which college has the highest number of members?",
      "What is the distribution of members across the colleges?",
      "Are there any colleges with no members?"
    ],
    "irrelevant_tables": [
      "round"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3045@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR CHART",
      "data_part": {
        "sql_part": "SELECT s.Name AS Station, s.Location, t.Name AS Train, COUNT(*) AS Number_of_Trains FROM train_station ts JOIN train t ON ts.Train_ID = t.Train_ID JOIN station s ON ts.Station_ID = s.Station_ID GROUP BY s.Name, s.Location, t.Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR CHART SELECT s.Name AS Station, s.Location, t.Name AS Train, COUNT(*) AS Number_of_Trains FROM train_station ts JOIN train t ON ts.Train_ID = t.Train_ID JOIN station s ON ts.Station_ID = s.Station_ID GROUP BY s.Name, s.Location, t.Name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR CHART",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "stacked bar chart",
      "x_name": "Station",
      "y_name": "Number_of_Trains",
      "x_data": [
        "London Waterloo",
        "London Waterloo",
        "London Waterloo"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [
        "Train"
      ],
      "describe": "Number of trains per station classified by train name",
      "sort": null
    },
    "nl_queries": [
      "What is the number of trains serving each station?",
      "How does the number of trains differ by train service at each station?",
      "Which station has the highest number of trains and what is the distribution of train services there?",
      "What is the comparison of train services across different stations in London?"
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3053@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT station.Name AS Station_Name, COUNT(train.Train_ID) AS Train_Count FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID JOIN train ON train_station.Train_ID = train.Train_ID GROUP BY station.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT station.Name AS Station_Name, COUNT(train.Train_ID) AS Train_Count FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID JOIN train ON train_station.Train_ID = train.Train_ID GROUP BY station.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Station_Name",
      "y_name": "Train_Count",
      "x_data": [
        "London Waterloo",
        "London Victoria",
        "London Bridge"
      ],
      "y_data": [
        3,
        0,
        0
      ],
      "classify": [],
      "describe": "Distribution of train count per station",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of trains serving each station?",
      "Which station has the highest number of trains serving it?",
      "How does the number of trains serving each station compare to the annual passenger entries and exits?",
      "Which station has the highest passenger traffic relative to the number of trains serving it?"
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1017@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT mailshot_name, COUNT(customer_id) AS num_customers FROM Mailshot_Campaigns mc JOIN Mailshot_Customers mcu ON mc.mailshot_id = mcu.mailshot_id GROUP BY mailshot_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT mailshot_name, COUNT(customer_id) AS num_customers FROM Mailshot_Campaigns mc JOIN Mailshot_Customers mcu ON mc.mailshot_id = mcu.mailshot_id GROUP BY mailshot_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "bar",
      "x_name": "mailshot_name",
      "y_name": "num_customers",
      "x_data": [
        "US",
        "FED"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of customers per mailshot campaign",
      "sort": "desc"
    },
    "nl_queries": [
      "How many customers responded to each mailshot campaign?",
      "Which mailshot campaign had the highest customer response?",
      "What is the distribution of customer responses across different mailshot campaigns?",
      "How do customer responses compare between different mailshot campaigns?"
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Customers",
      "Products",
      "Order_Items",
      "Customer_Addresses",
      "Premises"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1019@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT p.premises_type, m.product_category, COUNT(*) AS number_of_orders FROM Premises p JOIN Customer_Addresses ca ON p.premise_id = ca.premise_id JOIN Customer_Orders co ON ca.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products pr ON oi.product_id = pr.product_id JOIN Mailshot_Customers mc ON ca.customer_id = mc.customer_id JOIN Mailshot_Campaigns m ON mc.mailshot_id = m.mailshot_id GROUP BY p.premises_type, m.product_category ORDER BY p.premises_type, m.product_category",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT p.premises_type, m.product_category, COUNT(*) AS number_of_orders FROM Premises p JOIN Customer_Addresses ca ON p.premise_id = ca.premise_id JOIN Customer_Orders co ON ca.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products pr ON oi.product_id = pr.product_id JOIN Mailshot_Customers mc ON ca.customer_id = mc.customer_id JOIN Mailshot_Campaigns m ON mc.mailshot_id = m.mailshot_id GROUP BY p.premises_type, m.product_category ORDER BY p.premises_type, m.product_category"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "premises_type",
      "y_name": "number_of_orders",
      "x_data": [
        "Warehouse",
        "Warehouse",
        "Warehouse"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [
        "product_category"
      ],
      "describe": "Number of orders by premises type and product category",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of orders across different premises types and product categories?",
      "How many orders were placed for each product category within each premises type?",
      "Can you show the number of orders placed for each product category within each premises type over time?",
      "Which premises type had the highest number of orders for each product category?"
    ],
    "irrelevant_tables": [
      "Mailshot_Customers",
      "Customers",
      "Products",
      "Order_Items",
      "Mailshot_Campaigns"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1022@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT mc.product_category, mc.mailshot_name, COUNT(mc.mailshot_id) AS mailshot_count FROM Mailshot_Customers AS mcu JOIN Mailshot_Campaigns AS mc ON mcu.mailshot_id = mc.mailshot_id GROUP BY mc.product_category, mc.mailshot_name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT mc.product_category, mc.mailshot_name, COUNT(mc.mailshot_id) AS mailshot_count FROM Mailshot_Customers AS mcu JOIN Mailshot_Campaigns AS mc ON mcu.mailshot_id = mc.mailshot_id GROUP BY mc.product_category, mc.mailshot_name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "product_category",
      "y_name": "mailshot_count",
      "x_data": [
        "food",
        "clothes"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [
        "mailshot_name"
      ],
      "describe": "Count of mailshots per product category and mailshot name",
      "sort": null
    },
    "nl_queries": [
      "What is the count of mailshots sent for each product category?",
      "How does the count of mailshots vary by mailshot name within each product category?",
      "Which mailshot names have the highest response rate within each product category?",
      "Compare the mailshot outcomes across different product categories."
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Customers",
      "Customer_Addresses",
      "Products",
      "Order_Items",
      "Premises"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2594@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT nationality, AVG(earnings) AS average_earnings FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY nationality ORDER BY average_earnings DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT nationality, AVG(earnings) AS average_earnings FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY nationality ORDER BY average_earnings DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "poker_player",
    "vis_obj": {
      "chart": "bar",
      "x_name": "nationality",
      "y_name": "average_earnings",
      "x_data": [
        "Russia",
        "Bulgaria"
      ],
      "y_data": [
        290480.5,
        189233.0
      ],
      "classify": [],
      "describe": "Average earnings by nationality",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average earnings of poker players by nationality?",
      "Which nationality has the highest average earnings in poker?",
      "How do the average earnings compare for Russian and Bulgarian poker players?",
      "What is the total earnings for each nationality?"
    ],
    "irrelevant_tables": [
      "poker_player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "909@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT customer_type_code, COUNT(*) AS complaint_count FROM Customers c JOIN Complaints cp ON c.customer_id = cp.customer_id GROUP BY customer_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT customer_type_code, COUNT(*) AS complaint_count FROM Customers c JOIN Complaints cp ON c.customer_id = cp.customer_id GROUP BY customer_type_code"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "customer_complaints",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_type_code",
      "y_name": "complaint_count",
      "x_data": [
        "Good Credit Rating"
      ],
      "y_data": [
        2
      ],
      "classify": [],
      "describe": "Number of complaints per customer type",
      "sort": "asc"
    },
    "nl_queries": [
      "How many complaints have been filed by customers with different credit ratings?",
      "What are the specific types of complaints raised by customers with good credit ratings?",
      "What is the distribution of complaint outcomes for customers with good credit ratings?",
      "Which products have the highest number of complaints from customers with good credit ratings?"
    ],
    "irrelevant_tables": [
      "Staff",
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "911@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_name, COUNT(complaint_id) AS complaint_count FROM Complaints JOIN Products ON Complaints.product_id = Products.product_id GROUP BY product_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_name, COUNT(complaint_id) AS complaint_count FROM Complaints JOIN Products ON Complaints.product_id = Products.product_id GROUP BY product_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "customer_complaints",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "complaint_count",
      "x_data": [
        "Chocolate",
        "The Great Gatsby",
        "Keyboard"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of complaints per product",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the number of complaints for each product?",
      "Which product has the highest number of complaints?",
      "What is the trend in complaint counts for each product category?",
      "Is there a correlation between product price and the number of complaints?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "690@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Country AS Country, COUNT(c.concert_ID) AS Concert_Count FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Country AS Country, COUNT(c.concert_ID) AS Concert_Count FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Country"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Concert_Count",
      "x_data": [
        "Netherlands",
        "United States",
        "France"
      ],
      "y_data": [
        0,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of concerts participated by singers from different countries",
      "sort": "desc"
    },
    "nl_queries": [
      "How many concerts have singers from different countries participated in?",
      "Which singers from these countries have attended the most concerts?",
      "What are the names and themes of these concerts?",
      "How does the participation of male and female singers compare in these concerts?"
    ],
    "irrelevant_tables": [
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "692@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Number_of_Singers",
      "x_data": [
        "Netherlands",
        "United States",
        "France"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of singers from each country",
      "sort": null
    },
    "nl_queries": [
      "Show the number of singers from each country.",
      "Compare the number of male and female singers from each country.",
      "Show the average age of singers from each country.",
      "Show the number of songs released by singers from each country."
    ],
    "irrelevant_tables": [
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "700@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Country, COUNT(si.Singer_ID) AS Singer_Count FROM singer s JOIN singer_in_concert si ON s.Singer_ID = si.Singer_ID GROUP BY s.Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Country, COUNT(si.Singer_ID) AS Singer_Count FROM singer s JOIN singer_in_concert si ON s.Singer_ID = si.Singer_ID GROUP BY s.Country"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Singer_Count",
      "x_data": [
        "Netherlands",
        "United States",
        "France"
      ],
      "y_data": [
        0,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of singers from each country who performed in concerts",
      "sort": "asc"
    },
    "nl_queries": [
      "How many singers from each country have performed in the concerts?",
      "Which country has the highest number of concert performers?",
      "What is the distribution of singers' ages who have performed in concerts, grouped by country?",
      "How does the distribution of male and female singers performing in concerts vary by country?"
    ],
    "irrelevant_tables": [
      "stadium",
      "concert"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "816@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT d.Document_Type_Name, SUM(a.Account_Details) AS Total_Expenses FROM Documents d JOIN Accounts a ON d.Document_ID = a.Statement_ID GROUP BY d.Document_Type_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT d.Document_Type_Name, SUM(a.Account_Details) AS Total_Expenses FROM Documents d JOIN Accounts a ON d.Document_ID = a.Statement_ID GROUP BY d.Document_Type_Name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type_Name",
      "y_name": "Total_Expenses",
      "x_data": [
        "CV",
        "BK"
      ],
      "y_data": [
        9921.043,
        6035.84
      ],
      "classify": [],
      "describe": "Total expenses grouped by document type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total expense for each document type?",
      "How do the expenses for each document type compare over different budget types?",
      "What is the distribution of expenses for government budget type across document types?",
      "How do expenses for each document type vary across different projects?"
    ],
    "irrelevant_tables": [
      "Projects",
      "Ref_Budget_Codes",
      "Documents_with_Expenses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2010@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Policy_Type_Code, s.Amount_Settled, YEAR(s.Date_Claim_Settled) AS Year_Settled FROM Settlements s JOIN Customer_Policies c ON s.Customer_Policy_ID = c.Policy_ID",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Policy_Type_Code, s.Amount_Settled, YEAR(s.Date_Claim_Settled) AS Year_Settled FROM Settlements s JOIN Customer_Policies c ON s.Customer_Policy_ID = c.Policy_ID"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Year_Settled",
      "y_name": "Amount_Settled",
      "x_data": [
        "2017",
        "2018"
      ],
      "y_data": [
        "1181",
        "1427",
        "1805"
      ],
      "classify": [
        "Policy_Type_Code"
      ],
      "describe": "Total amount settled per year across different policy types",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total amount settled each year for different policy types?",
      "Which policy type had the highest settlement amount in each year?",
      "What trends can be observed in the settlement amounts over the years for each policy type?",
      "How does the amount settled differ among policy types across the years?"
    ],
    "irrelevant_tables": [
      "Claims",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2024@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, SUM(Amount_Settled) AS Total_Settled FROM Customer_Policies cp JOIN Claims c ON cp.Policy_ID = c.Policy_ID GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, SUM(Amount_Settled) AS Total_Settled FROM Customer_Policies cp JOIN Claims c ON cp.Policy_ID = c.Policy_ID GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Total_Settled",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        3274,
        1724
      ],
      "classify": [],
      "describe": "Total settled amount by policy type",
      "sort": "null"
    },
    "nl_queries": [
      "What is the total amount settled for each policy type?",
      "Which policy type has the highest total settled amount?",
      "How does the total settled amount for 'Car' policies compare to 'Life' policies?",
      "What insights can be drawn from the distribution of settled amounts across different policy types?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Settlements",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2030@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code, SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims INNER JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Policy_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code, SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims INNER JOIN Customer_Policies ON Claims.Policy_ID = Customer_Policies.Policy_ID GROUP BY Policy_Type_Code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "Total_Amount_Claimed",
      "x_data": [
        "Car",
        "Life"
      ],
      "y_data": [
        113056,
        79134
      ],
      "classify": [],
      "describe": "Total amount claimed by policy type",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total amount claimed for each policy type?",
      "Which policy type has the highest total amount claimed?",
      "How does the total amount claimed compare between Car and Life policies?",
      "What insights can be derived from the total amount claimed for each policy type?"
    ],
    "irrelevant_tables": [
      "Customers",
      "Settlements",
      "Payments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "709@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name AS County_Name, Population FROM county_public_safety",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name AS County_Name, Population FROM county_public_safety"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "county_public_safety",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County_Name",
      "y_name": "Population",
      "x_data": [
        "Abbotsford",
        "Burnaby",
        "Campbell River"
      ],
      "y_data": [
        128165,
        204320,
        30810
      ],
      "classify": [],
      "describe": "Compare populations of different counties",
      "sort": null
    },
    "nl_queries": [
      "What is the population of each county?",
      "Which county has the highest population?",
      "How does the population vary across counties?",
      "What are the population differences between the counties with the highest and lowest populations?"
    ],
    "irrelevant_tables": [
      "city"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "171@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT year, SUM(w) AS total_wins FROM pitching_postseason GROUP BY year ORDER BY year",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT year, SUM(w) AS total_wins FROM pitching_postseason GROUP BY year ORDER BY year"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "year",
      "y_name": "total_wins",
      "x_data": [
        "1884",
        "1885",
        "1886"
      ],
      "y_data": [
        3,
        3,
        4
      ],
      "classify": [],
      "describe": "Total wins in postseason by year",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total number of wins in the postseason for each year?",
      "Which year had the highest number of wins in the postseason?",
      "How do the total wins in the postseason compare across the years?",
      "What is the trend of total wins in the postseason over the years?"
    ],
    "irrelevant_tables": [
      "hall_of_fame",
      "player_award",
      "appearances",
      "college",
      "team_half",
      "pitching",
      "fielding_postseason",
      "postseason",
      "player_award_vote",
      "manager_award",
      "batting_postseason",
      "player_college",
      "manager_award_vote",
      "team_franchise",
      "player",
      "all_star",
      "manager_half",
      "park",
      "team",
      "fielding_outfield",
      "salary",
      "manager",
      "batting",
      "fielding"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2451@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT grade, COUNT(ID) AS student_count FROM Highschooler GROUP BY grade",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT grade, COUNT(ID) AS student_count FROM Highschooler GROUP BY grade"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "grade",
      "y_name": "student_count",
      "x_data": [
        "9"
      ],
      "y_data": [
        "3"
      ],
      "classify": [],
      "describe": "Number of students in each grade",
      "sort": null
    },
    "nl_queries": [
      "How many students are there in each grade?",
      "What are the names of students in grade 9?",
      "Who are the friends of students in grade 9?",
      "Which students have been liked by other students in grade 9?"
    ],
    "irrelevant_tables": [
      "Likes",
      "Friend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2453@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT grade, COUNT(*) AS student_count FROM Highschooler GROUP BY grade",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT grade, COUNT(*) AS student_count FROM Highschooler GROUP BY grade"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "grade",
      "y_name": "student_count",
      "x_data": [
        "9"
      ],
      "y_data": [
        "3"
      ],
      "classify": [],
      "describe": "Number of students in each grade",
      "sort": null
    },
    "nl_queries": [
      "How many students are there in each grade?",
      "What is the number of students in grade 9?",
      "How does the number of students in grade 9 compare to other grades?",
      "Is there a significant difference in the number of students across different grades?"
    ],
    "irrelevant_tables": [
      "Likes",
      "Friend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2454@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT hs1.name AS student_name, hs2.name AS friend_name, COUNT(liked_id) AS likes_count FROM Friend f JOIN Highschooler hs1 ON f.student_id = hs1.ID JOIN Highschooler hs2 ON f.friend_id = hs2.ID LEFT JOIN Likes l ON f.friend_id = l.student_id GROUP BY hs1.name, hs2.name ORDER BY hs1.name, likes_count DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT hs1.name AS student_name, hs2.name AS friend_name, COUNT(liked_id) AS likes_count FROM Friend f JOIN Highschooler hs1 ON f.student_id = hs1.ID JOIN Highschooler hs2 ON f.friend_id = hs2.ID LEFT JOIN Likes l ON f.friend_id = l.student_id GROUP BY hs1.name, hs2.name ORDER BY hs1.name, likes_count DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "student_name",
      "y_name": "likes_count",
      "x_data": [
        "Jordan",
        "Jordan",
        "Gabriel"
      ],
      "y_data": [
        1,
        0,
        2
      ],
      "classify": [
        "friend_name"
      ],
      "describe": "Number of likes each student’s friends received",
      "sort": "desc"
    },
    "nl_queries": [
      "Which friends did each student have and how many likes did those friends receive?",
      "Among the friends of each student, who received the most likes?",
      "How does the number of likes received by friends compare between different students?",
      "Are there any students whose friends received significantly more likes than others?"
    ],
    "irrelevant_tables": [
      "Likes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2455@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT h.grade, COUNT(f.student_id) AS number_of_friends FROM Friend f JOIN Highschooler h ON f.student_id = h.ID GROUP BY h.grade",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT h.grade, COUNT(f.student_id) AS number_of_friends FROM Friend f JOIN Highschooler h ON f.student_id = h.ID GROUP BY h.grade"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "grade",
      "y_name": "number_of_friends",
      "x_data": [
        "9"
      ],
      "y_data": [
        "3"
      ],
      "classify": [],
      "describe": "Number of friends by grade level",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the number of friends each grade level has?",
      "Which students have the highest number of friends?",
      "Who are the friends of the students from the grade with the highest number of friends?",
      "Which students like each other the most within the grade with the highest number of friends?"
    ],
    "irrelevant_tables": [
      "Likes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2456@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT h1.grade, COUNT(f.friend_id) AS total_friends FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id GROUP BY h1.grade",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT h1.grade, COUNT(f.friend_id) AS total_friends FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id GROUP BY h1.grade"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "grade",
      "y_name": "total_friends",
      "x_data": [
        "9"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of friends per grade",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total number of friends per grade?",
      "Who are the most popular students in grade 9?",
      "How many likes do the most popular students in grade 9 receive?",
      "What is the relationship between friendships and likes received by students in grade 9?"
    ],
    "irrelevant_tables": [
      "Likes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "486@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT c.Country, m.Country AS Mountain_Country, SUM(c.Points) AS Total_Points FROM climber c JOIN mountain m ON c.Mountain_ID = m.Mountain_ID GROUP BY c.Country, m.Country",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT c.Country, m.Country AS Mountain_Country, SUM(c.Points) AS Total_Points FROM climber c JOIN mountain m ON c.Mountain_ID = m.Mountain_ID GROUP BY c.Country, m.Country"
    },
    "reasoning_level": "L4",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "climbing",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Country",
      "y_name": "Total_Points",
      "x_data": [
        "West Germany"
      ],
      "y_data": [
        37.0
      ],
      "classify": [
        "Mountain_Country"
      ],
      "describe": "Total points of climbers grouped by their country and the country of the mountains they climbed",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of points accumulated by climbers from each country?",
      "How do the total points differ when grouped by both climbers' country and the country of the mountains?",
      "Which country of the climbers has the highest total points, and which mountain country contributes most to these points?",
      "Can you display the data using a stacked bar chart to show the total points for each climber's country, further classified by the country of the mountains?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "490@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT climber.Country, mountain.Name AS Mountain_Name, SUM(climber.Points) AS Total_Points FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID GROUP BY climber.Country, mountain.Name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT climber.Country, mountain.Name AS Mountain_Name, SUM(climber.Points) AS Total_Points FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID GROUP BY climber.Country, mountain.Name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "climbing",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Country",
      "y_name": "Total_Points",
      "x_data": [
        "West Germany"
      ],
      "y_data": [
        25.0
      ],
      "classify": [
        "Mountain_Name"
      ],
      "describe": "Total Points scored by climbers from each country, broken down by mountain",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the total points scored by climbers from each country, broken down by mountain?",
      "What is the distribution of climbing points among different mountains for each country?",
      "Which country has the highest total points, and which mountains contributed the most to this total?",
      "How do the points scored by climbers from West Germany compare across different mountains?"
    ],
    "irrelevant_tables": [
      "climber"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2904@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.Nationality, r.Result, COUNT(r.ID) AS Count FROM record r JOIN swimmer s ON r.Swimmer_ID = s.ID GROUP BY s.Nationality, r.Result",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.Nationality, r.Result, COUNT(r.ID) AS Count FROM record r JOIN swimmer s ON r.Swimmer_ID = s.ID GROUP BY s.Nationality, r.Result"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "stacked_bar",
      "x_name": "Nationality",
      "y_name": "Count",
      "x_data": [
        "Poland",
        "Australia",
        "Italy"
      ],
      "y_data": [
        2,
        1,
        1
      ],
      "classify": [
        "Result"
      ],
      "describe": "Distribution of results by swimmer nationality",
      "sort": null
    },
    "nl_queries": [
      "What is the distribution of results (Win, Loss, NC) for each swimmer's nationality?",
      "How do the total counts of results compare across different nationalities?",
      "Which nationality has the highest number of wins?",
      "How does the distribution of results change if we consider only specific events?"
    ],
    "irrelevant_tables": [
      "stadium",
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3014@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT t.date_of_transaction, SUM(t.amount_of_transaction) AS total_amount FROM Transactions AS t GROUP BY t.date_of_transaction ORDER BY t.date_of_transaction",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT t.date_of_transaction, SUM(t.amount_of_transaction) AS total_amount FROM Transactions AS t GROUP BY t.date_of_transaction ORDER BY t.date_of_transaction"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_transaction",
      "y_name": "total_amount",
      "x_data": [
        "1979-04-27",
        "1982-06-06",
        "1988-09-16"
      ],
      "y_data": [
        48777.969,
        27.257,
        302507.6996
      ],
      "classify": [],
      "describe": "Total amount of transactions over time",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total transaction amount over time?",
      "How does the total transaction amount compare between Purchase and Sale transactions over time?",
      "What are the total transaction amounts for each investor over time?",
      "How do the total transaction amounts for each investor compare between Purchase and Sale transactions over time?"
    ],
    "irrelevant_tables": [
      "Investors",
      "Transactions_Lots",
      "Purchases",
      "Lots",
      "Ref_Transaction_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3022@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT t.date_of_transaction, r.transaction_type_description, SUM(t.amount_of_transaction) AS total_amount FROM Transactions t JOIN Ref_Transaction_Types r ON t.transaction_type_code = r.transaction_type_code GROUP BY t.date_of_transaction, r.transaction_type_description ORDER BY t.date_of_transaction",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT t.date_of_transaction, r.transaction_type_description, SUM(t.amount_of_transaction) AS total_amount FROM Transactions t JOIN Ref_Transaction_Types r ON t.transaction_type_code = r.transaction_type_code GROUP BY t.date_of_transaction, r.transaction_type_description ORDER BY t.date_of_transaction"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "date_of_transaction",
      "y_name": "total_amount",
      "x_data": [
        "1979-04-27",
        "1982-06-06",
        "1988-09-16"
      ],
      "y_data": [
        48777.969,
        27.257,
        302507.6996
      ],
      "classify": [
        "transaction_type_description"
      ],
      "describe": "The total transaction amount over time, categorized by transaction type",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total amount of transactions over time, categorized by transaction type?",
      "How does the total amount of sales compare to purchases over time?",
      "What are the trends in transaction amounts over different years for sales and purchases?",
      "Can we identify any significant spikes in transaction amounts for either sales or purchases over the years?"
    ],
    "irrelevant_tables": [
      "Investors",
      "Transactions_Lots",
      "Sales",
      "Lots",
      "Ref_Transaction_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1462@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Major, COUNT(p.GameID) AS Games_Played FROM Student s INNER JOIN Plays_Games p ON s.StuID = p.StuID GROUP BY s.Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Major, COUNT(p.GameID) AS Games_Played FROM Student s INNER JOIN Plays_Games p ON s.StuID = p.StuID GROUP BY s.Major"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "game_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "Games_Played",
      "x_data": [
        "600"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Count of games played by students grouped by their major",
      "sort": null
    },
    "nl_queries": [
      "How many games are played by students from each major?",
      "What is the total number of hours played by students from each major?",
      "How many games are played by students from each major and what are the respective game types?",
      "Which major has students that spend the most hours playing games and participating in sports?"
    ],
    "irrelevant_tables": [
      "SportsInfo",
      "Video_Games"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1470@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT S.Fname, S.LName, SUM(PG.Hours_Played) AS Total_Hours_Played FROM Student S JOIN Plays_Games PG ON S.StuID = PG.StuID GROUP BY S.Fname, S.LName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT S.Fname, S.LName, SUM(PG.Hours_Played) AS Total_Hours_Played FROM Student S JOIN Plays_Games PG ON S.StuID = PG.StuID GROUP BY S.Fname, S.LName"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "game_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Fname",
      "y_name": "Total_Hours_Played",
      "x_data": [
        "Linda",
        "Linda"
      ],
      "y_data": [
        51,
        1
      ],
      "classify": [],
      "describe": "Total hours played by each student",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of hours played by each student?",
      "How does the total hours played differ among students with different majors?",
      "Are there any correlations between the hours spent playing games and the hours spent on sports?",
      "How does the total hours played by students on scholarship compare to those not on scholarship?"
    ],
    "irrelevant_tables": [
      "Video_Games"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "857@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, COUNT(b.Booking_ID) AS Total_Bookings FROM Stores s JOIN Bookings b ON s.Store_ID = b.Store_ID GROUP BY s.Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Store_Name, COUNT(b.Booking_ID) AS Total_Bookings FROM Stores s JOIN Bookings b ON s.Store_ID = b.Store_ID GROUP BY s.Store_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Total_Bookings",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of bookings per store",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of bookings per store?",
      "Which store has the highest number of bookings?",
      "What is the distribution of booking status across different stores?",
      "How does the number of bookings per store change over time?"
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Services",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "863@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Workshop_Group_ID, COUNT(Booking_ID) AS Booking_Count FROM Bookings GROUP BY Workshop_Group_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Workshop_Group_ID, COUNT(Booking_ID) AS Booking_Count FROM Bookings GROUP BY Workshop_Group_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Workshop_Group_ID",
      "y_name": "Booking_Count",
      "x_data": [
        "140",
        "838",
        "176"
      ],
      "y_data": [
        "1",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Number of bookings for each workshop group",
      "sort": "asc"
    },
    "nl_queries": [
      "How many bookings are there for each workshop group?",
      "Which workshop group has the highest number of bookings?",
      "What is the distribution of bookings across different workshop groups?",
      "Are there any workshop groups with significantly more bookings compared to others?"
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Services",
      "Drama_Workshop_Groups",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Stores",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "872@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, COUNT(b.Booking_ID) AS Total_Bookings FROM Stores s JOIN Bookings b ON s.Store_ID = b.Store_ID GROUP BY s.Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Store_Name, COUNT(b.Booking_ID) AS Total_Bookings FROM Stores s JOIN Bookings b ON s.Store_ID = b.Store_ID GROUP BY s.Store_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Total_Bookings",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of bookings per store",
      "sort": "asc"
    },
    "nl_queries": [
      "How many bookings are there for each store?",
      "Which store has the highest number of bookings?",
      "What is the trend of bookings across different stores?",
      "Are there any stores with no bookings?"
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Services",
      "Drama_Workshop_Groups",
      "Products",
      "Bookings_Services",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "882@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Store_Name, COUNT(Order_ID) AS NumberOfOrders FROM Stores s JOIN Customer_Orders o ON s.Store_ID = o.Store_ID GROUP BY s.Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Store_Name, COUNT(Order_ID) AS NumberOfOrders FROM Stores s JOIN Customer_Orders o ON s.Store_ID = o.Store_ID GROUP BY s.Store_Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "NumberOfOrders",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        1,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of orders per store",
      "sort": "desc"
    },
    "nl_queries": [
      "How many orders were placed at each store?",
      "Which store has the highest number of orders?",
      "What is the average number of orders per store?",
      "Which store has the lowest number of orders?"
    ],
    "irrelevant_tables": [
      "Ref_Service_Types",
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Bookings",
      "Bookings_Services",
      "Customers",
      "Services",
      "Products",
      "Invoices",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "884@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Store_Name, COUNT(b.Booking_ID) AS Booking_Count FROM Bookings b JOIN Stores s ON b.Store_ID = s.Store_ID GROUP BY s.Store_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Store_Name, COUNT(b.Booking_ID) AS Booking_Count FROM Bookings b JOIN Stores s ON b.Store_ID = s.Store_ID GROUP BY s.Store_Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Store_Name",
      "y_name": "Booking_Count",
      "x_data": [
        "FJA Filming",
        "Rob Dinning",
        "Adan Dinning"
      ],
      "y_data": [
        3,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of bookings per store",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the number of bookings per store?",
      "Which store has the highest number of bookings?",
      "What is the booking count trend across different stores?",
      "How does the booking distribution compare among the top stores?"
    ],
    "irrelevant_tables": [
      "Ref_Payment_Methods",
      "Invoice_Items",
      "Marketing_Regions",
      "Performers_in_Bookings",
      "Customer_Orders",
      "Addresses",
      "Customers",
      "Drama_Workshop_Groups",
      "Products",
      "Invoices",
      "Bookings_Services",
      "Order_Items",
      "Clients",
      "Performers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1302@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT County_name AS County, SUM(Population) AS Population FROM county GROUP BY County_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT County_name AS County, SUM(Population) AS Population FROM county GROUP BY County_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County",
      "y_name": "Population",
      "x_data": [
        "Howard",
        "Baltimore County",
        "Colony"
      ],
      "y_data": [
        21000,
        90000,
        79000
      ],
      "classify": [],
      "describe": "Population distribution across counties",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the population distribution across different counties?",
      "Which county has the highest population?",
      "What is the total population represented in the election database?",
      "How does the population distribution affect the representation in the election?"
    ],
    "irrelevant_tables": [
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1304@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.County_name, COUNT(e.Delegate) AS Delegate_Count FROM election e JOIN county c ON e.Counties_Represented = c.County_Id GROUP BY c.County_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.County_name, COUNT(e.Delegate) AS Delegate_Count FROM election e JOIN county c ON e.Counties_Represented = c.County_Id GROUP BY c.County_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County_name",
      "y_name": "Delegate_Count",
      "x_data": [
        "Howard",
        "Baltimore County",
        "Colony"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of delegates per county",
      "sort": "asc"
    },
    "nl_queries": [
      "How many delegates represent each county?",
      "Which counties have the highest and lowest number of delegates?",
      "What is the distribution of delegates across counties?",
      "Are there any counties with the same number of delegates?"
    ],
    "irrelevant_tables": [
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1315@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.Delegate, c.County_name, SUM(c.Population) AS Total_Population FROM election e JOIN county c ON e.Counties_Represented LIKE CONCAT('%', c.County_name, '%') GROUP BY e.Delegate, c.County_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.Delegate, c.County_name, SUM(c.Population) AS Total_Population FROM election e JOIN county c ON e.Counties_Represented LIKE CONCAT('%', c.County_name, '%') GROUP BY e.Delegate, c.County_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Delegate",
      "y_name": "Total_Population",
      "x_data": [
        "Gail H. Bates",
        "Warren E. Miller",
        "Steven J. DeBoy, Sr."
      ],
      "y_data": [
        21000,
        21000,
        90000
      ],
      "classify": [],
      "describe": "Sum of population represented by each delegate across counties",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total population represented by each delegate?",
      "Which delegate represents the highest population?",
      "How does the population distribution differ between delegates in the same county?",
      "Compare the population represented by delegates in different counties."
    ],
    "irrelevant_tables": [
      "party"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1320@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Committee, COUNT(*) AS Delegate_Count FROM election GROUP BY Committee ORDER BY Delegate_Count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Committee, COUNT(*) AS Delegate_Count FROM election GROUP BY Committee ORDER BY Delegate_Count DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Committee",
      "y_name": "Delegate_Count",
      "x_data": [
        "Appropriations",
        "Economic Matters"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of Delegates per Committee",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the committees with the highest number of delegates?",
      "Which counties are represented by the delegates in the Appropriations committee?",
      "How many delegates from each party are in the Appropriations committee?",
      "What is the first elected year of delegates in the Appropriations committee from the Democratic party?"
    ],
    "irrelevant_tables": [
      "party",
      "county"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1322@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party, COUNT(District) AS Number_of_Districts FROM election GROUP BY Party ORDER BY Number_of_Districts DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party, COUNT(District) AS Number_of_Districts FROM election GROUP BY Party ORDER BY Number_of_Districts DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "Number_of_Districts",
      "x_data": [
        "1",
        "2"
      ],
      "y_data": [
        "2",
        "1"
      ],
      "classify": [],
      "describe": "Number of districts represented by each party",
      "sort": "desc"
    },
    "nl_queries": [
      "How many districts are represented by each party?",
      "Which districts are represented by the party with the most districts?",
      "Who are the delegates representing the party with the most districts?",
      "What committees are the delegates from the party with the most districts serving on?"
    ],
    "irrelevant_tables": [
      "county"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "365@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Publisher, SUM(Price) AS Total_Price FROM publication GROUP BY Publisher",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Publisher, SUM(Price) AS Total_Price FROM publication GROUP BY Publisher"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "book_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Publisher",
      "y_name": "Total_Price",
      "x_data": [
        "Pearson",
        "Thomson Reuters",
        "Wiley"
      ],
      "y_data": [
        15000000.0,
        6000000.0,
        4100000.0
      ],
      "classify": [],
      "describe": "Total price of publications grouped by publisher",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total price of publications grouped by publisher?",
      "How does the number of issues compare across different publishers?",
      "Which publisher has the highest average price per issue?",
      "How does the publication date distribution look like for the top publisher?"
    ],
    "irrelevant_tables": [
      "book"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2823@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, Total FROM club INNER JOIN club_rank ON club.Club_ID = club_rank.Club_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, Total FROM club INNER JOIN club_rank ON club.Club_ID = club_rank.Club_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "Total",
      "x_data": [
        "BK Slide",
        "IFG",
        "AIB"
      ],
      "y_data": [
        31.0,
        21.0,
        13.0
      ],
      "classify": [],
      "describe": "Total medals won by each club",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of medals won by each club?",
      "What is the distribution of gold, silver, and bronze medals for the top-ranked club?",
      "How does the total number of medals vary by region?",
      "How does the performance of clubs started before 2005 compare to those started after?"
    ],
    "irrelevant_tables": [
      "competition_result",
      "competition"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2629@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Institution, COUNT(protein_name) AS protein_count FROM protein JOIN Institution ON protein.Institution_id = Institution.Institution_id GROUP BY Institution",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Institution, COUNT(protein_name) AS protein_count FROM protein JOIN Institution ON protein.Institution_id = Institution.Institution_id GROUP BY Institution"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Institution",
      "y_name": "protein_count",
      "x_data": [
        "Ave Maria University",
        "Dakota State University",
        "Edward Waters College"
      ],
      "y_data": [
        0,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of proteins researched by each institution",
      "sort": "desc"
    },
    "nl_queries": [
      "Which institution has researched the most proteins?",
      "What is the distribution of protein research counts across institutions?",
      "Which institution has researched more proteins, 'Dakota State University' or 'Edward Waters College'?",
      "Compare the protein research counts between 'Ave Maria University' and other institutions."
    ],
    "irrelevant_tables": [
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "26@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank, COUNT(FacID) AS FacultyCount FROM Faculty GROUP BY Rank",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank, COUNT(FacID) AS FacultyCount FROM Faculty GROUP BY Rank"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "FacultyCount",
      "x_data": [
        "Instructor",
        "Professor"
      ],
      "y_data": [
        1,
        2
      ],
      "classify": [],
      "describe": "Number of Faculty members by Rank",
      "sort": null
    },
    "nl_queries": [
      "How many faculty members are there in each rank?",
      "What is the distribution of faculty members by rank?",
      "Which faculty rank has the highest number of members?",
      "Are there any ranks with only one faculty member?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Activity",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "30@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT activity_name, COUNT(*) AS num_students FROM Activity a JOIN Participates_in p ON a.actid = p.actid GROUP BY activity_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT activity_name, COUNT(*) AS num_students FROM Activity a JOIN Participates_in p ON a.actid = p.actid GROUP BY activity_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "activity_name",
      "y_name": "num_students",
      "x_data": [
        "Mountain Climbing",
        "Canoeing"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students participating in each activity",
      "sort": null
    },
    "nl_queries": [
      "How many students participate in each activity?",
      "Which activity has the highest number of student participants?",
      "What is the total number of students participating in all activities?",
      "Are there any activities that have no student participants?"
    ],
    "irrelevant_tables": [
      "Faculty",
      "Student",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "67@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.building_short_name AS building, COUNT(ab.apt_booking_id) AS total_bookings FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY b.building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.building_short_name AS building, COUNT(ab.apt_booking_id) AS total_bookings FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY b.building_short_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "total_bookings",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        2,
        1,
        1
      ],
      "classify": [],
      "describe": "This bar chart shows the total number of bookings for each apartment building.",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of bookings for each apartment building?",
      "Which apartment building has the highest number of bookings?",
      "What is the total number of bookings for each apartment type within each building?",
      "How does the total number of bookings for each apartment type within each building change over time?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "70@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT a.building_id, COUNT(ab.apt_booking_id) AS total_bookings FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY a.building_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT a.building_id, COUNT(ab.apt_booking_id) AS total_bookings FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY a.building_id"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_id",
      "y_name": "total_bookings",
      "x_data": [
        "133",
        "153",
        "191"
      ],
      "y_data": [
        "2",
        "3",
        "1"
      ],
      "classify": [],
      "describe": "This bar chart shows the total number of bookings for each apartment building.",
      "sort": null
    },
    "nl_queries": [
      "How many bookings does each building have?",
      "What is the total number of bookings for each building by apartment type?",
      "Which building has the highest number of bookings for each type of apartment?",
      "What are the booking trends over time for each building?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "84@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT ab.building_short_name, a.apt_type_code, COUNT(ab.apt_booking_id) AS booking_count FROM Apartment_Bookings ab JOIN Apartments a ON ab.apt_id = a.apt_id JOIN Apartment_Buildings abld ON a.building_id = abld.building_id GROUP BY abld.building_short_name, a.apt_type_code ORDER BY abld.building_short_name, a.apt_type_code",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT ab.building_short_name, a.apt_type_code, COUNT(ab.apt_booking_id) AS booking_count FROM Apartment_Bookings ab JOIN Apartments a ON ab.apt_id = a.apt_id JOIN Apartment_Buildings abld ON a.building_id = abld.building_id GROUP BY abld.building_short_name, a.apt_type_code ORDER BY abld.building_short_name, a.apt_type_code"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "building_short_name",
      "y_name": "booking_count",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        20,
        15,
        25
      ],
      "classify": [
        "apt_type_code"
      ],
      "describe": "This visualization shows the count of apartment bookings per building, categorized by apartment type.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total number of bookings for each building, categorized by apartment type?",
      "How do the booking counts compare across different buildings for each apartment type?",
      "Which building has the highest number of bookings for studio apartments?",
      "What is the distribution of apartment types in terms of booking counts across all buildings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "Guests",
      "View_Unit_Status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "87@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_short_name, COUNT(*) AS number_of_bookings FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_short_name, COUNT(*) AS number_of_bookings FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY building_short_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_short_name",
      "y_name": "number_of_bookings",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        1,
        2,
        1
      ],
      "classify": [],
      "describe": "Number of bookings per apartment building",
      "sort": null
    },
    "nl_queries": [
      "What is the number of bookings for each apartment building?",
      "Which apartment building has the highest number of bookings?",
      "How do the number of bookings compare between Normandie Court and Mercedes House?",
      "What is the total number of bookings across all apartment buildings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "88@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_short_name, COUNT(*) AS booking_count FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id WHERE booking_status_code = 'Provisional' GROUP BY building_short_name;",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_short_name, COUNT(*) AS booking_count FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id WHERE booking_status_code = 'Provisional' GROUP BY building_short_name;"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_short_name",
      "y_name": "booking_count",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        10,
        15,
        8
      ],
      "classify": [],
      "describe": "This visualization shows the number of provisional bookings per apartment building.",
      "sort": "desc"
    },
    "nl_queries": [
      "How many provisional bookings are there per apartment building?",
      "Which apartment building has the highest number of provisional bookings?",
      "What is the average number of provisional bookings across all apartment buildings?",
      "How does the number of provisional bookings compare between Normandie Court and Mercedes House?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "89@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT ab.building_short_name AS building, COUNT(abk.apt_booking_id) AS booking_count, g.gender_code AS gender FROM Apartment_Buildings ab JOIN Apartments a ON ab.building_id = a.building_id JOIN Apartment_Bookings abk ON a.apt_id = abk.apt_id JOIN Guests g ON abk.guest_id = g.guest_id GROUP BY ab.building_short_name, g.gender_code ORDER BY ab.building_short_name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT ab.building_short_name AS building, COUNT(abk.apt_booking_id) AS booking_count, g.gender_code AS gender FROM Apartment_Buildings ab JOIN Apartments a ON ab.building_id = a.building_id JOIN Apartment_Bookings abk ON a.apt_id = abk.apt_id JOIN Guests g ON abk.guest_id = g.guest_id GROUP BY ab.building_short_name, g.gender_code ORDER BY ab.building_short_name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Hard",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "building",
      "y_name": "booking_count",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        "[1, 2, 1]",
        "[3, 0, 0]",
        "[1, 0, 0]"
      ],
      "classify": [
        "gender"
      ],
      "describe": "Distribution of apartment bookings per building by gender.",
      "sort": "asc"
    },
    "nl_queries": [
      "How many bookings are there for each building, broken down by gender?",
      "Which building has the highest number of bookings from male guests?",
      "What is the proportion of bookings made by female guests in each building?",
      "How does the number of bookings vary across buildings when considering guests with an unknown gender?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "90@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender_code, COUNT(guest_id) AS guest_count FROM Guests GROUP BY gender_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender_code, COUNT(guest_id) AS guest_count FROM Guests GROUP BY gender_code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender_code",
      "y_name": "guest_count",
      "x_data": [
        "Male",
        "Female",
        "Unknown"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of guests per gender",
      "sort": "asc"
    },
    "nl_queries": [
      "How many guests are there for each gender?",
      "What is the distribution of guests by gender?",
      "Which gender has the highest number of guests?",
      "Is there a significant difference in the number of guests among different genders?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "Apartment_Buildings",
      "View_Unit_Status",
      "Apartments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "91@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.building_short_name AS building, COUNT(ab.apt_booking_id) AS booking_count FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Provisional' GROUP BY b.building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.building_short_name AS building, COUNT(ab.apt_booking_id) AS booking_count FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Provisional' GROUP BY b.building_short_name"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "booking_count",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        5,
        3,
        7
      ],
      "classify": [],
      "describe": "Number of provisional bookings per building",
      "sort": "desc"
    },
    "nl_queries": [
      "How many provisional bookings are there for each building?",
      "Which building has the highest number of provisional bookings?",
      "What is the total number of provisional bookings across all buildings?",
      "How does the number of provisional bookings compare across different buildings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "92@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT A.building_id, B.building_short_name, COUNT(*) AS total_bookings FROM Apartments A JOIN Apartment_Bookings AB ON A.apt_id = AB.apt_id JOIN Apartment_Buildings B ON A.building_id = B.building_id GROUP BY A.building_id, B.building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT A.building_id, B.building_short_name, COUNT(*) AS total_bookings FROM Apartments A JOIN Apartment_Bookings AB ON A.apt_id = AB.apt_id JOIN Apartment_Buildings B ON A.building_id = B.building_id GROUP BY A.building_id, B.building_short_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_short_name",
      "y_name": "total_bookings",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        10,
        15,
        8
      ],
      "classify": [],
      "describe": "Total number of bookings per building",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of bookings for each apartment building?",
      "How does the average booking duration compare across different buildings?",
      "What is the gender distribution of guests in each apartment building?",
      "Which buildings have the highest proportion of provisional bookings?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "99@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_short_name AS building, COUNT(apt_id) AS total_apartments FROM Apartments INNER JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id GROUP BY building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_short_name AS building, COUNT(apt_id) AS total_apartments FROM Apartments INNER JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id GROUP BY building_short_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "total_apartments",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        10,
        15,
        8
      ],
      "classify": [],
      "describe": "Number of apartments available in each building",
      "sort": "asc"
    },
    "nl_queries": [
      "How many apartments are available in each building?",
      "Which building has the highest number of apartments?",
      "What is the total number of apartments in all buildings?",
      "Compare the number of apartments between Normandie Court and The Eugene."
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "100@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT b.building_short_name, COUNT(a.apt_id) AS total_apartments FROM Apartments a JOIN Apartment_Buildings b ON a.building_id = b.building_id GROUP BY b.building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT b.building_short_name, COUNT(a.apt_id) AS total_apartments FROM Apartments a JOIN Apartment_Buildings b ON a.building_id = b.building_id GROUP BY b.building_short_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_short_name",
      "y_name": "total_apartments",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of apartments per building",
      "sort": "asc"
    },
    "nl_queries": [
      "How many apartments are there in each building?",
      "What is the distribution of apartment types (e.g., Studio, Flat) across the buildings?",
      "What is the average number of bathrooms in apartments for each building?",
      "What is the average occupancy duration for apartments in each building?"
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "102@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building_short_name, COUNT(*) AS num_bookings FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY building_short_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building_short_name, COUNT(*) AS num_bookings FROM Apartment_Buildings b JOIN Apartments a ON b.building_id = a.building_id JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id GROUP BY building_short_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building_short_name",
      "y_name": "num_bookings",
      "x_data": [
        "Normandie Court",
        "Mercedes House",
        "The Eugene"
      ],
      "y_data": [
        15,
        25,
        10
      ],
      "classify": [],
      "describe": "Number of bookings per building",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the number of bookings for each building.",
      "Which building has the highest number of bookings?",
      "What is the distribution of bookings among the buildings?",
      "Identify the building with the least number of bookings."
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "View_Unit_Status",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1521@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT P.Name AS Gymnast, G.Floor_Exercise_Points FROM people P INNER JOIN gymnast G ON P.People_ID = G.Gymnast_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT P.Name AS Gymnast, G.Floor_Exercise_Points FROM people P INNER JOIN gymnast G ON P.People_ID = G.Gymnast_ID"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "gymnast",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Gymnast",
      "y_name": "Floor_Exercise_Points",
      "x_data": [
        "Paul Hamm",
        "Lorraine Súarez Carmona",
        "Ashley Pérez Cabrera"
      ],
      "y_data": [
        9.725,
        9.7,
        8.987
      ],
      "classify": [],
      "describe": "Comparison of Floor Exercise Points among gymnasts",
      "sort": null
    },
    "nl_queries": [
      "What are the Floor Exercise Points for each gymnast?",
      "How do the Pommel Horse Points compare among the gymnasts?",
      "What are the average points for each gymnast across all events?",
      "Which gymnast has the highest total points and how do their scores compare across events?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2855@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT g.name AS genre, COUNT(t.id) AS number_of_tracks FROM genres g JOIN tracks t ON g.id = t.genre_id GROUP BY g.name ORDER BY number_of_tracks DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT g.name AS genre, COUNT(t.id) AS number_of_tracks FROM genres g JOIN tracks t ON g.id = t.genre_id GROUP BY g.name ORDER BY number_of_tracks DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "genre",
      "y_name": "number_of_tracks",
      "x_data": [
        "Rock",
        "Jazz",
        "Metal"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of tracks for each genre",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the distribution of tracks across different genres?",
      "Which genre has the highest number of tracks?",
      "How does the number of tracks in the top genre compare to the others?",
      "Can we visualize the distribution of tracks for each genre by album?"
    ],
    "irrelevant_tables": [
      "albums",
      "invoice_lines",
      "invoices",
      "employees",
      "customers",
      "playlists",
      "playlist_tracks",
      "media_types",
      "sqlite_sequence",
      "artists"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1329@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT shop.District, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.District",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT shop.District, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.District"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "bar",
      "x_name": "District",
      "y_name": "Number_of_Employees",
      "x_data": [
        "Tehtaan kenttä",
        "Finnair Stadium",
        "Tapiolan Urheilupuisto"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of employees hired in each district",
      "sort": null
    },
    "nl_queries": [
      "How many employees are hired in each district?",
      "Which district has the highest number of employees hired?",
      "What is the total number of employees hired per shop?",
      "Which shops have the highest average number of employees?"
    ],
    "irrelevant_tables": [
      "evaluation",
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1335@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.District, e.City, COUNT(h.Employee_ID) AS Employee_Count FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID GROUP BY s.District, e.City",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.District, e.City, COUNT(h.Employee_ID) AS Employee_Count FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID GROUP BY s.District, e.City"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "District",
      "y_name": "Employee_Count",
      "x_data": [
        "Tehtaan kenttä",
        "Finnair Stadium",
        "Tapiolan Urheilupuisto"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [
        "City"
      ],
      "describe": "Number of employees working in each district, categorized by their cities.",
      "sort": "asc"
    },
    "nl_queries": [
      "How many employees are working in each district and what are their cities?",
      "Which city has the highest number of employees in each district?",
      "How does the distribution of employees by city compare across different districts?",
      "Are there any districts with a high concentration of employees from certain cities?"
    ],
    "irrelevant_tables": [
      "evaluation"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1349@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT shop.Name AS Shop_Name, AVG(evaluation.Bonus) AS Average_Bonus FROM hiring INNER JOIN shop ON hiring.Shop_ID = shop.Shop_ID INNER JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID GROUP BY shop.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT shop.Name AS Shop_Name, AVG(evaluation.Bonus) AS Average_Bonus FROM hiring INNER JOIN shop ON hiring.Shop_ID = shop.Shop_ID INNER JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID GROUP BY shop.Name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Shop_Name",
      "y_name": "Average_Bonus",
      "x_data": [
        "FC Haka",
        "HJK"
      ],
      "y_data": [
        2950.0,
        3200.0
      ],
      "classify": [],
      "describe": "Average bonus awarded to employees per shop",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average bonus awarded to employees per shop?",
      "How does the average bonus compare between shops?",
      "Which shop has the highest average employee bonus?",
      "Can we see the distribution of bonuses within each shop?"
    ],
    "irrelevant_tables": [
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1356@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT shop.Location, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Location",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT shop.Location, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Location"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "Number_of_Employees",
      "x_data": [
        "Valkeakoski",
        "Helsinki"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of employees hired in each shop location",
      "sort": null
    },
    "nl_queries": [
      "How many employees are hired in each shop location?",
      "Which shop location has the highest number of employees hired?",
      "What is the average number of employees hired per location?",
      "How does the number of employees hired in each location compare over the years?"
    ],
    "irrelevant_tables": [
      "evaluation",
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "545@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_PROFESSORS",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of professors in each department",
      "sort": null
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "Which department has the highest number of professors?",
      "What is the distribution of the highest degrees among professors in each department?",
      "How many professors have a Ph.D. in each department?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "ENROLL",
      "COURSE",
      "DEPARTMENT",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "548@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_PROFESSORS",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of professors in each department",
      "sort": null
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "Which department has the highest number of professors?",
      "What is the distribution of professors' highest degrees across departments?",
      "Which department has the highest number of professors with a Ph.D.?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "ENROLL",
      "COURSE",
      "DEPARTMENT",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "550@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(*) AS TOTAL_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(*) AS TOTAL_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "TOTAL_PROFESSORS",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of Professors per Department",
      "sort": null
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "What is the total number of professors in departments with more than one professor?",
      "What is the highest degree held by professors in the Accounting department?",
      "Which Accounting professors hold a Ph.D. degree?"
    ],
    "irrelevant_tables": [
      "ENROLL",
      "EMPLOYEE",
      "DEPARTMENT",
      "COURSE",
      "CLASS",
      "STUDENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "552@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(*) AS PROF_COUNT FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(*) AS PROF_COUNT FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "PROF_COUNT",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of professors in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "What is the highest degree held by professors in each department?",
      "How many professors in each department hold a Ph.D.?",
      "What is the distribution of professor offices by department?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "ENROLL",
      "COURSE",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "553@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(*) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(*) AS NUM_PROFESSORS FROM PROFESSOR GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_PROFESSORS",
      "x_data": [
        "HIST",
        "ENG",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of Professors in Each Department",
      "sort": null
    },
    "nl_queries": [
      "How many professors are in each department?",
      "Which department has the highest number of professors?",
      "What is the distribution of professors across departments?",
      "Are there any departments with the same number of professors?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "EMPLOYEE",
      "ENROLL",
      "COURSE",
      "DEPARTMENT",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "555@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(DISTINCT CLASS_CODE) AS CLASS_COUNT FROM CLASS GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(DISTINCT CLASS_CODE) AS CLASS_COUNT FROM CLASS GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "CLASS_COUNT",
      "x_data": [
        "ACCT",
        "CIS"
      ],
      "y_data": [
        3,
        1
      ],
      "classify": [],
      "describe": "Number of classes offered by each department",
      "sort": "asc"
    },
    "nl_queries": [
      "How many classes does each department offer?",
      "Which professors are teaching these classes in each department?",
      "What is the distribution of student grades in classes offered by each department?",
      "How do student grades vary by professor within each department?"
    ],
    "irrelevant_tables": [
      "STUDENT",
      "EMPLOYEE",
      "ENROLL",
      "PROFESSOR",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "558@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT EMP_NUM, COUNT(CLASS_CODE) AS CLASSES_TAUGHT FROM CLASS GROUP BY EMP_NUM",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT EMP_NUM, COUNT(CLASS_CODE) AS CLASSES_TAUGHT FROM CLASS GROUP BY EMP_NUM"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "EMP_NUM",
      "y_name": "CLASSES_TAUGHT",
      "x_data": [
        "105",
        "342"
      ],
      "y_data": [
        "2",
        "1"
      ],
      "classify": [],
      "describe": "Number of classes taught by each professor",
      "sort": "asc"
    },
    "nl_queries": [
      "How many classes does each professor teach?",
      "What are the names of the professors along with the number of classes they teach?",
      "Which professor teaches the highest number of classes and what is their department?",
      "Show the contact details (office and extension) for professors who teach more than one class."
    ],
    "irrelevant_tables": [
      "STUDENT",
      "ENROLL",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "564@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT STU_CLASS, COUNT(STU_NUM) AS NUM_OF_STUDENTS FROM STUDENT GROUP BY STU_CLASS ORDER BY NUM_OF_STUDENTS DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT STU_CLASS, COUNT(STU_NUM) AS NUM_OF_STUDENTS FROM STUDENT GROUP BY STU_CLASS ORDER BY NUM_OF_STUDENTS DESC"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "STU_CLASS",
      "y_name": "NUM_OF_STUDENTS",
      "x_data": [
        "So",
        "Jr"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Number of students in each class",
      "sort": "desc"
    },
    "nl_queries": [
      "How many students are there in each class?",
      "Which departments have the highest number of students?",
      "What is the distribution of students' GPA across different departments?",
      "How does the number of students in each class correlate with the average GPA in each department?"
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "ENROLL",
      "PROFESSOR",
      "COURSE",
      "DEPARTMENT",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "578@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(*) AS NUM_STUDENTS FROM STUDENT GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(*) AS NUM_STUDENTS FROM STUDENT GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "NUM_STUDENTS",
      "x_data": [
        "BIOL",
        "CIS",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students in each department",
      "sort": "asc"
    },
    "nl_queries": [
      "Show the number of students in each department",
      "Show the GPA of students in each department",
      "Show the average GPA of students in each department",
      "Show the distribution of student grades in each course"
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "PROFESSOR",
      "COURSE",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "580@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE, COUNT(STU_NUM) AS STUDENT_COUNT FROM STUDENT GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE, COUNT(STU_NUM) AS STUDENT_COUNT FROM STUDENT GROUP BY DEPT_CODE"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "STUDENT_COUNT",
      "x_data": [
        "BIOL",
        "CIS",
        "ACCT"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of Students per Department",
      "sort": null
    },
    "nl_queries": [
      "What is the number of students enrolled in each department?",
      "Which professors teach the classes with the highest number of students?",
      "What is the distribution of grades across different classes?",
      "How does the GPA distribution compare across different departments?"
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "ENROLL",
      "PROFESSOR",
      "COURSE",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "586@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR CHART",
      "data_part": {
        "sql_part": "SELECT DEPT_NAME, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM DEPARTMENT GROUP BY DEPT_NAME ORDER BY NUM_PROFESSORS DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR CHART SELECT DEPT_NAME, COUNT(EMP_NUM) AS NUM_PROFESSORS FROM DEPARTMENT GROUP BY DEPT_NAME ORDER BY NUM_PROFESSORS DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR CHART",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_NAME",
      "y_name": "NUM_PROFESSORS",
      "x_data": [
        "Accounting",
        "Fine Arts",
        "Biology"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of professors in each department",
      "sort": "desc"
    },
    "nl_queries": [
      "How many professors are there in each department?",
      "Which department has the highest number of professors?",
      "Can you show the number of professors for each department in a bar chart?",
      "Order the departments by the number of professors in descending order."
    ],
    "irrelevant_tables": [
      "STUDENT",
      "EMPLOYEE",
      "ENROLL",
      "PROFESSOR",
      "CLASS",
      "COURSE"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2156@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT source_system_code, COUNT(*) AS count FROM CMI_Cross_References GROUP BY source_system_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT source_system_code, COUNT(*) AS count FROM CMI_Cross_References GROUP BY source_system_code"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "local_govt_mdm",
    "vis_obj": {
      "chart": "bar",
      "x_name": "source_system_code",
      "y_name": "count",
      "x_data": [
        "Rent",
        "Parking"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of entries per source system code in the CMI_Cross_References table",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the count of entries per source system code in the CMI_Cross_References table?",
      "How does the count of entries in the 'Rent' system compare to those in 'Parking'?",
      "What are the details of entries in the 'Rent' system?",
      "How many unique master customers are associated with each source system code?"
    ],
    "irrelevant_tables": [
      "Electoral_Register",
      "Rent_Arrears",
      "Business_Rates",
      "Council_Tax",
      "Parking_Fines",
      "Benefits_Overpayments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "686@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, Sales_billion FROM Companies",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, Sales_billion FROM Companies"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "company_office",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "Sales_billion",
      "x_data": [
        "JPMorgan Chase",
        "HSBC",
        "General Electric"
      ],
      "y_data": [
        115.5,
        103.3,
        156.2
      ],
      "classify": [],
      "describe": "Sales in billion dollars for each company",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the sales figures for each company?",
      "Which company has the highest sales?",
      "How do the sales figures compare among the companies?",
      "What is the difference in sales between the company with the highest sales and the one with the lowest?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1237@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender, COUNT(*) AS student_count FROM Dorm GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender, COUNT(*) AS student_count FROM Dorm GROUP BY gender"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "student_count",
      "x_data": [
        "X",
        "M"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "This chart shows the number of dormitories categorized by gender.",
      "sort": null
    },
    "nl_queries": [
      "How many dormitories are there for each gender?",
      "What is the total student capacity for each gender?",
      "How many students are currently living in each gender-specific dormitory?",
      "What is the average age of students living in each gender-specific dormitory?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1238@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Dorm.dorm_name, COUNT(Student.StuID) AS num_students FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID GROUP BY Dorm.dorm_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Dorm.dorm_name, COUNT(Student.StuID) AS num_students FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID GROUP BY Dorm.dorm_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dorm_name",
      "y_name": "num_students",
      "x_data": [
        "Smith Hall",
        "Bud Jones Hall",
        "Fawlty Towers"
      ],
      "y_data": [
        2,
        0,
        0
      ],
      "classify": [],
      "describe": "Number of students per dorm",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students live in each dorm?",
      "Which dorms have the highest and lowest number of students?",
      "What is the student distribution among different dorms?",
      "Which dorm has the maximum capacity but fewer students?"
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2610@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.good_or_bad_customer AS customer_type, COUNT(b.booking_id) AS total_bookings, SUM(b.amount_payable) AS total_revenue FROM Customers c INNER JOIN Bookings b ON c.customer_id = b.customer_id GROUP BY c.good_or_bad_customer ORDER BY total_revenue DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.good_or_bad_customer AS customer_type, COUNT(b.booking_id) AS total_bookings, SUM(b.amount_payable) AS total_revenue FROM Customers c INNER JOIN Bookings b ON c.customer_id = b.customer_id GROUP BY c.good_or_bad_customer ORDER BY total_revenue DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "products_for_hire",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_type",
      "y_name": "total_revenue",
      "x_data": [
        "good",
        "bad"
      ],
      "y_data": [
        952.63,
        0.0
      ],
      "classify": [],
      "describe": "Total revenue generated by good and bad customers",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total revenue generated by good and bad customers?",
      "How many bookings were made by good and bad customers?",
      "What is the average revenue per booking for good and bad customers?",
      "Is there a difference in the number of bookings returned damaged between good and bad customers?"
    ],
    "irrelevant_tables": [
      "View_Product_Availability",
      "Payments",
      "Products_for_Hire",
      "Products_Booked",
      "Discount_Coupons"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2614@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT good_or_bad_customer, COUNT(customer_id) AS customer_count FROM Customers GROUP BY good_or_bad_customer",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT good_or_bad_customer, COUNT(customer_id) AS customer_count FROM Customers GROUP BY good_or_bad_customer"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "products_for_hire",
    "vis_obj": {
      "chart": "bar",
      "x_name": "good_or_bad_customer",
      "y_name": "customer_count",
      "x_data": [
        "good",
        "bad"
      ],
      "y_data": [
        3,
        0
      ],
      "classify": [],
      "describe": "Count of customers classified as good or bad",
      "sort": "null"
    },
    "nl_queries": [
      "How many customers are classified as good or bad?",
      "What is the total amount of discount given to good customers?",
      "How many products were booked by good customers?",
      "What is the average amount payable by good customers?"
    ],
    "irrelevant_tables": [
      "View_Product_Availability",
      "Payments",
      "Products_for_Hire",
      "Products_Booked",
      "Discount_Coupons"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2771@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Total_Sales",
      "x_data": [
        "Liliane Bettencourt",
        "Christy Walton",
        "Alice Walton"
      ],
      "y_data": [
        1646407.0,
        351421.0,
        0.0
      ],
      "classify": [],
      "describe": "Total sales of songs for each singer",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total sales of songs for each singer?",
      "Which singer has the highest total song sales?",
      "Compare the total song sales between singers from the United States and France.",
      "How does the singer's net worth correlate with their total song sales?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3124@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT u.Primary_conference, b.Team_Name, AVG(b.All_Games_Percent) AS Avg_All_Games_Percent FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID GROUP BY u.Primary_conference, b.Team_Name ORDER BY u.Primary_conference, Avg_All_Games_Percent DESC",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT u.Primary_conference, b.Team_Name, AVG(b.All_Games_Percent) AS Avg_All_Games_Percent FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID GROUP BY u.Primary_conference, b.Team_Name ORDER BY u.Primary_conference, Avg_All_Games_Percent DESC"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Primary_conference",
      "y_name": "Avg_All_Games_Percent",
      "x_data": [
        "Colonial Athletic Association ( D-I )",
        "Atlantic 10 Conference ( D-I )",
        "MAC Commonwealth Conference ( D-III )"
      ],
      "y_data": [
        0.946,
        0.706,
        0.824
      ],
      "classify": [
        "Team_Name"
      ],
      "describe": "Average winning percentage of all games for each team grouped by primary conference",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average winning percentage of all games for each team grouped by primary conference?",
      "Which team has the highest average winning percentage within each primary conference?",
      "How does the average home game winning percentage compare between teams in different primary conferences?",
      "How does the average road game winning percentage compare between teams in different primary conferences?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3135@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT School, COUNT(Team_ID) AS Num_Teams FROM university JOIN basketball_match ON university.School_ID = basketball_match.School_ID GROUP BY School",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT School, COUNT(Team_ID) AS Num_Teams FROM university JOIN basketball_match ON university.School_ID = basketball_match.School_ID GROUP BY School"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School",
      "y_name": "Num_Teams",
      "x_data": [
        "University of Delaware",
        "Lebanon Valley College",
        "University of Rhode Island"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of teams per school",
      "sort": null
    },
    "nl_queries": [
      "How many basketball teams are there per school?",
      "Which school has the highest number of basketball teams?",
      "What are the names of the schools with the least number of basketball teams?",
      "Show the distribution of basketball teams across schools."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3137@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT School, All_Games_Percent FROM basketball_match JOIN university ON basketball_match.School_ID = university.School_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT School, All_Games_Percent FROM basketball_match JOIN university ON basketball_match.School_ID = university.School_ID"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School",
      "y_name": "All_Games_Percent",
      "x_data": [
        "University of Delaware",
        "Lebanon Valley College",
        "Clemson"
      ],
      "y_data": [
        0.946,
        0.824,
        0.706
      ],
      "classify": [],
      "describe": "Comparing the overall game winning percentages of different schools",
      "sort": "desc"
    },
    "nl_queries": [
      "Which school has the highest overall game winning percentage?",
      "What are the overall game winning percentages for each school?",
      "How does Lebanon Valley College's overall game winning percentage compare to the other schools?",
      "What is the average overall game winning percentage across all schools?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3138@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT u.Primary_conference, b.Team_Name, b.All_Games_Percent FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT u.Primary_conference, b.Team_Name, b.All_Games_Percent FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Primary_conference",
      "y_name": "All_Games_Percent",
      "x_data": [
        "Colonial Athletic Association ( D-I )",
        "MAC Commonwealth Conference ( D-III )",
        "Atlantic 10 Conference ( D-I )"
      ],
      "y_data": [
        0.946,
        0.824,
        0.706
      ],
      "classify": [
        "Team_Name"
      ],
      "describe": "Compare the overall game winning percentages of teams from different conferences.",
      "sort": null
    },
    "nl_queries": [
      "What are the overall game winning percentages of teams from different conferences?",
      "How do the home and road game winning percentages compare for teams within the same conference?",
      "Which conference has the highest average overall game winning percentage?",
      "Which team has the highest winning percentage in each conference?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3140@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT School, Enrollment FROM university",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT School, Enrollment FROM university"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School",
      "y_name": "Enrollment",
      "x_data": [
        "University of Delaware",
        "Lebanon Valley College",
        "University of Rhode Island"
      ],
      "y_data": [
        19067,
        2100,
        19095
      ],
      "classify": [],
      "describe": "Showing the enrollment numbers for each university",
      "sort": null
    },
    "nl_queries": [
      "What are the enrollment numbers for each university?",
      "Which university has the highest enrollment?",
      "Compare the enrollment numbers between public and private universities.",
      "How does the enrollment compare between universities founded before and after 1800?"
    ],
    "irrelevant_tables": [
      "basketball_match"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3141@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT u.Nickname, bm.Team_Name, bm.All_Games_Percent FROM university u JOIN basketball_match bm ON u.School_ID = bm.School_ID",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT u.Nickname, bm.Team_Name, bm.All_Games_Percent FROM university u JOIN basketball_match bm ON u.School_ID = bm.School_ID"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Nickname",
      "y_name": "All_Games_Percent",
      "x_data": [
        "Fightin' Blue Hens",
        "Flying Dutchmen",
        "Rams"
      ],
      "y_data": [
        0.946,
        0.824,
        0.706
      ],
      "classify": [
        "Team_Name"
      ],
      "describe": "Displaying the win percentage of each team's all games by university nickname",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the win percentage for each team in all games?",
      "How does the win percentage differ among the teams from different universities?",
      "Which university has the highest average win percentage across its teams?",
      "Compare the win percentages of the top three teams in the league."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3144@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT School, All_Games_Percent FROM university u JOIN basketball_match bm ON u.School_ID = bm.School_ID;",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT School, All_Games_Percent FROM university u JOIN basketball_match bm ON u.School_ID = bm.School_ID;"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School",
      "y_name": "All_Games_Percent",
      "x_data": [
        "University of Delaware",
        "Lebanon Valley College",
        "University of Rhode Island"
      ],
      "y_data": [
        0.946,
        0.824,
        0.706
      ],
      "classify": [],
      "describe": "Comparison of All Games Winning Percentage across different Schools",
      "sort": "desc"
    },
    "nl_queries": [
      "What are the winning percentages for all games for the different schools?",
      "Which school has the highest winning percentage?",
      "How do the winning percentages compare across the schools?",
      "Can you rank the schools by their winning percentages in all games?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3146@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT School, SUM(All_Games) AS Total_Games FROM basketball_match JOIN university ON basketball_match.School_ID = university.School_ID GROUP BY School",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT School, SUM(All_Games) AS Total_Games FROM basketball_match JOIN university ON basketball_match.School_ID = university.School_ID GROUP BY School"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "School",
      "y_name": "Total_Games",
      "x_data": [
        "University of Delaware",
        "Lebanon Valley College",
        "University of Rhode Island"
      ],
      "y_data": [
        35,
        28,
        24
      ],
      "classify": [],
      "describe": "Total number of games played by each school's basketball team",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of games played by each school's basketball team?",
      "Which school has the highest number of total games played?",
      "How does the performance of each school's basketball team compare in terms of total games played?",
      "Can you show the schools with their total games played sorted in descending order?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2349@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT m.name AS mountain_name, COUNT(p.id) AS photo_count FROM photos p JOIN mountain m ON p.mountain_id = m.id GROUP BY m.name ORDER BY photo_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT m.name AS mountain_name, COUNT(p.id) AS photo_count FROM photos p JOIN mountain m ON p.mountain_id = m.id GROUP BY m.name ORDER BY photo_count DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "mountain_photos",
    "vis_obj": {
      "chart": "bar",
      "x_name": "mountain_name",
      "y_name": "photo_count",
      "x_data": [
        "Ioll / Yoll",
        "Abune Yosef / Guliba Amba"
      ],
      "y_data": [
        1,
        1
      ],
      "classify": [],
      "describe": "Count of photos for each mountain",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the count of photos taken for each mountain?",
      "What are the most popular mountains based on the number of photos taken?",
      "Which camera lenses were used to take photos of the most popular mountains?",
      "What is the distribution of camera lenses used for the photos of the top three most popular mountains?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1989@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Customer_name, COUNT(p.Policy_ID) AS Number_of_Policies FROM Customers c JOIN Customers_Policies p ON c.Customer_ID = p.Customer_ID GROUP BY c.Customer_name ORDER BY Number_of_Policies DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Customer_name, COUNT(p.Policy_ID) AS Number_of_Policies FROM Customers c JOIN Customers_Policies p ON c.Customer_ID = p.Customer_ID GROUP BY c.Customer_name ORDER BY Number_of_Policies DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "insurance_fnol",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Customer_name",
      "y_name": "Number_of_Policies",
      "x_data": [
        "Ellsworth Paucek",
        "Mrs. Hanna Willms",
        "America Jaskolski"
      ],
      "y_data": [
        "2",
        "1",
        "0"
      ],
      "classify": [],
      "describe": "Number of policies held by each customer",
      "sort": "desc"
    },
    "nl_queries": [
      "How many policies does each customer hold?",
      "Which customer holds the most policies?",
      "What is the distribution of policies among customers?",
      "Are there any customers with no policies?"
    ],
    "irrelevant_tables": [
      "Claims",
      "Available_Policies",
      "Settlements",
      "Services",
      "First_Notification_of_Loss"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3033@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Staff.staff_first_name, Staff.staff_last_name, COUNT(Problem_Log.problem_log_id) AS problem_count FROM Problem_Log INNER JOIN Staff ON Problem_Log.assigned_to_staff_id = Staff.staff_id GROUP BY Staff.staff_first_name, Staff.staff_last_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Staff.staff_first_name, Staff.staff_last_name, COUNT(Problem_Log.problem_log_id) AS problem_count FROM Problem_Log INNER JOIN Staff ON Problem_Log.assigned_to_staff_id = Staff.staff_id GROUP BY Staff.staff_first_name, Staff.staff_last_name"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "tracking_software_problems",
    "vis_obj": {
      "chart": "bar",
      "x_name": "staff_first_name",
      "y_name": "problem_count",
      "x_data": [
        "Lacey",
        "Dameon",
        "Ashley"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Count of problems assigned to each staff member",
      "sort": "desc"
    },
    "nl_queries": [
      "How many problems have been assigned to each staff member?",
      "Which staff member has been assigned the most problems?",
      "What is the distribution of problem categories handled by the staff member with the most problems?",
      "How many problems in each category have been solved by the staff member with the most problems?"
    ],
    "irrelevant_tables": [
      "Problems",
      "Problem_Category_Codes",
      "Problem_Status_Codes",
      "Product"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "128@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT fault_status, COUNT(*) AS visit_count FROM Engineer_Visits GROUP BY fault_status",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT fault_status, COUNT(*) AS visit_count FROM Engineer_Visits GROUP BY fault_status"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "fault_status",
      "y_name": "visit_count",
      "x_data": [
        "Waiting",
        "Return"
      ],
      "y_data": [
        2,
        1
      ],
      "classify": [],
      "describe": "Count of engineer visits by fault status",
      "sort": null
    },
    "nl_queries": [
      "How many engineer visits are there per fault status?",
      "Which fault status has the most engineer visits?",
      "Filter the visits with the 'Waiting' status and find the average duration of these visits.",
      "Identify the engineers who most frequently handle 'Waiting' status visits."
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Skills",
      "Maintenance_Contracts",
      "Parts",
      "Engineer_Skills",
      "Skills_Required_To_Fix",
      "Asset_Parts",
      "Fault_Log",
      "Assets",
      "Part_Faults",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "134@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT company_name, COUNT(engineer_id) AS number_of_engineers FROM Maintenance_Engineers me JOIN Third_Party_Companies tpc ON me.company_id = tpc.company_id GROUP BY company_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT company_name, COUNT(engineer_id) AS number_of_engineers FROM Maintenance_Engineers me JOIN Third_Party_Companies tpc ON me.company_id = tpc.company_id GROUP BY company_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "company_name",
      "y_name": "number_of_engineers",
      "x_data": [
        "Langworth-Funk",
        "McDermott Group",
        "Schuppe-Carroll"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Count of Maintenance Engineers per Company",
      "sort": null
    },
    "nl_queries": [
      "What is the count of maintenance engineers per company?",
      "Which company has the highest number of maintenance engineers?",
      "What are the names of the companies that have maintenance engineers?",
      "What is the distribution of engineers across all the companies?"
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Engineer_Visits",
      "Maintenance_Contracts",
      "Parts",
      "Staff",
      "Skills_Required_To_Fix",
      "Asset_Parts",
      "Fault_Log",
      "Assets",
      "Part_Faults"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "139@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT asset_id, COUNT(engineer_visit_id) AS num_visits FROM Engineer_Visits GROUP BY asset_id ORDER BY num_visits DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT asset_id, COUNT(engineer_visit_id) AS num_visits FROM Engineer_Visits GROUP BY asset_id ORDER BY num_visits DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "asset_id",
      "y_name": "num_visits",
      "x_data": [
        "3",
        "1",
        "2"
      ],
      "y_data": [
        "2",
        "1",
        "1"
      ],
      "classify": [],
      "describe": "Number of engineer visits per asset",
      "sort": "desc"
    },
    "nl_queries": [
      "How many engineer visits were made per asset?",
      "Which asset had the highest number of engineer visits?",
      "How does the number of visits differ across the assets?",
      "What is the distribution of engineer visits across all assets?"
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Skills",
      "Maintenance_Contracts",
      "Engineer_Skills",
      "Maintenance_Engineers",
      "Staff",
      "Skills_Required_To_Fix",
      "Fault_Log",
      "Part_Faults",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "145@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT s.skill_description AS Skill, COUNT(e.engineer_id) AS Engineer_Count FROM Engineer_Skills es JOIN Skills s ON es.skill_id = s.skill_id JOIN Maintenance_Engineers e ON es.engineer_id = e.engineer_id GROUP BY s.skill_description",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT s.skill_description AS Skill, COUNT(e.engineer_id) AS Engineer_Count FROM Engineer_Skills es JOIN Skills s ON es.skill_id = s.skill_id JOIN Maintenance_Engineers e ON es.engineer_id = e.engineer_id GROUP BY s.skill_description"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Skill",
      "y_name": "Engineer_Count",
      "x_data": [
        "Electrical",
        "Mechanical",
        "TV, Video"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Distribution of engineers by skill type.",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of engineers by skill type?",
      "How many engineers have the Electrical skill, and which companies do they belong to?",
      "Which company has the highest number of engineers with Mechanical skills?",
      "What is the distribution of engineers by skill type across different maintenance contractors?"
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Engineer_Visits",
      "Maintenance_Contracts",
      "Parts",
      "Staff",
      "Asset_Parts",
      "Fault_Log",
      "Assets",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "149@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT e.engineer_id, COUNT(ev.engineer_visit_id) AS visit_count FROM Engineer_Visits ev JOIN Maintenance_Engineers e ON ev.engineer_id = e.engineer_id GROUP BY e.engineer_id",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT e.engineer_id, COUNT(ev.engineer_visit_id) AS visit_count FROM Engineer_Visits ev JOIN Maintenance_Engineers e ON ev.engineer_id = e.engineer_id GROUP BY e.engineer_id"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "engineer_id",
      "y_name": "visit_count",
      "x_data": [],
      "y_data": [],
      "classify": [],
      "describe": "This bar chart shows the number of visits made by each engineer.",
      "sort": "desc"
    },
    "nl_queries": [
      "Show the number of visits made by each engineer.",
      "Of the engineers, which one has made the most visits?",
      "What is the average number of visits per engineer?",
      "Show the number of visits made by engineers along with the fault status of each visit."
    ],
    "irrelevant_tables": [
      "Fault_Log_Parts",
      "Maintenance_Contracts",
      "Parts",
      "Engineer_Skills",
      "Staff",
      "Asset_Parts",
      "Fault_Log",
      "Assets",
      "Third_Party_Companies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3069@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name, COUNT(tweets.id) AS tweet_count FROM user_profiles LEFT JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY user_profiles.uid ORDER BY tweet_count DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name, COUNT(tweets.id) AS tweet_count FROM user_profiles LEFT JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY user_profiles.uid ORDER BY tweet_count DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "twitter_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "tweet_count",
      "x_data": [
        "Black Widow",
        "Iron Man",
        "Mary"
      ],
      "y_data": [
        1,
        2,
        0
      ],
      "classify": [],
      "describe": "Number of tweets by each user",
      "sort": "desc"
    },
    "nl_queries": [
      "How many tweets has each user posted?",
      "Which users have the most followers?",
      "What is the relationship between the number of tweets and the number of followers for each user?",
      "How does the number of followers impact the frequency of tweets among users?"
    ],
    "irrelevant_tables": [
      "follows"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1424@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT a.City AS City, COUNT(f.id) AS NumberOfFlights FROM airport a JOIN flight f ON a.id = f.airport_id GROUP BY a.City ORDER BY NumberOfFlights DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT a.City AS City, COUNT(f.id) AS NumberOfFlights FROM airport a JOIN flight f ON a.id = f.airport_id GROUP BY a.City ORDER BY NumberOfFlights DESC"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "flight_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "City",
      "y_name": "NumberOfFlights",
      "x_data": [
        "Amsterdam",
        "Akureyri",
        "Anchorage"
      ],
      "y_data": [
        2,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of flights per city",
      "sort": "desc"
    },
    "nl_queries": [
      "How many flights are operated from each city?",
      "Which city has the highest number of flights?",
      "What is the distribution of flights among the top 2 cities?",
      "How does the number of flights from Akureyri compare to Amsterdam?"
    ],
    "irrelevant_tables": [
      "operate_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4001": {
    "vis_query": {
      "vis_part": "Visualize BAR CHART",
      "data_part": {
        "sql_part": "SELECT activity_name, COUNT(stuid) AS participant_count FROM Participates_in JOIN Activity ON Participates_in.actid = Activity.actid GROUP BY activity_name",
        "binning": ""
      },
      "VQL": "Visualize BAR CHART SELECT activity_name, COUNT(stuid) AS participant_count FROM Participates_in JOIN Activity ON Participates_in.actid = Activity.actid GROUP BY activity_name"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "activity_name",
      "y_name": "participant_count",
      "x_data": [
        "Mountain Climbing",
        "Canoeing",
        "Kayaking"
      ],
      "y_data": [
        1,
        1,
        0
      ],
      "classify": [],
      "describe": "Number of students participating in each activity",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students are participating in each activity?",
      "Which activity has the highest number of student participants?",
      "How does the participation in different activities compare?",
      "Which activities have no student participation?"
    ],
    "irrelevant_tables": [
      "Faculty",
      "Faculty_Participates_in",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4002": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Major, COUNT(*) AS Number_of_Students FROM Student GROUP BY Major",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Major, COUNT(*) AS Number_of_Students FROM Student GROUP BY Major"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Major",
      "y_name": "Number_of_Students",
      "x_data": [
        "600"
      ],
      "y_data": [
        3
      ],
      "classify": [],
      "describe": "Number of students per major",
      "sort": "asc"
    },
    "nl_queries": [
      "How many students are in each major?",
      "Which major has the highest number of students?",
      "What is the distribution of students across different majors?",
      "Are there any majors with a significantly lower number of students?"
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in",
      "Faculty",
      "Activity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4003": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT a.Airport_Name, SUM(ac.Max_Gross_Weight) AS Total_Gross_Weight, ac.Aircraft FROM airport_aircraft aa JOIN airport a ON aa.Airport_ID = a.Airport_ID JOIN aircraft ac ON aa.Aircraft_ID = ac.Aircraft_ID GROUP BY a.Airport_Name, ac.Aircraft",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT a.Airport_Name, SUM(ac.Max_Gross_Weight) AS Total_Gross_Weight, ac.Aircraft FROM airport_aircraft aa JOIN airport a ON aa.Airport_ID = a.Airport_ID JOIN aircraft ac ON aa.Aircraft_ID = ac.Aircraft_ID GROUP BY a.Airport_Name, ac.Aircraft"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Airport_Name",
      "y_name": "Total_Gross_Weight",
      "x_data": [
        "London Heathrow",
        "London Gatwick"
      ],
      "y_data": [
        2271,
        631
      ],
      "classify": [
        "Aircraft"
      ],
      "describe": "Total gross weight of aircraft at each airport, grouped by aircraft type",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the total gross weight of aircraft at each airport?",
      "What is the distribution of aircraft types contributing to the total gross weight at each airport?",
      "Which airport has the highest concentration of a specific aircraft type?",
      "Compare the total gross weight of aircraft across different airports."
    ],
    "irrelevant_tables": [
      "match",
      "pilot"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4004": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Allergy, COUNT(*) AS student_count FROM Has_Allergy GROUP BY Allergy",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Allergy, COUNT(*) AS student_count FROM Has_Allergy GROUP BY Allergy"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Allergy",
      "y_name": "student_count",
      "x_data": [
        "Cat",
        "Shellfish",
        "Tree Pollen"
      ],
      "y_data": [
        1,
        1,
        1
      ],
      "classify": [],
      "describe": "Number of students with each type of allergy",
      "sort": null
    },
    "nl_queries": [
      "What are the different types of allergies that students have?",
      "How many students have each type of allergy?",
      "Which allergy is the most common among students?",
      "What is the distribution of food-related allergies among students?"
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4005": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT college.name_full AS college_name, COUNT(player_college.player_id) AS num_players FROM player_college JOIN college ON player_college.college_id = college.college_id GROUP BY college.name_full ORDER BY num_players DESC LIMIT 5",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT college.name_full AS college_name, COUNT(player_college.player_id) AS num_players FROM player_college JOIN college ON player_college.college_id = college.college_id GROUP BY college.name_full ORDER BY num_players DESC LIMIT 5"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "college_name",
      "y_name": "num_players",
      "x_data": [
        "Rice University",
        "Penn State University",
        "University of Texas",
        "University of Florida",
        "Stanford University"
      ],
      "y_data": [
        10,
        8,
        7,
        6,
        5
      ],
      "classify": [],
      "describe": "Top 5 colleges by the number of players they produced",
      "sort": "desc"
    },
    "nl_queries": [
      "Which colleges have produced the highest number of players?",
      "How many players did the top 5 colleges produce?",
      "What are the names of the top 5 colleges with the most players?",
      "Can you show the distribution of the number of players produced by the top 5 colleges?"
    ],
    "irrelevant_tables": [
      "hall_of_fame",
      "player_award",
      "appearances",
      "team_half",
      "pitching_postseason",
      "pitching",
      "fielding_postseason",
      "home_game",
      "postseason",
      "player_award_vote",
      "manager_award",
      "batting_postseason",
      "manager_award_vote",
      "team_franchise",
      "player",
      "all_star",
      "manager_half",
      "park",
      "fielding_outfield",
      "manager",
      "batting",
      "fielding"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4006": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT team_id, SUM(w) AS total_wins FROM team GROUP BY team_id ORDER BY total_wins DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT team_id, SUM(w) AS total_wins FROM team GROUP BY team_id ORDER BY total_wins DESC"
    },
    "reasoning_level": "L1",
    "chart": "BAR",
    "hardness": "Easy",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "team_id",
      "y_name": "total_wins",
      "x_data": [
        "CH1",
        "BS1",
        "CL1"
      ],
      "y_data": [
        19,
        20,
        10
      ],
      "classify": [],
      "describe": "Total wins by team",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the total number of wins for each team?",
      "Which team has the highest number of wins?",
      "Can you show the top three teams by total wins?",
      "What is the distribution of wins among different teams?"
    ],
    "irrelevant_tables": [
      "hall_of_fame",
      "appearances",
      "college",
      "team_half",
      "pitching_postseason",
      "pitching",
      "fielding_postseason",
      "home_game",
      "postseason",
      "player_award_vote",
      "manager_award",
      "batting_postseason",
      "player_college",
      "manager_award_vote",
      "team_franchise",
      "player",
      "all_star",
      "manager_half",
      "park",
      "team_franchise",
      "fielding_outfield",
      "salary",
      "manager",
      "batting",
      "fielding"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4007": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT wb.compatible_since_year, b.name, COUNT(*) AS compatibility_count FROM accelerator_compatible_browser wb JOIN browser b ON wb.browser_id = b.id GROUP BY wb.compatible_since_year, b.name",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT wb.compatible_since_year, b.name, COUNT(*) AS compatibility_count FROM accelerator_compatible_browser wb JOIN browser b ON wb.browser_id = b.id GROUP BY wb.compatible_since_year, b.name"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "browser_web",
    "vis_obj": {
      "chart": "stacked_bar",
      "x_name": "compatible_since_year",
      "y_name": "compatibility_count",
      "x_data": [
        "1995",
        "1996"
      ],
      "y_data": [
        "1",
        "2"
      ],
      "classify": [
        "name"
      ],
      "describe": "Number of compatible browsers by year",
      "sort": null
    },
    "nl_queries": [
      "Show the number of compatible browsers by year.",
      "Compare the market share of different browsers that are compatible with accelerators since 1995.",
      "Analyze the operating systems of web client accelerators that support these compatible browsers.",
      "Determine the type of connections supported by these web client accelerators."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4008": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Continent, AVG(cd.Horsepower) AS Avg_Horsepower FROM cars_data cd JOIN car_makers cm ON cd.Id = cm.Id JOIN countries co ON cm.Country = co.CountryId JOIN continents c ON co.Continent = c.ContId GROUP BY c.Continent ORDER BY Avg_Horsepower DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Continent, AVG(cd.Horsepower) AS Avg_Horsepower FROM cars_data cd JOIN car_makers cm ON cd.Id = cm.Id JOIN countries co ON cm.Country = co.CountryId JOIN continents c ON co.Continent = c.ContId GROUP BY c.Continent ORDER BY Avg_Horsepower DESC"
    },
    "reasoning_level": "L4",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "Avg_Horsepower",
      "x_data": [
        "europe",
        "america"
      ],
      "y_data": [
        147.5,
        130.0
      ],
      "classify": [],
      "describe": "Comparing average horsepower of cars across different continents",
      "sort": "desc"
    },
    "nl_queries": [
      "What is the average horsepower of cars across different continents?",
      "How does the average horsepower of cars in Europe compare to America?",
      "Which continent has the highest average horsepower for cars?",
      "Can we see the trend of average horsepower by continent over the years?"
    ],
    "irrelevant_tables": [
      "model_list",
      "car_names"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4009": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.CountryName AS Country, AVG(cd.MPG) AS Average_MPG FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId JOIN cars_data cd ON cm.Id = cd.Id GROUP BY c.CountryName",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.CountryName AS Country, AVG(cd.MPG) AS Average_MPG FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId JOIN cars_data cd ON cm.Id = cd.Id GROUP BY c.CountryName"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "Average_MPG",
      "x_data": [
        "usa",
        "germany"
      ],
      "y_data": [
        17.0,
        18.0
      ],
      "classify": [],
      "describe": "Average MPG of cars by country",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average MPG of cars by country?",
      "How does the average MPG of cars vary by continent?",
      "What is the distribution of car weights for each country?",
      "How does the average horsepower compare across different continents?"
    ],
    "irrelevant_tables": [
      "model_list",
      "car_names",
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4010": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Continent AS Continent, AVG(cd.MPG) AS Avg_MPG FROM continents c INNER JOIN countries cn ON c.ContId = cn.Continent INNER JOIN car_makers cm ON cn.CountryId = cm.Country INNER JOIN model_list ml ON cm.Maker = ml.Maker INNER JOIN cars_data cd ON ml.ModelId = cd.Id GROUP BY c.Continent",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Continent AS Continent, AVG(cd.MPG) AS Avg_MPG FROM continents c INNER JOIN countries cn ON c.ContId = cn.Continent INNER JOIN car_makers cm ON cn.CountryId = cm.Country INNER JOIN model_list ml ON cm.Maker = ml.Maker INNER JOIN cars_data cd ON ml.ModelId = cd.Id GROUP BY c.Continent"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "Avg_MPG",
      "x_data": [
        "america",
        "europe"
      ],
      "y_data": [
        16.5,
        18.0
      ],
      "classify": [],
      "describe": "Average MPG by Continent",
      "sort": "null"
    },
    "nl_queries": [
      "What is the average MPG for cars from different continents?",
      "How do the average MPG values compare between American and European car makers?",
      "Which continent's car makers have higher average MPG?",
      "What is the trend in average MPG for cars from different continents over the years?"
    ],
    "irrelevant_tables": [
      "car_names"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4011": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.Year, AVG(c.MPG) AS AvgMPG FROM cars_data c GROUP BY c.Year ORDER BY c.Year",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.Year, AVG(c.MPG) AS AvgMPG FROM cars_data c GROUP BY c.Year ORDER BY c.Year"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "AvgMPG",
      "x_data": [
        "1970"
      ],
      "y_data": [
        17.0
      ],
      "classify": [],
      "describe": "Average MPG over the Years",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average MPG of cars across different years?",
      "Which car makers have the highest and lowest average MPG in the year 1970?",
      "How do the average horsepower of cars compare between American and European makers in 1970?",
      "What is the relationship between average MPG and average horsepower for different car makers in 1970?"
    ],
    "irrelevant_tables": [
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4012": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT model_list.Model AS Model, AVG(cars_data.MPG) AS AverageMPG FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId GROUP BY model_list.Model",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT model_list.Model AS Model, AVG(cars_data.MPG) AS AverageMPG FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId GROUP BY model_list.Model"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Model",
      "y_name": "AverageMPG",
      "x_data": [
        "amc",
        "audi",
        "bmw"
      ],
      "y_data": [
        18.0,
        15.0,
        18.0
      ],
      "classify": [],
      "describe": "Average MPG by car model",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average MPG for each car model?",
      "How does the average MPG compare for different car makers?",
      "What are the average horsepower values for each car model along with their MPG?",
      "What are the relationships between horsepower, weight, and MPG for each car model?"
    ],
    "irrelevant_tables": [
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4013": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT cd.Horsepower, cd.Weight FROM cars_data cd",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT cd.Horsepower, cd.Weight FROM cars_data cd"
    },
    "reasoning_level": "L3",
    "chart": "SCATTER",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Horsepower",
      "y_name": "Weight",
      "x_data": [
        130.0,
        165.0,
        150.0
      ],
      "y_data": [
        3504,
        3693,
        3436
      ],
      "classify": [],
      "describe": "Scatter plot showing the relationship between Horsepower and Weight of cars",
      "sort": null
    },
    "nl_queries": [
      "What is the relationship between Horsepower and Weight of cars?",
      "How does the relation between Horsepower and Weight vary by Maker?",
      "How does the distribution of Horsepower and Weight differ across different continents?",
      "What insights can be drawn about the trends in Horsepower and Weight over the years?"
    ],
    "irrelevant_tables": [
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4021": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name AS department_name, Budget_in_Billions AS budget FROM department",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name AS department_name, Budget_in_Billions AS budget FROM department"
    },
    "reasoning_level": "L2",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "department_name",
      "y_name": "budget",
      "x_data": [
        "State",
        "Treasury",
        "Defense"
      ],
      "y_data": [
        9.96,
        11.1,
        439.3
      ],
      "classify": [],
      "describe": "Comparison of budget allocation across departments",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the budget allocation for each department?",
      "Which department has the highest budget allocation?",
      "What is the difference in budget allocation between the department with the highest and lowest budgets?",
      "How does the budget allocation compare to the number of employees in each department?"
    ],
    "irrelevant_tables": [
      "head",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4026": {
    "vis_query": {
      "vis_part": "Visualize STACKED BAR",
      "data_part": {
        "sql_part": "SELECT Company_name, chip_model, COUNT(*) AS phone_count FROM phone GROUP BY Company_name, chip_model",
        "binning": ""
      },
      "VQL": "Visualize STACKED BAR SELECT Company_name, chip_model, COUNT(*) AS phone_count FROM phone GROUP BY Company_name, chip_model"
    },
    "reasoning_level": "L3",
    "chart": "STACKED BAR",
    "hardness": "Medium",
    "db_id": "phone_1",
    "vis_obj": {
      "chart": "stacked bar",
      "x_name": "Company_name",
      "y_name": "phone_count",
      "x_data": [
        "Sony Mobile Communications",
        "LG Electronics",
        "Nokia Corporation"
      ],
      "y_data": [
        2,
        1,
        3
      ],
      "classify": [
        "chip_model"
      ],
      "describe": "Count of phones per company classified by chip model",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the distribution of different chip models across various phone companies?",
      "How does the count of phones with different chip models vary across companies?",
      "Which company uses the most diverse set of chip models for their phones?",
      "What trends can be observed in the use of different chip models among the companies?"
    ],
    "irrelevant_tables": [
      "screen_mode"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4035": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name, AVG(salary) AS avg_salary FROM instructor GROUP BY dept_name"
    },
    "reasoning_level": "L3",
    "chart": "BAR",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "avg_salary",
      "x_data": [
        "Cybernetics",
        "Statistics",
        "Marketing"
      ],
      "y_data": [
        94333.99,
        59303.62,
        119921.41
      ],
      "classify": [],
      "describe": "Average salary by department",
      "sort": "asc"
    },
    "nl_queries": [
      "What is the average salary by department?",
      "How many courses are offered by each department?",
      "What is the average number of credits for courses offered by each department?",
      "What is the relationship between department budgets and average salaries?"
    ],
    "irrelevant_tables": [
      "prereq",
      "teaches",
      "student",
      "classroom",
      "takes",
      "time_slot",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  }
}